
Mirage V1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080019e0  080019e0  000119e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a0c  08001a0c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001a0c  08001a0c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a0c  08001a0c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a0c  08001a0c  00011a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a10  08001a10  00011a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001a14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08001a20  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08001a20  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000147e6  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000246c  00000000  00000000  0003481b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00008ee2  00000000  00000000  00036c87  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000cb0  00000000  00000000  0003fb70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000c48  00000000  00000000  00040820  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00015cd0  00000000  00000000  00041468  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000a72c  00000000  00000000  00057138  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00073603  00000000  00000000  00061864  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000d4e67  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002180  00000000  00000000  000d4ee4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080019c8 	.word	0x080019c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080019c8 	.word	0x080019c8

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b510      	push	{r4, lr}
 800014e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000150:	4b0e      	ldr	r3, [pc, #56]	; (800018c <HAL_InitTick+0x40>)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0c      	ldr	r2, [pc, #48]	; (8000190 <HAL_InitTick+0x44>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f88e 	bl	8000284 <HAL_SYSTICK_Config>
 8000168:	b968      	cbnz	r0, 8000186 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016a:	2c0f      	cmp	r4, #15
 800016c:	d901      	bls.n	8000172 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800016e:	2001      	movs	r0, #1
 8000170:	e00a      	b.n	8000188 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000172:	2200      	movs	r2, #0
 8000174:	4621      	mov	r1, r4
 8000176:	f04f 30ff 	mov.w	r0, #4294967295
 800017a:	f000 f843 	bl	8000204 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017e:	4b05      	ldr	r3, [pc, #20]	; (8000194 <HAL_InitTick+0x48>)
 8000180:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000182:	2000      	movs	r0, #0
 8000184:	e000      	b.n	8000188 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000186:	2001      	movs	r0, #1
}
 8000188:	bd10      	pop	{r4, pc}
 800018a:	bf00      	nop
 800018c:	20000000 	.word	0x20000000
 8000190:	20000008 	.word	0x20000008
 8000194:	20000004 	.word	0x20000004

08000198 <HAL_Init>:
{
 8000198:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019a:	4a07      	ldr	r2, [pc, #28]	; (80001b8 <HAL_Init+0x20>)
 800019c:	6813      	ldr	r3, [r2, #0]
 800019e:	f043 0310 	orr.w	r3, r3, #16
 80001a2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a4:	2003      	movs	r0, #3
 80001a6:	f000 f81b 	bl	80001e0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001aa:	2000      	movs	r0, #0
 80001ac:	f7ff ffce 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001b0:	f001 fac0 	bl	8001734 <HAL_MspInit>
}
 80001b4:	2000      	movs	r0, #0
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	40022000 	.word	0x40022000

080001bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001bc:	4a03      	ldr	r2, [pc, #12]	; (80001cc <HAL_IncTick+0x10>)
 80001be:	6811      	ldr	r1, [r2, #0]
 80001c0:	4b03      	ldr	r3, [pc, #12]	; (80001d0 <HAL_IncTick+0x14>)
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	440b      	add	r3, r1
 80001c6:	6013      	str	r3, [r2, #0]
}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	20000034 	.word	0x20000034
 80001d0:	20000000 	.word	0x20000000

080001d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d4:	4b01      	ldr	r3, [pc, #4]	; (80001dc <HAL_GetTick+0x8>)
 80001d6:	6818      	ldr	r0, [r3, #0]
}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	20000034 	.word	0x20000034

080001e0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001e0:	4a07      	ldr	r2, [pc, #28]	; (8000200 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80001e2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001e4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001e8:	041b      	lsls	r3, r3, #16
 80001ea:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001ec:	0200      	lsls	r0, r0, #8
 80001ee:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001f2:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80001f4:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80001f8:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80001fc:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80001fe:	4770      	bx	lr
 8000200:	e000ed00 	.word	0xe000ed00

08000204 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000204:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000206:	4b17      	ldr	r3, [pc, #92]	; (8000264 <HAL_NVIC_SetPriority+0x60>)
 8000208:	68db      	ldr	r3, [r3, #12]
 800020a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800020e:	f1c3 0407 	rsb	r4, r3, #7
 8000212:	2c04      	cmp	r4, #4
 8000214:	bf28      	it	cs
 8000216:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000218:	1d1d      	adds	r5, r3, #4
 800021a:	2d06      	cmp	r5, #6
 800021c:	d918      	bls.n	8000250 <HAL_NVIC_SetPriority+0x4c>
 800021e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000220:	f04f 35ff 	mov.w	r5, #4294967295
 8000224:	fa05 f404 	lsl.w	r4, r5, r4
 8000228:	ea21 0104 	bic.w	r1, r1, r4
 800022c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800022e:	fa05 f303 	lsl.w	r3, r5, r3
 8000232:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000236:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000238:	2800      	cmp	r0, #0
 800023a:	db0b      	blt.n	8000254 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023c:	0109      	lsls	r1, r1, #4
 800023e:	b2c9      	uxtb	r1, r1
 8000240:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000244:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000248:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800024c:	bc30      	pop	{r4, r5}
 800024e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000250:	2300      	movs	r3, #0
 8000252:	e7e5      	b.n	8000220 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000254:	f000 000f 	and.w	r0, r0, #15
 8000258:	0109      	lsls	r1, r1, #4
 800025a:	b2c9      	uxtb	r1, r1
 800025c:	4b02      	ldr	r3, [pc, #8]	; (8000268 <HAL_NVIC_SetPriority+0x64>)
 800025e:	5419      	strb	r1, [r3, r0]
 8000260:	e7f4      	b.n	800024c <HAL_NVIC_SetPriority+0x48>
 8000262:	bf00      	nop
 8000264:	e000ed00 	.word	0xe000ed00
 8000268:	e000ed14 	.word	0xe000ed14

0800026c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800026c:	f000 021f 	and.w	r2, r0, #31
 8000270:	0940      	lsrs	r0, r0, #5
 8000272:	2301      	movs	r3, #1
 8000274:	4093      	lsls	r3, r2
 8000276:	4a02      	ldr	r2, [pc, #8]	; (8000280 <HAL_NVIC_EnableIRQ+0x14>)
 8000278:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	e000e100 	.word	0xe000e100

08000284 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000284:	3801      	subs	r0, #1
 8000286:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800028a:	d20a      	bcs.n	80002a2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028c:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <HAL_SYSTICK_Config+0x24>)
 800028e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000290:	4a06      	ldr	r2, [pc, #24]	; (80002ac <HAL_SYSTICK_Config+0x28>)
 8000292:	21f0      	movs	r1, #240	; 0xf0
 8000294:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000298:	2000      	movs	r0, #0
 800029a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800029c:	2207      	movs	r2, #7
 800029e:	601a      	str	r2, [r3, #0]
 80002a0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002a2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000e010 	.word	0xe000e010
 80002ac:	e000ed00 	.word	0xe000ed00

080002b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80002b0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80002b2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80002b6:	2b02      	cmp	r3, #2
 80002b8:	d003      	beq.n	80002c2 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80002ba:	2304      	movs	r3, #4
 80002bc:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80002be:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 80002c0:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80002c2:	6802      	ldr	r2, [r0, #0]
 80002c4:	6813      	ldr	r3, [r2, #0]
 80002c6:	f023 030e 	bic.w	r3, r3, #14
 80002ca:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80002cc:	6802      	ldr	r2, [r0, #0]
 80002ce:	6813      	ldr	r3, [r2, #0]
 80002d0:	f023 0301 	bic.w	r3, r3, #1
 80002d4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80002d6:	6803      	ldr	r3, [r0, #0]
 80002d8:	4a19      	ldr	r2, [pc, #100]	; (8000340 <HAL_DMA_Abort_IT+0x90>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d014      	beq.n	8000308 <HAL_DMA_Abort_IT+0x58>
 80002de:	3214      	adds	r2, #20
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d01f      	beq.n	8000324 <HAL_DMA_Abort_IT+0x74>
 80002e4:	3214      	adds	r2, #20
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d01e      	beq.n	8000328 <HAL_DMA_Abort_IT+0x78>
 80002ea:	3214      	adds	r2, #20
 80002ec:	4293      	cmp	r3, r2
 80002ee:	d01e      	beq.n	800032e <HAL_DMA_Abort_IT+0x7e>
 80002f0:	3214      	adds	r2, #20
 80002f2:	4293      	cmp	r3, r2
 80002f4:	d01e      	beq.n	8000334 <HAL_DMA_Abort_IT+0x84>
 80002f6:	3214      	adds	r2, #20
 80002f8:	4293      	cmp	r3, r2
 80002fa:	d002      	beq.n	8000302 <HAL_DMA_Abort_IT+0x52>
 80002fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000300:	e003      	b.n	800030a <HAL_DMA_Abort_IT+0x5a>
 8000302:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000306:	e000      	b.n	800030a <HAL_DMA_Abort_IT+0x5a>
 8000308:	2201      	movs	r2, #1
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <HAL_DMA_Abort_IT+0x94>)
 800030c:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800030e:	2301      	movs	r3, #1
 8000310:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000314:	2300      	movs	r3, #0
 8000316:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800031a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800031c:	b16b      	cbz	r3, 800033a <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 800031e:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000320:	2000      	movs	r0, #0
 8000322:	e7cd      	b.n	80002c0 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000324:	2210      	movs	r2, #16
 8000326:	e7f0      	b.n	800030a <HAL_DMA_Abort_IT+0x5a>
 8000328:	f44f 7280 	mov.w	r2, #256	; 0x100
 800032c:	e7ed      	b.n	800030a <HAL_DMA_Abort_IT+0x5a>
 800032e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000332:	e7ea      	b.n	800030a <HAL_DMA_Abort_IT+0x5a>
 8000334:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000338:	e7e7      	b.n	800030a <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 800033a:	2000      	movs	r0, #0
 800033c:	e7c0      	b.n	80002c0 <HAL_DMA_Abort_IT+0x10>
 800033e:	bf00      	nop
 8000340:	40020008 	.word	0x40020008
 8000344:	40020000 	.word	0x40020000

08000348 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000348:	b4f0      	push	{r4, r5, r6, r7}
 800034a:	b082      	sub	sp, #8
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 800034c:	2600      	movs	r6, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800034e:	4635      	mov	r5, r6
 8000350:	e0a1      	b.n	8000496 <HAL_GPIO_Init+0x14e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000352:	2c00      	cmp	r4, #0
 8000354:	d059      	beq.n	800040a <HAL_GPIO_Init+0xc2>
 8000356:	2c01      	cmp	r4, #1
 8000358:	d100      	bne.n	800035c <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800035a:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800035c:	2bff      	cmp	r3, #255	; 0xff
 800035e:	d868      	bhi.n	8000432 <HAL_GPIO_Init+0xea>
 8000360:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000362:	2bff      	cmp	r3, #255	; 0xff
 8000364:	d868      	bhi.n	8000438 <HAL_GPIO_Init+0xf0>
 8000366:	00ac      	lsls	r4, r5, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000368:	f8dc 2000 	ldr.w	r2, [ip]
 800036c:	270f      	movs	r7, #15
 800036e:	40a7      	lsls	r7, r4
 8000370:	ea22 0207 	bic.w	r2, r2, r7
 8000374:	fa06 f404 	lsl.w	r4, r6, r4
 8000378:	4322      	orrs	r2, r4
 800037a:	f8cc 2000 	str.w	r2, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800037e:	684a      	ldr	r2, [r1, #4]
 8000380:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000384:	f000 8086 	beq.w	8000494 <HAL_GPIO_Init+0x14c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000388:	4a5e      	ldr	r2, [pc, #376]	; (8000504 <HAL_GPIO_Init+0x1bc>)
 800038a:	6994      	ldr	r4, [r2, #24]
 800038c:	f044 0401 	orr.w	r4, r4, #1
 8000390:	6194      	str	r4, [r2, #24]
 8000392:	6992      	ldr	r2, [r2, #24]
 8000394:	f002 0201 	and.w	r2, r2, #1
 8000398:	9201      	str	r2, [sp, #4]
 800039a:	9a01      	ldr	r2, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
 800039c:	08ac      	lsrs	r4, r5, #2
 800039e:	1ca7      	adds	r7, r4, #2
 80003a0:	4a59      	ldr	r2, [pc, #356]	; (8000508 <HAL_GPIO_Init+0x1c0>)
 80003a2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003a6:	f005 0703 	and.w	r7, r5, #3
 80003aa:	00bf      	lsls	r7, r7, #2
 80003ac:	f04f 0c0f 	mov.w	ip, #15
 80003b0:	fa0c fc07 	lsl.w	ip, ip, r7
 80003b4:	ea22 0c0c 	bic.w	ip, r2, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003b8:	4a54      	ldr	r2, [pc, #336]	; (800050c <HAL_GPIO_Init+0x1c4>)
 80003ba:	4290      	cmp	r0, r2
 80003bc:	d042      	beq.n	8000444 <HAL_GPIO_Init+0xfc>
 80003be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80003c2:	4290      	cmp	r0, r2
 80003c4:	d07f      	beq.n	80004c6 <HAL_GPIO_Init+0x17e>
 80003c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80003ca:	4290      	cmp	r0, r2
 80003cc:	d07d      	beq.n	80004ca <HAL_GPIO_Init+0x182>
 80003ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80003d2:	4290      	cmp	r0, r2
 80003d4:	d034      	beq.n	8000440 <HAL_GPIO_Init+0xf8>
 80003d6:	2204      	movs	r2, #4
 80003d8:	e035      	b.n	8000446 <HAL_GPIO_Init+0xfe>
      switch (GPIO_Init->Mode)
 80003da:	4f4d      	ldr	r7, [pc, #308]	; (8000510 <HAL_GPIO_Init+0x1c8>)
 80003dc:	42bc      	cmp	r4, r7
 80003de:	d014      	beq.n	800040a <HAL_GPIO_Init+0xc2>
 80003e0:	d90b      	bls.n	80003fa <HAL_GPIO_Init+0xb2>
 80003e2:	4f4c      	ldr	r7, [pc, #304]	; (8000514 <HAL_GPIO_Init+0x1cc>)
 80003e4:	42bc      	cmp	r4, r7
 80003e6:	d010      	beq.n	800040a <HAL_GPIO_Init+0xc2>
 80003e8:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80003ec:	42bc      	cmp	r4, r7
 80003ee:	d00c      	beq.n	800040a <HAL_GPIO_Init+0xc2>
 80003f0:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80003f4:	42bc      	cmp	r4, r7
 80003f6:	d1b1      	bne.n	800035c <HAL_GPIO_Init+0x14>
 80003f8:	e007      	b.n	800040a <HAL_GPIO_Init+0xc2>
 80003fa:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80003fe:	42bc      	cmp	r4, r7
 8000400:	d003      	beq.n	800040a <HAL_GPIO_Init+0xc2>
 8000402:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000406:	42bc      	cmp	r4, r7
 8000408:	d1a8      	bne.n	800035c <HAL_GPIO_Init+0x14>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800040a:	688c      	ldr	r4, [r1, #8]
 800040c:	b17c      	cbz	r4, 800042e <HAL_GPIO_Init+0xe6>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800040e:	2c01      	cmp	r4, #1
 8000410:	d008      	beq.n	8000424 <HAL_GPIO_Init+0xdc>
            GPIOx->BRR = ioposition;
 8000412:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000414:	2608      	movs	r6, #8
 8000416:	e7a1      	b.n	800035c <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000418:	68ce      	ldr	r6, [r1, #12]
 800041a:	3608      	adds	r6, #8
          break;
 800041c:	e79e      	b.n	800035c <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800041e:	68ce      	ldr	r6, [r1, #12]
 8000420:	360c      	adds	r6, #12
          break;
 8000422:	e79b      	b.n	800035c <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 8000424:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000426:	2608      	movs	r6, #8
 8000428:	e798      	b.n	800035c <HAL_GPIO_Init+0x14>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800042a:	2600      	movs	r6, #0
 800042c:	e796      	b.n	800035c <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800042e:	2604      	movs	r6, #4
 8000430:	e794      	b.n	800035c <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000432:	f100 0c04 	add.w	ip, r0, #4
 8000436:	e794      	b.n	8000362 <HAL_GPIO_Init+0x1a>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000438:	f1a5 0408 	sub.w	r4, r5, #8
 800043c:	00a4      	lsls	r4, r4, #2
 800043e:	e793      	b.n	8000368 <HAL_GPIO_Init+0x20>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000440:	2203      	movs	r2, #3
 8000442:	e000      	b.n	8000446 <HAL_GPIO_Init+0xfe>
 8000444:	2200      	movs	r2, #0
 8000446:	40ba      	lsls	r2, r7
 8000448:	ea42 020c 	orr.w	r2, r2, ip
        AFIO->EXTICR[position >> 2U] = temp;
 800044c:	3402      	adds	r4, #2
 800044e:	4f2e      	ldr	r7, [pc, #184]	; (8000508 <HAL_GPIO_Init+0x1c0>)
 8000450:	f847 2024 	str.w	r2, [r7, r4, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000454:	684a      	ldr	r2, [r1, #4]
 8000456:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800045a:	d038      	beq.n	80004ce <HAL_GPIO_Init+0x186>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800045c:	4c2e      	ldr	r4, [pc, #184]	; (8000518 <HAL_GPIO_Init+0x1d0>)
 800045e:	6822      	ldr	r2, [r4, #0]
 8000460:	431a      	orrs	r2, r3
 8000462:	6022      	str	r2, [r4, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000464:	684a      	ldr	r2, [r1, #4]
 8000466:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800046a:	d036      	beq.n	80004da <HAL_GPIO_Init+0x192>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800046c:	4c2a      	ldr	r4, [pc, #168]	; (8000518 <HAL_GPIO_Init+0x1d0>)
 800046e:	6862      	ldr	r2, [r4, #4]
 8000470:	431a      	orrs	r2, r3
 8000472:	6062      	str	r2, [r4, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000474:	684a      	ldr	r2, [r1, #4]
 8000476:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800047a:	d034      	beq.n	80004e6 <HAL_GPIO_Init+0x19e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800047c:	4c26      	ldr	r4, [pc, #152]	; (8000518 <HAL_GPIO_Init+0x1d0>)
 800047e:	68a2      	ldr	r2, [r4, #8]
 8000480:	431a      	orrs	r2, r3
 8000482:	60a2      	str	r2, [r4, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000484:	684a      	ldr	r2, [r1, #4]
 8000486:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 800048a:	d032      	beq.n	80004f2 <HAL_GPIO_Init+0x1aa>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800048c:	4c22      	ldr	r4, [pc, #136]	; (8000518 <HAL_GPIO_Init+0x1d0>)
 800048e:	68e2      	ldr	r2, [r4, #12]
 8000490:	4313      	orrs	r3, r2
 8000492:	60e3      	str	r3, [r4, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000494:	3501      	adds	r5, #1
 8000496:	2d0f      	cmp	r5, #15
 8000498:	d831      	bhi.n	80004fe <HAL_GPIO_Init+0x1b6>
    ioposition = (0x01U << position);
 800049a:	2201      	movs	r2, #1
 800049c:	40aa      	lsls	r2, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800049e:	680b      	ldr	r3, [r1, #0]
 80004a0:	4013      	ands	r3, r2
    if (iocurrent == ioposition)
 80004a2:	429a      	cmp	r2, r3
 80004a4:	d1f6      	bne.n	8000494 <HAL_GPIO_Init+0x14c>
      switch (GPIO_Init->Mode)
 80004a6:	684c      	ldr	r4, [r1, #4]
 80004a8:	2c12      	cmp	r4, #18
 80004aa:	d0b8      	beq.n	800041e <HAL_GPIO_Init+0xd6>
 80004ac:	d895      	bhi.n	80003da <HAL_GPIO_Init+0x92>
 80004ae:	2c02      	cmp	r4, #2
 80004b0:	d0b2      	beq.n	8000418 <HAL_GPIO_Init+0xd0>
 80004b2:	f67f af4e 	bls.w	8000352 <HAL_GPIO_Init+0xa>
 80004b6:	2c03      	cmp	r4, #3
 80004b8:	d0b7      	beq.n	800042a <HAL_GPIO_Init+0xe2>
 80004ba:	2c11      	cmp	r4, #17
 80004bc:	f47f af4e 	bne.w	800035c <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004c0:	68ce      	ldr	r6, [r1, #12]
 80004c2:	3604      	adds	r6, #4
          break;
 80004c4:	e74a      	b.n	800035c <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004c6:	2201      	movs	r2, #1
 80004c8:	e7bd      	b.n	8000446 <HAL_GPIO_Init+0xfe>
 80004ca:	2202      	movs	r2, #2
 80004cc:	e7bb      	b.n	8000446 <HAL_GPIO_Init+0xfe>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80004ce:	4c12      	ldr	r4, [pc, #72]	; (8000518 <HAL_GPIO_Init+0x1d0>)
 80004d0:	6822      	ldr	r2, [r4, #0]
 80004d2:	ea22 0203 	bic.w	r2, r2, r3
 80004d6:	6022      	str	r2, [r4, #0]
 80004d8:	e7c4      	b.n	8000464 <HAL_GPIO_Init+0x11c>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80004da:	4c0f      	ldr	r4, [pc, #60]	; (8000518 <HAL_GPIO_Init+0x1d0>)
 80004dc:	6862      	ldr	r2, [r4, #4]
 80004de:	ea22 0203 	bic.w	r2, r2, r3
 80004e2:	6062      	str	r2, [r4, #4]
 80004e4:	e7c6      	b.n	8000474 <HAL_GPIO_Init+0x12c>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80004e6:	4c0c      	ldr	r4, [pc, #48]	; (8000518 <HAL_GPIO_Init+0x1d0>)
 80004e8:	68a2      	ldr	r2, [r4, #8]
 80004ea:	ea22 0203 	bic.w	r2, r2, r3
 80004ee:	60a2      	str	r2, [r4, #8]
 80004f0:	e7c8      	b.n	8000484 <HAL_GPIO_Init+0x13c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80004f2:	4c09      	ldr	r4, [pc, #36]	; (8000518 <HAL_GPIO_Init+0x1d0>)
 80004f4:	68e2      	ldr	r2, [r4, #12]
 80004f6:	ea22 0303 	bic.w	r3, r2, r3
 80004fa:	60e3      	str	r3, [r4, #12]
 80004fc:	e7ca      	b.n	8000494 <HAL_GPIO_Init+0x14c>
        }
      }
    }
  }
}
 80004fe:	b002      	add	sp, #8
 8000500:	bcf0      	pop	{r4, r5, r6, r7}
 8000502:	4770      	bx	lr
 8000504:	40021000 	.word	0x40021000
 8000508:	40010000 	.word	0x40010000
 800050c:	40010800 	.word	0x40010800
 8000510:	10210000 	.word	0x10210000
 8000514:	10310000 	.word	0x10310000
 8000518:	40010400 	.word	0x40010400

0800051c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800051c:	b912      	cbnz	r2, 8000524 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800051e:	0409      	lsls	r1, r1, #16
 8000520:	6101      	str	r1, [r0, #16]
  }
}
 8000522:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000524:	6101      	str	r1, [r0, #16]
 8000526:	4770      	bx	lr

08000528 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000528:	68c3      	ldr	r3, [r0, #12]
 800052a:	4059      	eors	r1, r3
 800052c:	60c1      	str	r1, [r0, #12]
}
 800052e:	4770      	bx	lr

08000530 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000530:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000532:	4b05      	ldr	r3, [pc, #20]	; (8000548 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	4203      	tst	r3, r0
 8000538:	d100      	bne.n	800053c <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 800053a:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800053c:	4b02      	ldr	r3, [pc, #8]	; (8000548 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800053e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000540:	f001 f8ba 	bl	80016b8 <HAL_GPIO_EXTI_Callback>
}
 8000544:	e7f9      	b.n	800053a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000546:	bf00      	nop
 8000548:	40010400 	.word	0x40010400

0800054c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800054c:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <RCC_Delay+0x24>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4a08      	ldr	r2, [pc, #32]	; (8000574 <RCC_Delay+0x28>)
 8000554:	fba2 2303 	umull	r2, r3, r2, r3
 8000558:	0a5b      	lsrs	r3, r3, #9
 800055a:	fb00 f003 	mul.w	r0, r0, r3
 800055e:	9001      	str	r0, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000560:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000562:	9b01      	ldr	r3, [sp, #4]
 8000564:	1e5a      	subs	r2, r3, #1
 8000566:	9201      	str	r2, [sp, #4]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d1f9      	bne.n	8000560 <RCC_Delay+0x14>
}
 800056c:	b002      	add	sp, #8
 800056e:	4770      	bx	lr
 8000570:	20000008 	.word	0x20000008
 8000574:	10624dd3 	.word	0x10624dd3

08000578 <HAL_RCC_OscConfig>:
{
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800057e:	6803      	ldr	r3, [r0, #0]
 8000580:	f013 0f01 	tst.w	r3, #1
 8000584:	d02c      	beq.n	80005e0 <HAL_RCC_OscConfig+0x68>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000586:	4bab      	ldr	r3, [pc, #684]	; (8000834 <HAL_RCC_OscConfig+0x2bc>)
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	f003 030c 	and.w	r3, r3, #12
 800058e:	2b04      	cmp	r3, #4
 8000590:	d01d      	beq.n	80005ce <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000592:	4ba8      	ldr	r3, [pc, #672]	; (8000834 <HAL_RCC_OscConfig+0x2bc>)
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	f003 030c 	and.w	r3, r3, #12
 800059a:	2b08      	cmp	r3, #8
 800059c:	d012      	beq.n	80005c4 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800059e:	6863      	ldr	r3, [r4, #4]
 80005a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005a4:	d041      	beq.n	800062a <HAL_RCC_OscConfig+0xb2>
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d155      	bne.n	8000656 <HAL_RCC_OscConfig+0xde>
 80005aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80005ae:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	e037      	b.n	8000634 <HAL_RCC_OscConfig+0xbc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005c4:	4b9b      	ldr	r3, [pc, #620]	; (8000834 <HAL_RCC_OscConfig+0x2bc>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80005cc:	d0e7      	beq.n	800059e <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005ce:	4b99      	ldr	r3, [pc, #612]	; (8000834 <HAL_RCC_OscConfig+0x2bc>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80005d6:	d003      	beq.n	80005e0 <HAL_RCC_OscConfig+0x68>
 80005d8:	6863      	ldr	r3, [r4, #4]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	f000 81ae 	beq.w	800093c <HAL_RCC_OscConfig+0x3c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80005e0:	6823      	ldr	r3, [r4, #0]
 80005e2:	f013 0f02 	tst.w	r3, #2
 80005e6:	d076      	beq.n	80006d6 <HAL_RCC_OscConfig+0x15e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80005e8:	4b92      	ldr	r3, [pc, #584]	; (8000834 <HAL_RCC_OscConfig+0x2bc>)
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	f013 0f0c 	tst.w	r3, #12
 80005f0:	d05f      	beq.n	80006b2 <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80005f2:	4b90      	ldr	r3, [pc, #576]	; (8000834 <HAL_RCC_OscConfig+0x2bc>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	f003 030c 	and.w	r3, r3, #12
 80005fa:	2b08      	cmp	r3, #8
 80005fc:	d054      	beq.n	80006a8 <HAL_RCC_OscConfig+0x130>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005fe:	6923      	ldr	r3, [r4, #16]
 8000600:	2b00      	cmp	r3, #0
 8000602:	f000 808a 	beq.w	800071a <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_ENABLE();
 8000606:	4b8c      	ldr	r3, [pc, #560]	; (8000838 <HAL_RCC_OscConfig+0x2c0>)
 8000608:	2201      	movs	r2, #1
 800060a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800060c:	f7ff fde2 	bl	80001d4 <HAL_GetTick>
 8000610:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000612:	4b88      	ldr	r3, [pc, #544]	; (8000834 <HAL_RCC_OscConfig+0x2bc>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f013 0f02 	tst.w	r3, #2
 800061a:	d175      	bne.n	8000708 <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800061c:	f7ff fdda 	bl	80001d4 <HAL_GetTick>
 8000620:	1b40      	subs	r0, r0, r5
 8000622:	2802      	cmp	r0, #2
 8000624:	d9f5      	bls.n	8000612 <HAL_RCC_OscConfig+0x9a>
            return HAL_TIMEOUT;
 8000626:	2003      	movs	r0, #3
 8000628:	e18b      	b.n	8000942 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800062a:	4a82      	ldr	r2, [pc, #520]	; (8000834 <HAL_RCC_OscConfig+0x2bc>)
 800062c:	6813      	ldr	r3, [r2, #0]
 800062e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000632:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000634:	6863      	ldr	r3, [r4, #4]
 8000636:	b343      	cbz	r3, 800068a <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 8000638:	f7ff fdcc 	bl	80001d4 <HAL_GetTick>
 800063c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800063e:	4b7d      	ldr	r3, [pc, #500]	; (8000834 <HAL_RCC_OscConfig+0x2bc>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000646:	d1cb      	bne.n	80005e0 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000648:	f7ff fdc4 	bl	80001d4 <HAL_GetTick>
 800064c:	1b40      	subs	r0, r0, r5
 800064e:	2864      	cmp	r0, #100	; 0x64
 8000650:	d9f5      	bls.n	800063e <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 8000652:	2003      	movs	r0, #3
 8000654:	e175      	b.n	8000942 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000656:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800065a:	d009      	beq.n	8000670 <HAL_RCC_OscConfig+0xf8>
 800065c:	4b75      	ldr	r3, [pc, #468]	; (8000834 <HAL_RCC_OscConfig+0x2bc>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	e7e1      	b.n	8000634 <HAL_RCC_OscConfig+0xbc>
 8000670:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000674:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	e7d4      	b.n	8000634 <HAL_RCC_OscConfig+0xbc>
        tickstart = HAL_GetTick();
 800068a:	f7ff fda3 	bl	80001d4 <HAL_GetTick>
 800068e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000690:	4b68      	ldr	r3, [pc, #416]	; (8000834 <HAL_RCC_OscConfig+0x2bc>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000698:	d0a2      	beq.n	80005e0 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800069a:	f7ff fd9b 	bl	80001d4 <HAL_GetTick>
 800069e:	1b40      	subs	r0, r0, r5
 80006a0:	2864      	cmp	r0, #100	; 0x64
 80006a2:	d9f5      	bls.n	8000690 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 80006a4:	2003      	movs	r0, #3
 80006a6:	e14c      	b.n	8000942 <HAL_RCC_OscConfig+0x3ca>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80006a8:	4b62      	ldr	r3, [pc, #392]	; (8000834 <HAL_RCC_OscConfig+0x2bc>)
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80006b0:	d1a5      	bne.n	80005fe <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006b2:	4b60      	ldr	r3, [pc, #384]	; (8000834 <HAL_RCC_OscConfig+0x2bc>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f013 0f02 	tst.w	r3, #2
 80006ba:	d004      	beq.n	80006c6 <HAL_RCC_OscConfig+0x14e>
 80006bc:	6923      	ldr	r3, [r4, #16]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d001      	beq.n	80006c6 <HAL_RCC_OscConfig+0x14e>
        return HAL_ERROR;
 80006c2:	2001      	movs	r0, #1
 80006c4:	e13d      	b.n	8000942 <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006c6:	4a5b      	ldr	r2, [pc, #364]	; (8000834 <HAL_RCC_OscConfig+0x2bc>)
 80006c8:	6813      	ldr	r3, [r2, #0]
 80006ca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80006ce:	6961      	ldr	r1, [r4, #20]
 80006d0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80006d4:	6013      	str	r3, [r2, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80006d6:	6823      	ldr	r3, [r4, #0]
 80006d8:	f013 0f08 	tst.w	r3, #8
 80006dc:	d032      	beq.n	8000744 <HAL_RCC_OscConfig+0x1cc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006de:	69a3      	ldr	r3, [r4, #24]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d05b      	beq.n	800079c <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_LSI_ENABLE();
 80006e4:	4b55      	ldr	r3, [pc, #340]	; (800083c <HAL_RCC_OscConfig+0x2c4>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006ea:	f7ff fd73 	bl	80001d4 <HAL_GetTick>
 80006ee:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006f0:	4b50      	ldr	r3, [pc, #320]	; (8000834 <HAL_RCC_OscConfig+0x2bc>)
 80006f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006f4:	f013 0f02 	tst.w	r3, #2
 80006f8:	d121      	bne.n	800073e <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006fa:	f7ff fd6b 	bl	80001d4 <HAL_GetTick>
 80006fe:	1b40      	subs	r0, r0, r5
 8000700:	2802      	cmp	r0, #2
 8000702:	d9f5      	bls.n	80006f0 <HAL_RCC_OscConfig+0x178>
          return HAL_TIMEOUT;
 8000704:	2003      	movs	r0, #3
 8000706:	e11c      	b.n	8000942 <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000708:	4a4a      	ldr	r2, [pc, #296]	; (8000834 <HAL_RCC_OscConfig+0x2bc>)
 800070a:	6813      	ldr	r3, [r2, #0]
 800070c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000710:	6961      	ldr	r1, [r4, #20]
 8000712:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	e7dd      	b.n	80006d6 <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 800071a:	4b47      	ldr	r3, [pc, #284]	; (8000838 <HAL_RCC_OscConfig+0x2c0>)
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000720:	f7ff fd58 	bl	80001d4 <HAL_GetTick>
 8000724:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000726:	4b43      	ldr	r3, [pc, #268]	; (8000834 <HAL_RCC_OscConfig+0x2bc>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f013 0f02 	tst.w	r3, #2
 800072e:	d0d2      	beq.n	80006d6 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000730:	f7ff fd50 	bl	80001d4 <HAL_GetTick>
 8000734:	1b40      	subs	r0, r0, r5
 8000736:	2802      	cmp	r0, #2
 8000738:	d9f5      	bls.n	8000726 <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 800073a:	2003      	movs	r0, #3
 800073c:	e101      	b.n	8000942 <HAL_RCC_OscConfig+0x3ca>
      RCC_Delay(1);
 800073e:	2001      	movs	r0, #1
 8000740:	f7ff ff04 	bl	800054c <RCC_Delay>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000744:	6823      	ldr	r3, [r4, #0]
 8000746:	f013 0f04 	tst.w	r3, #4
 800074a:	f000 8097 	beq.w	800087c <HAL_RCC_OscConfig+0x304>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800074e:	4b39      	ldr	r3, [pc, #228]	; (8000834 <HAL_RCC_OscConfig+0x2bc>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000756:	d133      	bne.n	80007c0 <HAL_RCC_OscConfig+0x248>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000758:	4b36      	ldr	r3, [pc, #216]	; (8000834 <HAL_RCC_OscConfig+0x2bc>)
 800075a:	69da      	ldr	r2, [r3, #28]
 800075c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000760:	61da      	str	r2, [r3, #28]
 8000762:	69db      	ldr	r3, [r3, #28]
 8000764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000768:	9301      	str	r3, [sp, #4]
 800076a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800076c:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800076e:	4b34      	ldr	r3, [pc, #208]	; (8000840 <HAL_RCC_OscConfig+0x2c8>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000776:	d025      	beq.n	80007c4 <HAL_RCC_OscConfig+0x24c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000778:	68e3      	ldr	r3, [r4, #12]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d036      	beq.n	80007ec <HAL_RCC_OscConfig+0x274>
 800077e:	2b00      	cmp	r3, #0
 8000780:	d14c      	bne.n	800081c <HAL_RCC_OscConfig+0x2a4>
 8000782:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000786:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800078a:	6a1a      	ldr	r2, [r3, #32]
 800078c:	f022 0201 	bic.w	r2, r2, #1
 8000790:	621a      	str	r2, [r3, #32]
 8000792:	6a1a      	ldr	r2, [r3, #32]
 8000794:	f022 0204 	bic.w	r2, r2, #4
 8000798:	621a      	str	r2, [r3, #32]
 800079a:	e02c      	b.n	80007f6 <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSI_DISABLE();
 800079c:	4b27      	ldr	r3, [pc, #156]	; (800083c <HAL_RCC_OscConfig+0x2c4>)
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80007a2:	f7ff fd17 	bl	80001d4 <HAL_GetTick>
 80007a6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007a8:	4b22      	ldr	r3, [pc, #136]	; (8000834 <HAL_RCC_OscConfig+0x2bc>)
 80007aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ac:	f013 0f02 	tst.w	r3, #2
 80007b0:	d0c8      	beq.n	8000744 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007b2:	f7ff fd0f 	bl	80001d4 <HAL_GetTick>
 80007b6:	1b40      	subs	r0, r0, r5
 80007b8:	2802      	cmp	r0, #2
 80007ba:	d9f5      	bls.n	80007a8 <HAL_RCC_OscConfig+0x230>
          return HAL_TIMEOUT;
 80007bc:	2003      	movs	r0, #3
 80007be:	e0c0      	b.n	8000942 <HAL_RCC_OscConfig+0x3ca>
    FlagStatus       pwrclkchanged = RESET;
 80007c0:	2500      	movs	r5, #0
 80007c2:	e7d4      	b.n	800076e <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80007c4:	4a1e      	ldr	r2, [pc, #120]	; (8000840 <HAL_RCC_OscConfig+0x2c8>)
 80007c6:	6813      	ldr	r3, [r2, #0]
 80007c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007cc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80007ce:	f7ff fd01 	bl	80001d4 <HAL_GetTick>
 80007d2:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007d4:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <HAL_RCC_OscConfig+0x2c8>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80007dc:	d1cc      	bne.n	8000778 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80007de:	f7ff fcf9 	bl	80001d4 <HAL_GetTick>
 80007e2:	1b80      	subs	r0, r0, r6
 80007e4:	2864      	cmp	r0, #100	; 0x64
 80007e6:	d9f5      	bls.n	80007d4 <HAL_RCC_OscConfig+0x25c>
          return HAL_TIMEOUT;
 80007e8:	2003      	movs	r0, #3
 80007ea:	e0aa      	b.n	8000942 <HAL_RCC_OscConfig+0x3ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007ec:	4a11      	ldr	r2, [pc, #68]	; (8000834 <HAL_RCC_OscConfig+0x2bc>)
 80007ee:	6a13      	ldr	r3, [r2, #32]
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80007f6:	68e3      	ldr	r3, [r4, #12]
 80007f8:	b373      	cbz	r3, 8000858 <HAL_RCC_OscConfig+0x2e0>
      tickstart = HAL_GetTick();
 80007fa:	f7ff fceb 	bl	80001d4 <HAL_GetTick>
 80007fe:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <HAL_RCC_OscConfig+0x2bc>)
 8000802:	6a1b      	ldr	r3, [r3, #32]
 8000804:	f013 0f02 	tst.w	r3, #2
 8000808:	d137      	bne.n	800087a <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800080a:	f7ff fce3 	bl	80001d4 <HAL_GetTick>
 800080e:	1b80      	subs	r0, r0, r6
 8000810:	f241 3388 	movw	r3, #5000	; 0x1388
 8000814:	4298      	cmp	r0, r3
 8000816:	d9f3      	bls.n	8000800 <HAL_RCC_OscConfig+0x288>
          return HAL_TIMEOUT;
 8000818:	2003      	movs	r0, #3
 800081a:	e092      	b.n	8000942 <HAL_RCC_OscConfig+0x3ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800081c:	2b05      	cmp	r3, #5
 800081e:	d011      	beq.n	8000844 <HAL_RCC_OscConfig+0x2cc>
 8000820:	4b04      	ldr	r3, [pc, #16]	; (8000834 <HAL_RCC_OscConfig+0x2bc>)
 8000822:	6a1a      	ldr	r2, [r3, #32]
 8000824:	f022 0201 	bic.w	r2, r2, #1
 8000828:	621a      	str	r2, [r3, #32]
 800082a:	6a1a      	ldr	r2, [r3, #32]
 800082c:	f022 0204 	bic.w	r2, r2, #4
 8000830:	621a      	str	r2, [r3, #32]
 8000832:	e7e0      	b.n	80007f6 <HAL_RCC_OscConfig+0x27e>
 8000834:	40021000 	.word	0x40021000
 8000838:	42420000 	.word	0x42420000
 800083c:	42420480 	.word	0x42420480
 8000840:	40007000 	.word	0x40007000
 8000844:	4b41      	ldr	r3, [pc, #260]	; (800094c <HAL_RCC_OscConfig+0x3d4>)
 8000846:	6a1a      	ldr	r2, [r3, #32]
 8000848:	f042 0204 	orr.w	r2, r2, #4
 800084c:	621a      	str	r2, [r3, #32]
 800084e:	6a1a      	ldr	r2, [r3, #32]
 8000850:	f042 0201 	orr.w	r2, r2, #1
 8000854:	621a      	str	r2, [r3, #32]
 8000856:	e7ce      	b.n	80007f6 <HAL_RCC_OscConfig+0x27e>
      tickstart = HAL_GetTick();
 8000858:	f7ff fcbc 	bl	80001d4 <HAL_GetTick>
 800085c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800085e:	4b3b      	ldr	r3, [pc, #236]	; (800094c <HAL_RCC_OscConfig+0x3d4>)
 8000860:	6a1b      	ldr	r3, [r3, #32]
 8000862:	f013 0f02 	tst.w	r3, #2
 8000866:	d008      	beq.n	800087a <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000868:	f7ff fcb4 	bl	80001d4 <HAL_GetTick>
 800086c:	1b80      	subs	r0, r0, r6
 800086e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000872:	4298      	cmp	r0, r3
 8000874:	d9f3      	bls.n	800085e <HAL_RCC_OscConfig+0x2e6>
          return HAL_TIMEOUT;
 8000876:	2003      	movs	r0, #3
 8000878:	e063      	b.n	8000942 <HAL_RCC_OscConfig+0x3ca>
    if(pwrclkchanged == SET)
 800087a:	b9e5      	cbnz	r5, 80008b6 <HAL_RCC_OscConfig+0x33e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800087c:	69e3      	ldr	r3, [r4, #28]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d05e      	beq.n	8000940 <HAL_RCC_OscConfig+0x3c8>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000882:	4a32      	ldr	r2, [pc, #200]	; (800094c <HAL_RCC_OscConfig+0x3d4>)
 8000884:	6852      	ldr	r2, [r2, #4]
 8000886:	f002 020c 	and.w	r2, r2, #12
 800088a:	2a08      	cmp	r2, #8
 800088c:	d05b      	beq.n	8000946 <HAL_RCC_OscConfig+0x3ce>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800088e:	2b02      	cmp	r3, #2
 8000890:	d017      	beq.n	80008c2 <HAL_RCC_OscConfig+0x34a>
        __HAL_RCC_PLL_DISABLE();
 8000892:	4b2f      	ldr	r3, [pc, #188]	; (8000950 <HAL_RCC_OscConfig+0x3d8>)
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000898:	f7ff fc9c 	bl	80001d4 <HAL_GetTick>
 800089c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800089e:	4b2b      	ldr	r3, [pc, #172]	; (800094c <HAL_RCC_OscConfig+0x3d4>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80008a6:	d047      	beq.n	8000938 <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008a8:	f7ff fc94 	bl	80001d4 <HAL_GetTick>
 80008ac:	1b00      	subs	r0, r0, r4
 80008ae:	2802      	cmp	r0, #2
 80008b0:	d9f5      	bls.n	800089e <HAL_RCC_OscConfig+0x326>
            return HAL_TIMEOUT;
 80008b2:	2003      	movs	r0, #3
 80008b4:	e045      	b.n	8000942 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 80008b6:	4a25      	ldr	r2, [pc, #148]	; (800094c <HAL_RCC_OscConfig+0x3d4>)
 80008b8:	69d3      	ldr	r3, [r2, #28]
 80008ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80008be:	61d3      	str	r3, [r2, #28]
 80008c0:	e7dc      	b.n	800087c <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_DISABLE();
 80008c2:	4b23      	ldr	r3, [pc, #140]	; (8000950 <HAL_RCC_OscConfig+0x3d8>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008c8:	f7ff fc84 	bl	80001d4 <HAL_GetTick>
 80008cc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008ce:	4b1f      	ldr	r3, [pc, #124]	; (800094c <HAL_RCC_OscConfig+0x3d4>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80008d6:	d006      	beq.n	80008e6 <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008d8:	f7ff fc7c 	bl	80001d4 <HAL_GetTick>
 80008dc:	1b40      	subs	r0, r0, r5
 80008de:	2802      	cmp	r0, #2
 80008e0:	d9f5      	bls.n	80008ce <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 80008e2:	2003      	movs	r0, #3
 80008e4:	e02d      	b.n	8000942 <HAL_RCC_OscConfig+0x3ca>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80008e6:	6a23      	ldr	r3, [r4, #32]
 80008e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008ec:	d01a      	beq.n	8000924 <HAL_RCC_OscConfig+0x3ac>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80008ee:	4917      	ldr	r1, [pc, #92]	; (800094c <HAL_RCC_OscConfig+0x3d4>)
 80008f0:	684b      	ldr	r3, [r1, #4]
 80008f2:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80008f6:	6a22      	ldr	r2, [r4, #32]
 80008f8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80008fa:	4302      	orrs	r2, r0
 80008fc:	4313      	orrs	r3, r2
 80008fe:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <HAL_RCC_OscConfig+0x3d8>)
 8000902:	2201      	movs	r2, #1
 8000904:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000906:	f7ff fc65 	bl	80001d4 <HAL_GetTick>
 800090a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <HAL_RCC_OscConfig+0x3d4>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000914:	d10e      	bne.n	8000934 <HAL_RCC_OscConfig+0x3bc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000916:	f7ff fc5d 	bl	80001d4 <HAL_GetTick>
 800091a:	1b00      	subs	r0, r0, r4
 800091c:	2802      	cmp	r0, #2
 800091e:	d9f5      	bls.n	800090c <HAL_RCC_OscConfig+0x394>
            return HAL_TIMEOUT;
 8000920:	2003      	movs	r0, #3
 8000922:	e00e      	b.n	8000942 <HAL_RCC_OscConfig+0x3ca>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000924:	4a09      	ldr	r2, [pc, #36]	; (800094c <HAL_RCC_OscConfig+0x3d4>)
 8000926:	6853      	ldr	r3, [r2, #4]
 8000928:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800092c:	68a1      	ldr	r1, [r4, #8]
 800092e:	430b      	orrs	r3, r1
 8000930:	6053      	str	r3, [r2, #4]
 8000932:	e7dc      	b.n	80008ee <HAL_RCC_OscConfig+0x376>
  return HAL_OK;
 8000934:	2000      	movs	r0, #0
 8000936:	e004      	b.n	8000942 <HAL_RCC_OscConfig+0x3ca>
 8000938:	2000      	movs	r0, #0
 800093a:	e002      	b.n	8000942 <HAL_RCC_OscConfig+0x3ca>
        return HAL_ERROR;
 800093c:	2001      	movs	r0, #1
 800093e:	e000      	b.n	8000942 <HAL_RCC_OscConfig+0x3ca>
  return HAL_OK;
 8000940:	2000      	movs	r0, #0
}
 8000942:	b002      	add	sp, #8
 8000944:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000946:	2001      	movs	r0, #1
 8000948:	e7fb      	b.n	8000942 <HAL_RCC_OscConfig+0x3ca>
 800094a:	bf00      	nop
 800094c:	40021000 	.word	0x40021000
 8000950:	42420060 	.word	0x42420060

08000954 <HAL_RCC_GetSysClockFreq>:
{
 8000954:	b410      	push	{r4}
 8000956:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000958:	4c16      	ldr	r4, [pc, #88]	; (80009b4 <HAL_RCC_GetSysClockFreq+0x60>)
 800095a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800095e:	f10d 0c18 	add.w	ip, sp, #24
 8000962:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000966:	8a23      	ldrh	r3, [r4, #16]
 8000968:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <HAL_RCC_GetSysClockFreq+0x64>)
 800096e:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000970:	f003 020c 	and.w	r2, r3, #12
 8000974:	2a08      	cmp	r2, #8
 8000976:	d11a      	bne.n	80009ae <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000978:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800097c:	4462      	add	r2, ip
 800097e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000982:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000986:	d105      	bne.n	8000994 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000988:	480c      	ldr	r0, [pc, #48]	; (80009bc <HAL_RCC_GetSysClockFreq+0x68>)
 800098a:	fb00 f002 	mul.w	r0, r0, r2
}
 800098e:	b007      	add	sp, #28
 8000990:	bc10      	pop	{r4}
 8000992:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <HAL_RCC_GetSysClockFreq+0x64>)
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800099c:	4463      	add	r3, ip
 800099e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80009a2:	4807      	ldr	r0, [pc, #28]	; (80009c0 <HAL_RCC_GetSysClockFreq+0x6c>)
 80009a4:	fb00 f002 	mul.w	r0, r0, r2
 80009a8:	fbb0 f0f3 	udiv	r0, r0, r3
 80009ac:	e7ef      	b.n	800098e <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 80009ae:	4804      	ldr	r0, [pc, #16]	; (80009c0 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80009b0:	e7ed      	b.n	800098e <HAL_RCC_GetSysClockFreq+0x3a>
 80009b2:	bf00      	nop
 80009b4:	080019e0 	.word	0x080019e0
 80009b8:	40021000 	.word	0x40021000
 80009bc:	003d0900 	.word	0x003d0900
 80009c0:	007a1200 	.word	0x007a1200

080009c4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009c4:	4b62      	ldr	r3, [pc, #392]	; (8000b50 <HAL_RCC_ClockConfig+0x18c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f003 0307 	and.w	r3, r3, #7
 80009cc:	428b      	cmp	r3, r1
 80009ce:	d20c      	bcs.n	80009ea <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009d0:	4a5f      	ldr	r2, [pc, #380]	; (8000b50 <HAL_RCC_ClockConfig+0x18c>)
 80009d2:	6813      	ldr	r3, [r2, #0]
 80009d4:	f023 0307 	bic.w	r3, r3, #7
 80009d8:	430b      	orrs	r3, r1
 80009da:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80009dc:	6813      	ldr	r3, [r2, #0]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	428b      	cmp	r3, r1
 80009e4:	d001      	beq.n	80009ea <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 80009e6:	2001      	movs	r0, #1
}
 80009e8:	4770      	bx	lr
{
 80009ea:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80009ec:	6803      	ldr	r3, [r0, #0]
 80009ee:	f013 0f02 	tst.w	r3, #2
 80009f2:	d017      	beq.n	8000a24 <HAL_RCC_ClockConfig+0x60>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80009f4:	f013 0f04 	tst.w	r3, #4
 80009f8:	d004      	beq.n	8000a04 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80009fa:	4a56      	ldr	r2, [pc, #344]	; (8000b54 <HAL_RCC_ClockConfig+0x190>)
 80009fc:	6853      	ldr	r3, [r2, #4]
 80009fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000a02:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a04:	6803      	ldr	r3, [r0, #0]
 8000a06:	f013 0f08 	tst.w	r3, #8
 8000a0a:	d004      	beq.n	8000a16 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000a0c:	4a51      	ldr	r2, [pc, #324]	; (8000b54 <HAL_RCC_ClockConfig+0x190>)
 8000a0e:	6853      	ldr	r3, [r2, #4]
 8000a10:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000a14:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a16:	4a4f      	ldr	r2, [pc, #316]	; (8000b54 <HAL_RCC_ClockConfig+0x190>)
 8000a18:	6853      	ldr	r3, [r2, #4]
 8000a1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a1e:	6884      	ldr	r4, [r0, #8]
 8000a20:	4323      	orrs	r3, r4
 8000a22:	6053      	str	r3, [r2, #4]
 8000a24:	460d      	mov	r5, r1
 8000a26:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a28:	6803      	ldr	r3, [r0, #0]
 8000a2a:	f013 0f01 	tst.w	r3, #1
 8000a2e:	d052      	beq.n	8000ad6 <HAL_RCC_ClockConfig+0x112>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a30:	6843      	ldr	r3, [r0, #4]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d023      	beq.n	8000a7e <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d028      	beq.n	8000a8c <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a3a:	4a46      	ldr	r2, [pc, #280]	; (8000b54 <HAL_RCC_ClockConfig+0x190>)
 8000a3c:	6812      	ldr	r2, [r2, #0]
 8000a3e:	f012 0f02 	tst.w	r2, #2
 8000a42:	f000 8082 	beq.w	8000b4a <HAL_RCC_ClockConfig+0x186>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a46:	4943      	ldr	r1, [pc, #268]	; (8000b54 <HAL_RCC_ClockConfig+0x190>)
 8000a48:	684a      	ldr	r2, [r1, #4]
 8000a4a:	f022 0203 	bic.w	r2, r2, #3
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8000a52:	f7ff fbbf 	bl	80001d4 <HAL_GetTick>
 8000a56:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a58:	6863      	ldr	r3, [r4, #4]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d01d      	beq.n	8000a9a <HAL_RCC_ClockConfig+0xd6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	d02a      	beq.n	8000ab8 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a62:	4b3c      	ldr	r3, [pc, #240]	; (8000b54 <HAL_RCC_ClockConfig+0x190>)
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f013 0f0c 	tst.w	r3, #12
 8000a6a:	d034      	beq.n	8000ad6 <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a6c:	f7ff fbb2 	bl	80001d4 <HAL_GetTick>
 8000a70:	1b80      	subs	r0, r0, r6
 8000a72:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a76:	4298      	cmp	r0, r3
 8000a78:	d9f3      	bls.n	8000a62 <HAL_RCC_ClockConfig+0x9e>
          return HAL_TIMEOUT;
 8000a7a:	2003      	movs	r0, #3
 8000a7c:	e064      	b.n	8000b48 <HAL_RCC_ClockConfig+0x184>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a7e:	4a35      	ldr	r2, [pc, #212]	; (8000b54 <HAL_RCC_ClockConfig+0x190>)
 8000a80:	6812      	ldr	r2, [r2, #0]
 8000a82:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000a86:	d1de      	bne.n	8000a46 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8000a88:	2001      	movs	r0, #1
 8000a8a:	e05d      	b.n	8000b48 <HAL_RCC_ClockConfig+0x184>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a8c:	4a31      	ldr	r2, [pc, #196]	; (8000b54 <HAL_RCC_ClockConfig+0x190>)
 8000a8e:	6812      	ldr	r2, [r2, #0]
 8000a90:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000a94:	d1d7      	bne.n	8000a46 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8000a96:	2001      	movs	r0, #1
 8000a98:	e056      	b.n	8000b48 <HAL_RCC_ClockConfig+0x184>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a9a:	4b2e      	ldr	r3, [pc, #184]	; (8000b54 <HAL_RCC_ClockConfig+0x190>)
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f003 030c 	and.w	r3, r3, #12
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	d017      	beq.n	8000ad6 <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000aa6:	f7ff fb95 	bl	80001d4 <HAL_GetTick>
 8000aaa:	1b80      	subs	r0, r0, r6
 8000aac:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ab0:	4298      	cmp	r0, r3
 8000ab2:	d9f2      	bls.n	8000a9a <HAL_RCC_ClockConfig+0xd6>
          return HAL_TIMEOUT;
 8000ab4:	2003      	movs	r0, #3
 8000ab6:	e047      	b.n	8000b48 <HAL_RCC_ClockConfig+0x184>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ab8:	4b26      	ldr	r3, [pc, #152]	; (8000b54 <HAL_RCC_ClockConfig+0x190>)
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f003 030c 	and.w	r3, r3, #12
 8000ac0:	2b08      	cmp	r3, #8
 8000ac2:	d008      	beq.n	8000ad6 <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ac4:	f7ff fb86 	bl	80001d4 <HAL_GetTick>
 8000ac8:	1b80      	subs	r0, r0, r6
 8000aca:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ace:	4298      	cmp	r0, r3
 8000ad0:	d9f2      	bls.n	8000ab8 <HAL_RCC_ClockConfig+0xf4>
          return HAL_TIMEOUT;
 8000ad2:	2003      	movs	r0, #3
 8000ad4:	e038      	b.n	8000b48 <HAL_RCC_ClockConfig+0x184>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	; (8000b50 <HAL_RCC_ClockConfig+0x18c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	42ab      	cmp	r3, r5
 8000ae0:	d90c      	bls.n	8000afc <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ae2:	4a1b      	ldr	r2, [pc, #108]	; (8000b50 <HAL_RCC_ClockConfig+0x18c>)
 8000ae4:	6813      	ldr	r3, [r2, #0]
 8000ae6:	f023 0307 	bic.w	r3, r3, #7
 8000aea:	432b      	orrs	r3, r5
 8000aec:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000aee:	6813      	ldr	r3, [r2, #0]
 8000af0:	f003 0307 	and.w	r3, r3, #7
 8000af4:	42ab      	cmp	r3, r5
 8000af6:	d001      	beq.n	8000afc <HAL_RCC_ClockConfig+0x138>
      return HAL_ERROR;
 8000af8:	2001      	movs	r0, #1
 8000afa:	e025      	b.n	8000b48 <HAL_RCC_ClockConfig+0x184>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000afc:	6823      	ldr	r3, [r4, #0]
 8000afe:	f013 0f04 	tst.w	r3, #4
 8000b02:	d006      	beq.n	8000b12 <HAL_RCC_ClockConfig+0x14e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b04:	4a13      	ldr	r2, [pc, #76]	; (8000b54 <HAL_RCC_ClockConfig+0x190>)
 8000b06:	6853      	ldr	r3, [r2, #4]
 8000b08:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b0c:	68e1      	ldr	r1, [r4, #12]
 8000b0e:	430b      	orrs	r3, r1
 8000b10:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b12:	6823      	ldr	r3, [r4, #0]
 8000b14:	f013 0f08 	tst.w	r3, #8
 8000b18:	d007      	beq.n	8000b2a <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000b1a:	4a0e      	ldr	r2, [pc, #56]	; (8000b54 <HAL_RCC_ClockConfig+0x190>)
 8000b1c:	6853      	ldr	r3, [r2, #4]
 8000b1e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000b22:	6921      	ldr	r1, [r4, #16]
 8000b24:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000b28:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000b2a:	f7ff ff13 	bl	8000954 <HAL_RCC_GetSysClockFreq>
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <HAL_RCC_ClockConfig+0x190>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000b36:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <HAL_RCC_ClockConfig+0x194>)
 8000b38:	5cd3      	ldrb	r3, [r2, r3]
 8000b3a:	40d8      	lsrs	r0, r3
 8000b3c:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <HAL_RCC_ClockConfig+0x198>)
 8000b3e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000b40:	2000      	movs	r0, #0
 8000b42:	f7ff fb03 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000b46:	2000      	movs	r0, #0
}
 8000b48:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	e7fc      	b.n	8000b48 <HAL_RCC_ClockConfig+0x184>
 8000b4e:	bf00      	nop
 8000b50:	40022000 	.word	0x40022000
 8000b54:	40021000 	.word	0x40021000
 8000b58:	080019f4 	.word	0x080019f4
 8000b5c:	20000008 	.word	0x20000008

08000b60 <HAL_RCC_GetHCLKFreq>:
}
 8000b60:	4b01      	ldr	r3, [pc, #4]	; (8000b68 <HAL_RCC_GetHCLKFreq+0x8>)
 8000b62:	6818      	ldr	r0, [r3, #0]
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	20000008 	.word	0x20000008

08000b6c <HAL_RCC_GetPCLK1Freq>:
{
 8000b6c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000b6e:	f7ff fff7 	bl	8000b60 <HAL_RCC_GetHCLKFreq>
 8000b72:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000b7a:	4a03      	ldr	r2, [pc, #12]	; (8000b88 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000b7c:	5cd3      	ldrb	r3, [r2, r3]
}    
 8000b7e:	40d8      	lsrs	r0, r3
 8000b80:	bd08      	pop	{r3, pc}
 8000b82:	bf00      	nop
 8000b84:	40021000 	.word	0x40021000
 8000b88:	08001a04 	.word	0x08001a04

08000b8c <HAL_RCC_GetPCLK2Freq>:
{
 8000b8c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000b8e:	f7ff ffe7 	bl	8000b60 <HAL_RCC_GetHCLKFreq>
 8000b92:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000b9a:	4a03      	ldr	r2, [pc, #12]	; (8000ba8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000b9c:	5cd3      	ldrb	r3, [r2, r3]
} 
 8000b9e:	40d8      	lsrs	r0, r3
 8000ba0:	bd08      	pop	{r3, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	08001a04 	.word	0x08001a04

08000bac <HAL_SPI_ErrorCallback>:
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
  */
}
 8000bac:	4770      	bx	lr
	...

08000bb0 <HAL_SPI_IRQHandler>:
{
 8000bb0:	b510      	push	{r4, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8000bb6:	6802      	ldr	r2, [r0, #0]
 8000bb8:	6850      	ldr	r0, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8000bba:	6893      	ldr	r3, [r2, #8]
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8000bbc:	f003 0141 	and.w	r1, r3, #65	; 0x41
 8000bc0:	2901      	cmp	r1, #1
 8000bc2:	d00a      	beq.n	8000bda <HAL_SPI_IRQHandler+0x2a>
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8000bc4:	f013 0f02 	tst.w	r3, #2
 8000bc8:	d00e      	beq.n	8000be8 <HAL_SPI_IRQHandler+0x38>
 8000bca:	f010 0f80 	tst.w	r0, #128	; 0x80
 8000bce:	d00b      	beq.n	8000be8 <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 8000bd0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	4798      	blx	r3
}
 8000bd6:	b004      	add	sp, #16
 8000bd8:	bd10      	pop	{r4, pc}
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8000bda:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000bde:	d0f1      	beq.n	8000bc4 <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 8000be0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000be2:	4620      	mov	r0, r4
 8000be4:	4798      	blx	r3
    return;
 8000be6:	e7f6      	b.n	8000bd6 <HAL_SPI_IRQHandler+0x26>
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8000be8:	f013 0f60 	tst.w	r3, #96	; 0x60
 8000bec:	d0f3      	beq.n	8000bd6 <HAL_SPI_IRQHandler+0x26>
 8000bee:	f010 0f20 	tst.w	r0, #32
 8000bf2:	d0f0      	beq.n	8000bd6 <HAL_SPI_IRQHandler+0x26>
    if((itflag & SPI_FLAG_OVR) != RESET)
 8000bf4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000bf8:	d00f      	beq.n	8000c1a <HAL_SPI_IRQHandler+0x6a>
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 8000bfa:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 8000bfe:	b2c9      	uxtb	r1, r1
 8000c00:	2903      	cmp	r1, #3
 8000c02:	d03d      	beq.n	8000c80 <HAL_SPI_IRQHandler+0xd0>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8000c04:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8000c06:	f041 0104 	orr.w	r1, r1, #4
 8000c0a:	6561      	str	r1, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	9101      	str	r1, [sp, #4]
 8000c10:	68d1      	ldr	r1, [r2, #12]
 8000c12:	9101      	str	r1, [sp, #4]
 8000c14:	6891      	ldr	r1, [r2, #8]
 8000c16:	9101      	str	r1, [sp, #4]
 8000c18:	9901      	ldr	r1, [sp, #4]
    if((itflag & SPI_FLAG_MODF) != RESET)
 8000c1a:	f013 0f20 	tst.w	r3, #32
 8000c1e:	d00c      	beq.n	8000c3a <HAL_SPI_IRQHandler+0x8a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8000c20:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8000c28:	2300      	movs	r3, #0
 8000c2a:	9303      	str	r3, [sp, #12]
 8000c2c:	6893      	ldr	r3, [r2, #8]
 8000c2e:	9303      	str	r3, [sp, #12]
 8000c30:	6813      	ldr	r3, [r2, #0]
 8000c32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c36:	6013      	str	r3, [r2, #0]
 8000c38:	9b03      	ldr	r3, [sp, #12]
    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000c3a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d0ca      	beq.n	8000bd6 <HAL_SPI_IRQHandler+0x26>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8000c40:	6822      	ldr	r2, [r4, #0]
 8000c42:	6853      	ldr	r3, [r2, #4]
 8000c44:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8000c48:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8000c50:	f010 0f03 	tst.w	r0, #3
 8000c54:	d01c      	beq.n	8000c90 <HAL_SPI_IRQHandler+0xe0>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8000c56:	6822      	ldr	r2, [r4, #0]
 8000c58:	6853      	ldr	r3, [r2, #4]
 8000c5a:	f023 0303 	bic.w	r3, r3, #3
 8000c5e:	6053      	str	r3, [r2, #4]
        if(hspi->hdmarx != NULL)
 8000c60:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000c62:	b123      	cbz	r3, 8000c6e <HAL_SPI_IRQHandler+0xbe>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8000c64:	4a0c      	ldr	r2, [pc, #48]	; (8000c98 <HAL_SPI_IRQHandler+0xe8>)
 8000c66:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8000c68:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000c6a:	f7ff fb21 	bl	80002b0 <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 8000c6e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d0b0      	beq.n	8000bd6 <HAL_SPI_IRQHandler+0x26>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8000c74:	4a08      	ldr	r2, [pc, #32]	; (8000c98 <HAL_SPI_IRQHandler+0xe8>)
 8000c76:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8000c78:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8000c7a:	f7ff fb19 	bl	80002b0 <HAL_DMA_Abort_IT>
 8000c7e:	e7aa      	b.n	8000bd6 <HAL_SPI_IRQHandler+0x26>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000c80:	2300      	movs	r3, #0
 8000c82:	9302      	str	r3, [sp, #8]
 8000c84:	68d3      	ldr	r3, [r2, #12]
 8000c86:	9302      	str	r3, [sp, #8]
 8000c88:	6893      	ldr	r3, [r2, #8]
 8000c8a:	9302      	str	r3, [sp, #8]
 8000c8c:	9b02      	ldr	r3, [sp, #8]
        return;
 8000c8e:	e7a2      	b.n	8000bd6 <HAL_SPI_IRQHandler+0x26>
        HAL_SPI_ErrorCallback(hspi);
 8000c90:	4620      	mov	r0, r4
 8000c92:	f7ff ff8b 	bl	8000bac <HAL_SPI_ErrorCallback>
 8000c96:	e79e      	b.n	8000bd6 <HAL_SPI_IRQHandler+0x26>
 8000c98:	08000c9d 	.word	0x08000c9d

08000c9c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8000c9c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000c9e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8000ca4:	86c3      	strh	r3, [r0, #54]	; 0x36

  HAL_SPI_ErrorCallback(hspi);
 8000ca6:	f7ff ff81 	bl	8000bac <HAL_SPI_ErrorCallback>
}
 8000caa:	bd08      	pop	{r3, pc}

08000cac <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8000cac:	2800      	cmp	r0, #0
 8000cae:	d03c      	beq.n	8000d2a <HAL_SPI_Init+0x7e>
{
 8000cb0:	b510      	push	{r4, lr}
 8000cb2:	4604      	mov	r4, r0
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8000cb8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d031      	beq.n	8000d24 <HAL_SPI_Init+0x78>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000cc6:	6822      	ldr	r2, [r4, #0]
 8000cc8:	6813      	ldr	r3, [r2, #0]
 8000cca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000cce:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000cd0:	6863      	ldr	r3, [r4, #4]
 8000cd2:	68a2      	ldr	r2, [r4, #8]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	68e2      	ldr	r2, [r4, #12]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	6922      	ldr	r2, [r4, #16]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	6962      	ldr	r2, [r4, #20]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	69a2      	ldr	r2, [r4, #24]
 8000ce4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	69e2      	ldr	r2, [r4, #28]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	6a22      	ldr	r2, [r4, #32]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000cf4:	6822      	ldr	r2, [r4, #0]
 8000cf6:	430b      	orrs	r3, r1
 8000cf8:	6013      	str	r3, [r2, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000cfa:	8b63      	ldrh	r3, [r4, #26]
 8000cfc:	f003 0304 	and.w	r3, r3, #4
 8000d00:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000d02:	6822      	ldr	r2, [r4, #0]
 8000d04:	430b      	orrs	r3, r1
 8000d06:	6053      	str	r3, [r2, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000d08:	6823      	ldr	r3, [r4, #0]
 8000d0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000d0c:	611a      	str	r2, [r3, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000d0e:	6822      	ldr	r2, [r4, #0]
 8000d10:	69d3      	ldr	r3, [r2, #28]
 8000d12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d16:	61d3      	str	r3, [r2, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000d18:	2000      	movs	r0, #0
 8000d1a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
}
 8000d22:	bd10      	pop	{r4, pc}
    HAL_SPI_MspInit(hspi);
 8000d24:	f000 fd28 	bl	8001778 <HAL_SPI_MspInit>
 8000d28:	e7ca      	b.n	8000cc0 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8000d2a:	2001      	movs	r0, #1
}
 8000d2c:	4770      	bx	lr

08000d2e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8000d2e:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8000d30:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000d32:	6a04      	ldr	r4, [r0, #32]
 8000d34:	f024 0401 	bic.w	r4, r4, #1
 8000d38:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000d3a:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000d3c:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000d40:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000d44:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8000d48:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000d4a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000d4c:	6203      	str	r3, [r0, #32]
}
 8000d4e:	bc10      	pop	{r4}
 8000d50:	4770      	bx	lr

08000d52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8000d52:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000d54:	6a03      	ldr	r3, [r0, #32]
 8000d56:	f023 0310 	bic.w	r3, r3, #16
 8000d5a:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000d5c:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8000d5e:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000d60:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000d64:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000d68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000d6c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8000d70:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000d72:	6203      	str	r3, [r0, #32]
}
 8000d74:	bc10      	pop	{r4}
 8000d76:	4770      	bx	lr

08000d78 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000d78:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000d7e:	f041 0107 	orr.w	r1, r1, #7
 8000d82:	4319      	orrs	r1, r3
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8000d84:	6081      	str	r1, [r0, #8]
}
 8000d86:	4770      	bx	lr

08000d88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8000d88:	b410      	push	{r4}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8000d8a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000d8c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000d90:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8000d94:	430b      	orrs	r3, r1
 8000d96:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000d98:	6083      	str	r3, [r0, #8]
}
 8000d9a:	bc10      	pop	{r4}
 8000d9c:	4770      	bx	lr

08000d9e <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000d9e:	6802      	ldr	r2, [r0, #0]
 8000da0:	68d3      	ldr	r3, [r2, #12]
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8000da8:	6802      	ldr	r2, [r0, #0]
 8000daa:	6813      	ldr	r3, [r2, #0]
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6013      	str	r3, [r2, #0]
}
 8000db2:	2000      	movs	r0, #0
 8000db4:	4770      	bx	lr

08000db6 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8000db6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d07d      	beq.n	8000eba <HAL_TIM_ConfigClockSource+0x104>
{
 8000dbe:	b510      	push	{r4, lr}
 8000dc0:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8000dce:	6802      	ldr	r2, [r0, #0]
 8000dd0:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000dd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000dd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000dda:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8000ddc:	680b      	ldr	r3, [r1, #0]
 8000dde:	2b40      	cmp	r3, #64	; 0x40
 8000de0:	d057      	beq.n	8000e92 <HAL_TIM_ConfigClockSource+0xdc>
 8000de2:	d910      	bls.n	8000e06 <HAL_TIM_ConfigClockSource+0x50>
 8000de4:	2b70      	cmp	r3, #112	; 0x70
 8000de6:	d03e      	beq.n	8000e66 <HAL_TIM_ConfigClockSource+0xb0>
 8000de8:	d81f      	bhi.n	8000e2a <HAL_TIM_ConfigClockSource+0x74>
 8000dea:	2b50      	cmp	r3, #80	; 0x50
 8000dec:	d047      	beq.n	8000e7e <HAL_TIM_ConfigClockSource+0xc8>
 8000dee:	2b60      	cmp	r3, #96	; 0x60
 8000df0:	d132      	bne.n	8000e58 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000df2:	68ca      	ldr	r2, [r1, #12]
 8000df4:	6849      	ldr	r1, [r1, #4]
 8000df6:	6800      	ldr	r0, [r0, #0]
 8000df8:	f7ff ffab 	bl	8000d52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8000dfc:	2160      	movs	r1, #96	; 0x60
 8000dfe:	6820      	ldr	r0, [r4, #0]
 8000e00:	f7ff ffba 	bl	8000d78 <TIM_ITRx_SetConfig>
    break;
 8000e04:	e028      	b.n	8000e58 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8000e06:	2b10      	cmp	r3, #16
 8000e08:	d04d      	beq.n	8000ea6 <HAL_TIM_ConfigClockSource+0xf0>
 8000e0a:	d908      	bls.n	8000e1e <HAL_TIM_ConfigClockSource+0x68>
 8000e0c:	2b20      	cmp	r3, #32
 8000e0e:	d04f      	beq.n	8000eb0 <HAL_TIM_ConfigClockSource+0xfa>
 8000e10:	2b30      	cmp	r3, #48	; 0x30
 8000e12:	d121      	bne.n	8000e58 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8000e14:	2130      	movs	r1, #48	; 0x30
 8000e16:	6800      	ldr	r0, [r0, #0]
 8000e18:	f7ff ffae 	bl	8000d78 <TIM_ITRx_SetConfig>
    break;
 8000e1c:	e01c      	b.n	8000e58 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8000e1e:	b9db      	cbnz	r3, 8000e58 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8000e20:	2100      	movs	r1, #0
 8000e22:	6800      	ldr	r0, [r0, #0]
 8000e24:	f7ff ffa8 	bl	8000d78 <TIM_ITRx_SetConfig>
    break;
 8000e28:	e016      	b.n	8000e58 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8000e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e2e:	d00e      	beq.n	8000e4e <HAL_TIM_ConfigClockSource+0x98>
 8000e30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e34:	d110      	bne.n	8000e58 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ETR_SetConfig(htim->Instance,
 8000e36:	68cb      	ldr	r3, [r1, #12]
 8000e38:	684a      	ldr	r2, [r1, #4]
 8000e3a:	6889      	ldr	r1, [r1, #8]
 8000e3c:	6800      	ldr	r0, [r0, #0]
 8000e3e:	f7ff ffa3 	bl	8000d88 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000e42:	6822      	ldr	r2, [r4, #0]
 8000e44:	6893      	ldr	r3, [r2, #8]
 8000e46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e4a:	6093      	str	r3, [r2, #8]
    break;
 8000e4c:	e004      	b.n	8000e58 <HAL_TIM_ConfigClockSource+0xa2>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000e4e:	6802      	ldr	r2, [r0, #0]
 8000e50:	6893      	ldr	r3, [r2, #8]
 8000e52:	f023 0307 	bic.w	r3, r3, #7
 8000e56:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8000e64:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8000e66:	68cb      	ldr	r3, [r1, #12]
 8000e68:	684a      	ldr	r2, [r1, #4]
 8000e6a:	6889      	ldr	r1, [r1, #8]
 8000e6c:	6800      	ldr	r0, [r0, #0]
 8000e6e:	f7ff ff8b 	bl	8000d88 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8000e72:	6822      	ldr	r2, [r4, #0]
 8000e74:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000e76:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8000e7a:	6093      	str	r3, [r2, #8]
    break;
 8000e7c:	e7ec      	b.n	8000e58 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000e7e:	68ca      	ldr	r2, [r1, #12]
 8000e80:	6849      	ldr	r1, [r1, #4]
 8000e82:	6800      	ldr	r0, [r0, #0]
 8000e84:	f7ff ff53 	bl	8000d2e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8000e88:	2150      	movs	r1, #80	; 0x50
 8000e8a:	6820      	ldr	r0, [r4, #0]
 8000e8c:	f7ff ff74 	bl	8000d78 <TIM_ITRx_SetConfig>
    break;
 8000e90:	e7e2      	b.n	8000e58 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000e92:	68ca      	ldr	r2, [r1, #12]
 8000e94:	6849      	ldr	r1, [r1, #4]
 8000e96:	6800      	ldr	r0, [r0, #0]
 8000e98:	f7ff ff49 	bl	8000d2e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8000e9c:	2140      	movs	r1, #64	; 0x40
 8000e9e:	6820      	ldr	r0, [r4, #0]
 8000ea0:	f7ff ff6a 	bl	8000d78 <TIM_ITRx_SetConfig>
    break;
 8000ea4:	e7d8      	b.n	8000e58 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8000ea6:	2110      	movs	r1, #16
 8000ea8:	6800      	ldr	r0, [r0, #0]
 8000eaa:	f7ff ff65 	bl	8000d78 <TIM_ITRx_SetConfig>
    break;
 8000eae:	e7d3      	b.n	8000e58 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8000eb0:	2120      	movs	r1, #32
 8000eb2:	6800      	ldr	r0, [r0, #0]
 8000eb4:	f7ff ff60 	bl	8000d78 <TIM_ITRx_SetConfig>
    break;
 8000eb8:	e7ce      	b.n	8000e58 <HAL_TIM_ConfigClockSource+0xa2>
  __HAL_LOCK(htim);
 8000eba:	2002      	movs	r0, #2
}
 8000ebc:	4770      	bx	lr

08000ebe <HAL_TIM_OC_DelayElapsedCallback>:
}
 8000ebe:	4770      	bx	lr

08000ec0 <HAL_TIM_IC_CaptureCallback>:
}
 8000ec0:	4770      	bx	lr

08000ec2 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8000ec2:	4770      	bx	lr

08000ec4 <HAL_TIM_TriggerCallback>:
}
 8000ec4:	4770      	bx	lr

08000ec6 <HAL_TIM_IRQHandler>:
{
 8000ec6:	b510      	push	{r4, lr}
 8000ec8:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000eca:	6803      	ldr	r3, [r0, #0]
 8000ecc:	691a      	ldr	r2, [r3, #16]
 8000ece:	f012 0f02 	tst.w	r2, #2
 8000ed2:	d011      	beq.n	8000ef8 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000ed4:	68da      	ldr	r2, [r3, #12]
 8000ed6:	f012 0f02 	tst.w	r2, #2
 8000eda:	d00d      	beq.n	8000ef8 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000edc:	f06f 0202 	mvn.w	r2, #2
 8000ee0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000ee6:	6803      	ldr	r3, [r0, #0]
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	f013 0f03 	tst.w	r3, #3
 8000eee:	d070      	beq.n	8000fd2 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8000ef0:	f7ff ffe6 	bl	8000ec0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000ef8:	6823      	ldr	r3, [r4, #0]
 8000efa:	691a      	ldr	r2, [r3, #16]
 8000efc:	f012 0f04 	tst.w	r2, #4
 8000f00:	d012      	beq.n	8000f28 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	f012 0f04 	tst.w	r2, #4
 8000f08:	d00e      	beq.n	8000f28 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000f0a:	f06f 0204 	mvn.w	r2, #4
 8000f0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000f10:	2302      	movs	r3, #2
 8000f12:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000f14:	6823      	ldr	r3, [r4, #0]
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f413 7f40 	tst.w	r3, #768	; 0x300
 8000f1c:	d05f      	beq.n	8000fde <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8000f1e:	4620      	mov	r0, r4
 8000f20:	f7ff ffce 	bl	8000ec0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f24:	2300      	movs	r3, #0
 8000f26:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000f28:	6823      	ldr	r3, [r4, #0]
 8000f2a:	691a      	ldr	r2, [r3, #16]
 8000f2c:	f012 0f08 	tst.w	r2, #8
 8000f30:	d012      	beq.n	8000f58 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000f32:	68da      	ldr	r2, [r3, #12]
 8000f34:	f012 0f08 	tst.w	r2, #8
 8000f38:	d00e      	beq.n	8000f58 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000f3a:	f06f 0208 	mvn.w	r2, #8
 8000f3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000f40:	2304      	movs	r3, #4
 8000f42:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000f44:	6823      	ldr	r3, [r4, #0]
 8000f46:	69db      	ldr	r3, [r3, #28]
 8000f48:	f013 0f03 	tst.w	r3, #3
 8000f4c:	d04e      	beq.n	8000fec <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8000f4e:	4620      	mov	r0, r4
 8000f50:	f7ff ffb6 	bl	8000ec0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f54:	2300      	movs	r3, #0
 8000f56:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000f58:	6823      	ldr	r3, [r4, #0]
 8000f5a:	691a      	ldr	r2, [r3, #16]
 8000f5c:	f012 0f10 	tst.w	r2, #16
 8000f60:	d012      	beq.n	8000f88 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000f62:	68da      	ldr	r2, [r3, #12]
 8000f64:	f012 0f10 	tst.w	r2, #16
 8000f68:	d00e      	beq.n	8000f88 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000f6a:	f06f 0210 	mvn.w	r2, #16
 8000f6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000f70:	2308      	movs	r3, #8
 8000f72:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000f74:	6823      	ldr	r3, [r4, #0]
 8000f76:	69db      	ldr	r3, [r3, #28]
 8000f78:	f413 7f40 	tst.w	r3, #768	; 0x300
 8000f7c:	d03d      	beq.n	8000ffa <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8000f7e:	4620      	mov	r0, r4
 8000f80:	f7ff ff9e 	bl	8000ec0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f84:	2300      	movs	r3, #0
 8000f86:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000f88:	6823      	ldr	r3, [r4, #0]
 8000f8a:	691a      	ldr	r2, [r3, #16]
 8000f8c:	f012 0f01 	tst.w	r2, #1
 8000f90:	d003      	beq.n	8000f9a <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000f92:	68da      	ldr	r2, [r3, #12]
 8000f94:	f012 0f01 	tst.w	r2, #1
 8000f98:	d136      	bne.n	8001008 <HAL_TIM_IRQHandler+0x142>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000f9a:	6823      	ldr	r3, [r4, #0]
 8000f9c:	691a      	ldr	r2, [r3, #16]
 8000f9e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8000fa2:	d003      	beq.n	8000fac <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000fa4:	68da      	ldr	r2, [r3, #12]
 8000fa6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8000faa:	d134      	bne.n	8001016 <HAL_TIM_IRQHandler+0x150>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000fac:	6823      	ldr	r3, [r4, #0]
 8000fae:	691a      	ldr	r2, [r3, #16]
 8000fb0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000fb4:	d003      	beq.n	8000fbe <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000fb6:	68da      	ldr	r2, [r3, #12]
 8000fb8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000fbc:	d132      	bne.n	8001024 <HAL_TIM_IRQHandler+0x15e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000fbe:	6823      	ldr	r3, [r4, #0]
 8000fc0:	691a      	ldr	r2, [r3, #16]
 8000fc2:	f012 0f20 	tst.w	r2, #32
 8000fc6:	d003      	beq.n	8000fd0 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000fc8:	68da      	ldr	r2, [r3, #12]
 8000fca:	f012 0f20 	tst.w	r2, #32
 8000fce:	d130      	bne.n	8001032 <HAL_TIM_IRQHandler+0x16c>
}
 8000fd0:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000fd2:	f7ff ff74 	bl	8000ebe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000fd6:	4620      	mov	r0, r4
 8000fd8:	f7ff ff73 	bl	8000ec2 <HAL_TIM_PWM_PulseFinishedCallback>
 8000fdc:	e78a      	b.n	8000ef4 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000fde:	4620      	mov	r0, r4
 8000fe0:	f7ff ff6d 	bl	8000ebe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	f7ff ff6c 	bl	8000ec2 <HAL_TIM_PWM_PulseFinishedCallback>
 8000fea:	e79b      	b.n	8000f24 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000fec:	4620      	mov	r0, r4
 8000fee:	f7ff ff66 	bl	8000ebe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ff2:	4620      	mov	r0, r4
 8000ff4:	f7ff ff65 	bl	8000ec2 <HAL_TIM_PWM_PulseFinishedCallback>
 8000ff8:	e7ac      	b.n	8000f54 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	f7ff ff5f 	bl	8000ebe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001000:	4620      	mov	r0, r4
 8001002:	f7ff ff5e 	bl	8000ec2 <HAL_TIM_PWM_PulseFinishedCallback>
 8001006:	e7bd      	b.n	8000f84 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001008:	f06f 0201 	mvn.w	r2, #1
 800100c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800100e:	4620      	mov	r0, r4
 8001010:	f000 fb48 	bl	80016a4 <HAL_TIM_PeriodElapsedCallback>
 8001014:	e7c1      	b.n	8000f9a <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001016:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800101a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800101c:	4620      	mov	r0, r4
 800101e:	f000 f88c 	bl	800113a <HAL_TIMEx_BreakCallback>
 8001022:	e7c3      	b.n	8000fac <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001024:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001028:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800102a:	4620      	mov	r0, r4
 800102c:	f7ff ff4a 	bl	8000ec4 <HAL_TIM_TriggerCallback>
 8001030:	e7c5      	b.n	8000fbe <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001032:	f06f 0220 	mvn.w	r2, #32
 8001036:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001038:	4620      	mov	r0, r4
 800103a:	f000 f87d 	bl	8001138 <HAL_TIMEx_CommutationCallback>
}
 800103e:	e7c7      	b.n	8000fd0 <HAL_TIM_IRQHandler+0x10a>

08001040 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001040:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001042:	4a1b      	ldr	r2, [pc, #108]	; (80010b0 <TIM_Base_SetConfig+0x70>)
 8001044:	4290      	cmp	r0, r2
 8001046:	d00a      	beq.n	800105e <TIM_Base_SetConfig+0x1e>
 8001048:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800104c:	d007      	beq.n	800105e <TIM_Base_SetConfig+0x1e>
 800104e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001052:	4290      	cmp	r0, r2
 8001054:	d003      	beq.n	800105e <TIM_Base_SetConfig+0x1e>
 8001056:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800105a:	4290      	cmp	r0, r2
 800105c:	d103      	bne.n	8001066 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800105e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001062:	684a      	ldr	r2, [r1, #4]
 8001064:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001066:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <TIM_Base_SetConfig+0x70>)
 8001068:	4290      	cmp	r0, r2
 800106a:	d00a      	beq.n	8001082 <TIM_Base_SetConfig+0x42>
 800106c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001070:	d007      	beq.n	8001082 <TIM_Base_SetConfig+0x42>
 8001072:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001076:	4290      	cmp	r0, r2
 8001078:	d003      	beq.n	8001082 <TIM_Base_SetConfig+0x42>
 800107a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800107e:	4290      	cmp	r0, r2
 8001080:	d103      	bne.n	800108a <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001086:	68ca      	ldr	r2, [r1, #12]
 8001088:	4313      	orrs	r3, r2
  tmpcr1 &= ~TIM_CR1_ARPE;
 800108a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800108e:	694a      	ldr	r2, [r1, #20]
 8001090:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001092:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001094:	688b      	ldr	r3, [r1, #8]
 8001096:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001098:	680b      	ldr	r3, [r1, #0]
 800109a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <TIM_Base_SetConfig+0x70>)
 800109e:	4298      	cmp	r0, r3
 80010a0:	d002      	beq.n	80010a8 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 80010a2:	2301      	movs	r3, #1
 80010a4:	6143      	str	r3, [r0, #20]
}
 80010a6:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80010a8:	690b      	ldr	r3, [r1, #16]
 80010aa:	6303      	str	r3, [r0, #48]	; 0x30
 80010ac:	e7f9      	b.n	80010a2 <TIM_Base_SetConfig+0x62>
 80010ae:	bf00      	nop
 80010b0:	40012c00 	.word	0x40012c00

080010b4 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 80010b4:	b1a8      	cbz	r0, 80010e2 <HAL_TIM_Base_Init+0x2e>
{
 80010b6:	b510      	push	{r4, lr}
 80010b8:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 80010ba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80010be:	b15b      	cbz	r3, 80010d8 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 80010c0:	2302      	movs	r3, #2
 80010c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80010c6:	1d21      	adds	r1, r4, #4
 80010c8:	6820      	ldr	r0, [r4, #0]
 80010ca:	f7ff ffb9 	bl	8001040 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80010ce:	2301      	movs	r3, #1
 80010d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80010d4:	2000      	movs	r0, #0
}
 80010d6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80010d8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80010dc:	f000 fb86 	bl	80017ec <HAL_TIM_Base_MspInit>
 80010e0:	e7ee      	b.n	80010c0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80010e2:	2001      	movs	r0, #1
}
 80010e4:	4770      	bx	lr

080010e6 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80010e6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d022      	beq.n	8001134 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
{
 80010ee:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80010f0:	2201      	movs	r2, #1
 80010f2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80010f6:	2302      	movs	r3, #2
 80010f8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80010fc:	6804      	ldr	r4, [r0, #0]
 80010fe:	6863      	ldr	r3, [r4, #4]
 8001100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001104:	6063      	str	r3, [r4, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001106:	6804      	ldr	r4, [r0, #0]
 8001108:	6863      	ldr	r3, [r4, #4]
 800110a:	680d      	ldr	r5, [r1, #0]
 800110c:	432b      	orrs	r3, r5
 800110e:	6063      	str	r3, [r4, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001110:	6804      	ldr	r4, [r0, #0]
 8001112:	68a3      	ldr	r3, [r4, #8]
 8001114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001118:	60a3      	str	r3, [r4, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800111a:	6804      	ldr	r4, [r0, #0]
 800111c:	68a3      	ldr	r3, [r4, #8]
 800111e:	6849      	ldr	r1, [r1, #4]
 8001120:	430b      	orrs	r3, r1
 8001122:	60a3      	str	r3, [r4, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001124:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001128:	2300      	movs	r3, #0
 800112a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800112e:	4618      	mov	r0, r3
}
 8001130:	bc30      	pop	{r4, r5}
 8001132:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001134:	2002      	movs	r0, #2
}
 8001136:	4770      	bx	lr

08001138 <HAL_TIMEx_CommutationCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8001138:	4770      	bx	lr

0800113a <HAL_TIMEx_BreakCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800113a:	4770      	bx	lr

0800113c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800113c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001140:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001142:	6802      	ldr	r2, [r0, #0]
 8001144:	6913      	ldr	r3, [r2, #16]
 8001146:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800114a:	68c1      	ldr	r1, [r0, #12]
 800114c:	430b      	orrs	r3, r1
 800114e:	6113      	str	r3, [r2, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001150:	6883      	ldr	r3, [r0, #8]
 8001152:	6902      	ldr	r2, [r0, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	6942      	ldr	r2, [r0, #20]
 8001158:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, 
 800115a:	6801      	ldr	r1, [r0, #0]
 800115c:	68ca      	ldr	r2, [r1, #12]
 800115e:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001162:	f022 020c 	bic.w	r2, r2, #12
 8001166:	4313      	orrs	r3, r2
 8001168:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800116a:	6802      	ldr	r2, [r0, #0]
 800116c:	6953      	ldr	r3, [r2, #20]
 800116e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001172:	6981      	ldr	r1, [r0, #24]
 8001174:	430b      	orrs	r3, r1
 8001176:	6153      	str	r3, [r2, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001178:	6802      	ldr	r2, [r0, #0]
 800117a:	4b59      	ldr	r3, [pc, #356]	; (80012e0 <UART_SetConfig+0x1a4>)
 800117c:	429a      	cmp	r2, r3
 800117e:	d057      	beq.n	8001230 <UART_SetConfig+0xf4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001180:	f7ff fcf4 	bl	8000b6c <HAL_RCC_GetPCLK1Freq>
 8001184:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001188:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800118c:	686c      	ldr	r4, [r5, #4]
 800118e:	00a4      	lsls	r4, r4, #2
 8001190:	fbb0 f4f4 	udiv	r4, r0, r4
 8001194:	4f53      	ldr	r7, [pc, #332]	; (80012e4 <UART_SetConfig+0x1a8>)
 8001196:	fba7 3404 	umull	r3, r4, r7, r4
 800119a:	0964      	lsrs	r4, r4, #5
 800119c:	0126      	lsls	r6, r4, #4
 800119e:	f7ff fce5 	bl	8000b6c <HAL_RCC_GetPCLK1Freq>
 80011a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80011a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80011aa:	686c      	ldr	r4, [r5, #4]
 80011ac:	00a4      	lsls	r4, r4, #2
 80011ae:	fbb0 f9f4 	udiv	r9, r0, r4
 80011b2:	f7ff fcdb 	bl	8000b6c <HAL_RCC_GetPCLK1Freq>
 80011b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80011ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80011be:	686c      	ldr	r4, [r5, #4]
 80011c0:	00a4      	lsls	r4, r4, #2
 80011c2:	fbb0 f4f4 	udiv	r4, r0, r4
 80011c6:	fba7 3404 	umull	r3, r4, r7, r4
 80011ca:	0964      	lsrs	r4, r4, #5
 80011cc:	f04f 0864 	mov.w	r8, #100	; 0x64
 80011d0:	fb08 9414 	mls	r4, r8, r4, r9
 80011d4:	0124      	lsls	r4, r4, #4
 80011d6:	3432      	adds	r4, #50	; 0x32
 80011d8:	fba7 3404 	umull	r3, r4, r7, r4
 80011dc:	0964      	lsrs	r4, r4, #5
 80011de:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 80011e2:	4434      	add	r4, r6
 80011e4:	f7ff fcc2 	bl	8000b6c <HAL_RCC_GetPCLK1Freq>
 80011e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80011ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80011f0:	686e      	ldr	r6, [r5, #4]
 80011f2:	00b6      	lsls	r6, r6, #2
 80011f4:	fbb0 f6f6 	udiv	r6, r0, r6
 80011f8:	f7ff fcb8 	bl	8000b6c <HAL_RCC_GetPCLK1Freq>
 80011fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001200:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001204:	686b      	ldr	r3, [r5, #4]
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	fbb0 f0f3 	udiv	r0, r0, r3
 800120c:	fba7 3000 	umull	r3, r0, r7, r0
 8001210:	0940      	lsrs	r0, r0, #5
 8001212:	fb08 6810 	mls	r8, r8, r0, r6
 8001216:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800121a:	f108 0832 	add.w	r8, r8, #50	; 0x32
 800121e:	fba7 3708 	umull	r3, r7, r7, r8
 8001222:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8001226:	682b      	ldr	r3, [r5, #0]
 8001228:	4427      	add	r7, r4
 800122a:	609f      	str	r7, [r3, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 800122c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001230:	f7ff fcac 	bl	8000b8c <HAL_RCC_GetPCLK2Freq>
 8001234:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001238:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800123c:	686c      	ldr	r4, [r5, #4]
 800123e:	00a4      	lsls	r4, r4, #2
 8001240:	fbb0 f4f4 	udiv	r4, r0, r4
 8001244:	4f27      	ldr	r7, [pc, #156]	; (80012e4 <UART_SetConfig+0x1a8>)
 8001246:	fba7 3404 	umull	r3, r4, r7, r4
 800124a:	0964      	lsrs	r4, r4, #5
 800124c:	0126      	lsls	r6, r4, #4
 800124e:	f7ff fc9d 	bl	8000b8c <HAL_RCC_GetPCLK2Freq>
 8001252:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001256:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800125a:	686c      	ldr	r4, [r5, #4]
 800125c:	00a4      	lsls	r4, r4, #2
 800125e:	fbb0 f9f4 	udiv	r9, r0, r4
 8001262:	f7ff fc93 	bl	8000b8c <HAL_RCC_GetPCLK2Freq>
 8001266:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800126a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800126e:	686c      	ldr	r4, [r5, #4]
 8001270:	00a4      	lsls	r4, r4, #2
 8001272:	fbb0 f4f4 	udiv	r4, r0, r4
 8001276:	fba7 3404 	umull	r3, r4, r7, r4
 800127a:	0964      	lsrs	r4, r4, #5
 800127c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001280:	fb08 9414 	mls	r4, r8, r4, r9
 8001284:	0124      	lsls	r4, r4, #4
 8001286:	3432      	adds	r4, #50	; 0x32
 8001288:	fba7 3404 	umull	r3, r4, r7, r4
 800128c:	0964      	lsrs	r4, r4, #5
 800128e:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 8001292:	4434      	add	r4, r6
 8001294:	f7ff fc7a 	bl	8000b8c <HAL_RCC_GetPCLK2Freq>
 8001298:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800129c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80012a0:	686e      	ldr	r6, [r5, #4]
 80012a2:	00b6      	lsls	r6, r6, #2
 80012a4:	fbb0 f6f6 	udiv	r6, r0, r6
 80012a8:	f7ff fc70 	bl	8000b8c <HAL_RCC_GetPCLK2Freq>
 80012ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80012b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80012b4:	686b      	ldr	r3, [r5, #4]
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	fbb0 f0f3 	udiv	r0, r0, r3
 80012bc:	fba7 3000 	umull	r3, r0, r7, r0
 80012c0:	0940      	lsrs	r0, r0, #5
 80012c2:	fb08 6810 	mls	r8, r8, r0, r6
 80012c6:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80012ca:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80012ce:	fba7 3708 	umull	r3, r7, r7, r8
 80012d2:	f3c7 1743 	ubfx	r7, r7, #5, #4
 80012d6:	682b      	ldr	r3, [r5, #0]
 80012d8:	4427      	add	r7, r4
 80012da:	609f      	str	r7, [r3, #8]
 80012dc:	e7a6      	b.n	800122c <UART_SetConfig+0xf0>
 80012de:	bf00      	nop
 80012e0:	40013800 	.word	0x40013800
 80012e4:	51eb851f 	.word	0x51eb851f

080012e8 <UART_WaitOnFlagUntilTimeout>:
{
 80012e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012ec:	4605      	mov	r5, r0
 80012ee:	460f      	mov	r7, r1
 80012f0:	4616      	mov	r6, r2
 80012f2:	4698      	mov	r8, r3
 80012f4:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80012f6:	682b      	ldr	r3, [r5, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	ea37 0303 	bics.w	r3, r7, r3
 80012fe:	bf0c      	ite	eq
 8001300:	2301      	moveq	r3, #1
 8001302:	2300      	movne	r3, #0
 8001304:	42b3      	cmp	r3, r6
 8001306:	d11d      	bne.n	8001344 <UART_WaitOnFlagUntilTimeout+0x5c>
    if(Timeout != HAL_MAX_DELAY)
 8001308:	f1b4 3fff 	cmp.w	r4, #4294967295
 800130c:	d0f3      	beq.n	80012f6 <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800130e:	b12c      	cbz	r4, 800131c <UART_WaitOnFlagUntilTimeout+0x34>
 8001310:	f7fe ff60 	bl	80001d4 <HAL_GetTick>
 8001314:	eba0 0008 	sub.w	r0, r0, r8
 8001318:	42a0      	cmp	r0, r4
 800131a:	d9ec      	bls.n	80012f6 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800131c:	682a      	ldr	r2, [r5, #0]
 800131e:	68d3      	ldr	r3, [r2, #12]
 8001320:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001324:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001326:	682a      	ldr	r2, [r5, #0]
 8001328:	6953      	ldr	r3, [r2, #20]
 800132a:	f023 0301 	bic.w	r3, r3, #1
 800132e:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001330:	2320      	movs	r3, #32
 8001332:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001336:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800133a:	2300      	movs	r3, #0
 800133c:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8001340:	2003      	movs	r0, #3
 8001342:	e000      	b.n	8001346 <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 8001344:	2000      	movs	r0, #0
}
 8001346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800134a <HAL_UART_Init>:
  if(huart == NULL)
 800134a:	b358      	cbz	r0, 80013a4 <HAL_UART_Init+0x5a>
{
 800134c:	b510      	push	{r4, lr}
 800134e:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8001350:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001354:	b30b      	cbz	r3, 800139a <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001356:	2324      	movs	r3, #36	; 0x24
 8001358:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800135c:	6822      	ldr	r2, [r4, #0]
 800135e:	68d3      	ldr	r3, [r2, #12]
 8001360:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001364:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001366:	4620      	mov	r0, r4
 8001368:	f7ff fee8 	bl	800113c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800136c:	6822      	ldr	r2, [r4, #0]
 800136e:	6913      	ldr	r3, [r2, #16]
 8001370:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001374:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001376:	6822      	ldr	r2, [r4, #0]
 8001378:	6953      	ldr	r3, [r2, #20]
 800137a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800137e:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001380:	6822      	ldr	r2, [r4, #0]
 8001382:	68d3      	ldr	r3, [r2, #12]
 8001384:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001388:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800138a:	2000      	movs	r0, #0
 800138c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800138e:	2320      	movs	r3, #32
 8001390:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001394:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8001398:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800139a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800139e:	f000 fa45 	bl	800182c <HAL_UART_MspInit>
 80013a2:	e7d8      	b.n	8001356 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80013a4:	2001      	movs	r0, #1
}
 80013a6:	4770      	bx	lr

080013a8 <HAL_UART_Transmit>:
{
 80013a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80013b0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b20      	cmp	r3, #32
 80013b8:	d155      	bne.n	8001466 <HAL_UART_Transmit+0xbe>
 80013ba:	4604      	mov	r4, r0
 80013bc:	460d      	mov	r5, r1
 80013be:	4690      	mov	r8, r2
    if((pData == NULL) || (Size == 0U))
 80013c0:	2900      	cmp	r1, #0
 80013c2:	d055      	beq.n	8001470 <HAL_UART_Transmit+0xc8>
 80013c4:	2a00      	cmp	r2, #0
 80013c6:	d055      	beq.n	8001474 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 80013c8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d053      	beq.n	8001478 <HAL_UART_Transmit+0xd0>
 80013d0:	2301      	movs	r3, #1
 80013d2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80013da:	2321      	movs	r3, #33	; 0x21
 80013dc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80013e0:	f7fe fef8 	bl	80001d4 <HAL_GetTick>
 80013e4:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80013e6:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80013ea:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80013ee:	e010      	b.n	8001412 <HAL_UART_Transmit+0x6a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013f0:	9600      	str	r6, [sp, #0]
 80013f2:	463b      	mov	r3, r7
 80013f4:	2200      	movs	r2, #0
 80013f6:	2180      	movs	r1, #128	; 0x80
 80013f8:	4620      	mov	r0, r4
 80013fa:	f7ff ff75 	bl	80012e8 <UART_WaitOnFlagUntilTimeout>
 80013fe:	2800      	cmp	r0, #0
 8001400:	d13c      	bne.n	800147c <HAL_UART_Transmit+0xd4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001402:	882b      	ldrh	r3, [r5, #0]
 8001404:	6822      	ldr	r2, [r4, #0]
 8001406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800140a:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800140c:	6923      	ldr	r3, [r4, #16]
 800140e:	b9c3      	cbnz	r3, 8001442 <HAL_UART_Transmit+0x9a>
          pData +=2U;
 8001410:	3502      	adds	r5, #2
    while(huart->TxXferCount > 0U)
 8001412:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001414:	b29b      	uxth	r3, r3
 8001416:	b1b3      	cbz	r3, 8001446 <HAL_UART_Transmit+0x9e>
      huart->TxXferCount--;
 8001418:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800141a:	3b01      	subs	r3, #1
 800141c:	b29b      	uxth	r3, r3
 800141e:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001420:	68a3      	ldr	r3, [r4, #8]
 8001422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001426:	d0e3      	beq.n	80013f0 <HAL_UART_Transmit+0x48>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001428:	9600      	str	r6, [sp, #0]
 800142a:	463b      	mov	r3, r7
 800142c:	2200      	movs	r2, #0
 800142e:	2180      	movs	r1, #128	; 0x80
 8001430:	4620      	mov	r0, r4
 8001432:	f7ff ff59 	bl	80012e8 <UART_WaitOnFlagUntilTimeout>
 8001436:	bb18      	cbnz	r0, 8001480 <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001438:	782a      	ldrb	r2, [r5, #0]
 800143a:	6823      	ldr	r3, [r4, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	3501      	adds	r5, #1
 8001440:	e7e7      	b.n	8001412 <HAL_UART_Transmit+0x6a>
          pData +=1U;
 8001442:	3501      	adds	r5, #1
 8001444:	e7e5      	b.n	8001412 <HAL_UART_Transmit+0x6a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001446:	9600      	str	r6, [sp, #0]
 8001448:	463b      	mov	r3, r7
 800144a:	2200      	movs	r2, #0
 800144c:	2140      	movs	r1, #64	; 0x40
 800144e:	4620      	mov	r0, r4
 8001450:	f7ff ff4a 	bl	80012e8 <UART_WaitOnFlagUntilTimeout>
 8001454:	4603      	mov	r3, r0
 8001456:	b9a8      	cbnz	r0, 8001484 <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 8001458:	2220      	movs	r2, #32
 800145a:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800145e:	2200      	movs	r2, #0
 8001460:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8001464:	e000      	b.n	8001468 <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 8001466:	2302      	movs	r3, #2
}
 8001468:	4618      	mov	r0, r3
 800146a:	b002      	add	sp, #8
 800146c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e7f9      	b.n	8001468 <HAL_UART_Transmit+0xc0>
 8001474:	2301      	movs	r3, #1
 8001476:	e7f7      	b.n	8001468 <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 8001478:	2302      	movs	r3, #2
 800147a:	e7f5      	b.n	8001468 <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e7f3      	b.n	8001468 <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e7f1      	b.n	8001468 <HAL_UART_Transmit+0xc0>
      return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e7ef      	b.n	8001468 <HAL_UART_Transmit+0xc0>

08001488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800148c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148e:	2400      	movs	r4, #0
 8001490:	9404      	str	r4, [sp, #16]
 8001492:	9405      	str	r4, [sp, #20]
 8001494:	9406      	str	r4, [sp, #24]
 8001496:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001498:	4b2e      	ldr	r3, [pc, #184]	; (8001554 <MX_GPIO_Init+0xcc>)
 800149a:	699a      	ldr	r2, [r3, #24]
 800149c:	f042 0210 	orr.w	r2, r2, #16
 80014a0:	619a      	str	r2, [r3, #24]
 80014a2:	699a      	ldr	r2, [r3, #24]
 80014a4:	f002 0210 	and.w	r2, r2, #16
 80014a8:	9200      	str	r2, [sp, #0]
 80014aa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ac:	699a      	ldr	r2, [r3, #24]
 80014ae:	f042 0220 	orr.w	r2, r2, #32
 80014b2:	619a      	str	r2, [r3, #24]
 80014b4:	699a      	ldr	r2, [r3, #24]
 80014b6:	f002 0220 	and.w	r2, r2, #32
 80014ba:	9201      	str	r2, [sp, #4]
 80014bc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	699a      	ldr	r2, [r3, #24]
 80014c0:	f042 0204 	orr.w	r2, r2, #4
 80014c4:	619a      	str	r2, [r3, #24]
 80014c6:	699a      	ldr	r2, [r3, #24]
 80014c8:	f002 0204 	and.w	r2, r2, #4
 80014cc:	9202      	str	r2, [sp, #8]
 80014ce:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d0:	699a      	ldr	r2, [r3, #24]
 80014d2:	f042 0208 	orr.w	r2, r2, #8
 80014d6:	619a      	str	r2, [r3, #24]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	9303      	str	r3, [sp, #12]
 80014e0:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80014e2:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8001564 <MX_GPIO_Init+0xdc>
 80014e6:	4622      	mov	r2, r4
 80014e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ec:	4640      	mov	r0, r8
 80014ee:	f7ff f815 	bl	800051c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80014f2:	4d19      	ldr	r5, [pc, #100]	; (8001558 <MX_GPIO_Init+0xd0>)
 80014f4:	4622      	mov	r2, r4
 80014f6:	211a      	movs	r1, #26
 80014f8:	4628      	mov	r0, r5
 80014fa:	f7ff f80f 	bl	800051c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001502:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001504:	2701      	movs	r7, #1
 8001506:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2602      	movs	r6, #2
 800150c:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150e:	a904      	add	r1, sp, #16
 8001510:	4640      	mov	r0, r8
 8001512:	f7fe ff19 	bl	8000348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8001516:	231a      	movs	r3, #26
 8001518:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151a:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001520:	a904      	add	r1, sp, #16
 8001522:	4628      	mov	r0, r5
 8001524:	f7fe ff10 	bl	8000348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001528:	f44f 7300 	mov.w	r3, #512	; 0x200
 800152c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <MX_GPIO_Init+0xd4>)
 8001530:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001534:	a904      	add	r1, sp, #16
 8001536:	480a      	ldr	r0, [pc, #40]	; (8001560 <MX_GPIO_Init+0xd8>)
 8001538:	f7fe ff06 	bl	8000348 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800153c:	4622      	mov	r2, r4
 800153e:	4621      	mov	r1, r4
 8001540:	2017      	movs	r0, #23
 8001542:	f7fe fe5f 	bl	8000204 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001546:	2017      	movs	r0, #23
 8001548:	f7fe fe90 	bl	800026c <HAL_NVIC_EnableIRQ>

}
 800154c:	b008      	add	sp, #32
 800154e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000
 8001558:	40010800 	.word	0x40010800
 800155c:	10110000 	.word	0x10110000
 8001560:	40010c00 	.word	0x40010c00
 8001564:	40011000 	.word	0x40011000

08001568 <MX_TIM3_Init>:
{
 8001568:	b530      	push	{r4, r5, lr}
 800156a:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800156c:	2400      	movs	r4, #0
 800156e:	9402      	str	r4, [sp, #8]
 8001570:	9403      	str	r4, [sp, #12]
 8001572:	9404      	str	r4, [sp, #16]
 8001574:	9405      	str	r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001576:	9400      	str	r4, [sp, #0]
 8001578:	9401      	str	r4, [sp, #4]
  htim3.Instance = TIM3;
 800157a:	4d0f      	ldr	r5, [pc, #60]	; (80015b8 <MX_TIM3_Init+0x50>)
 800157c:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <MX_TIM3_Init+0x54>)
 800157e:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 35999;
 8001580:	f648 439f 	movw	r3, #35999	; 0x8c9f
 8001584:	606b      	str	r3, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001586:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 2000;
 8001588:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800158c:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158e:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001594:	4628      	mov	r0, r5
 8001596:	f7ff fd8d 	bl	80010b4 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800159a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159e:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015a0:	a902      	add	r1, sp, #8
 80015a2:	4628      	mov	r0, r5
 80015a4:	f7ff fc07 	bl	8000db6 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a8:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015aa:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015ac:	4669      	mov	r1, sp
 80015ae:	4628      	mov	r0, r5
 80015b0:	f7ff fd99 	bl	80010e6 <HAL_TIMEx_MasterConfigSynchronization>
}
 80015b4:	b007      	add	sp, #28
 80015b6:	bd30      	pop	{r4, r5, pc}
 80015b8:	2000007c 	.word	0x2000007c
 80015bc:	40000400 	.word	0x40000400

080015c0 <MX_SPI1_Init>:
{
 80015c0:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 80015c2:	480c      	ldr	r0, [pc, #48]	; (80015f4 <MX_SPI1_Init+0x34>)
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <MX_SPI1_Init+0x38>)
 80015c6:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015c8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80015cc:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015ce:	2300      	movs	r3, #0
 80015d0:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015d2:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015d4:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015d6:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015dc:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80015de:	2208      	movs	r2, #8
 80015e0:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015e2:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015e4:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015e6:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015e8:	230a      	movs	r3, #10
 80015ea:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015ec:	f7ff fb5e 	bl	8000cac <HAL_SPI_Init>
}
 80015f0:	bd08      	pop	{r3, pc}
 80015f2:	bf00      	nop
 80015f4:	200000bc 	.word	0x200000bc
 80015f8:	40013000 	.word	0x40013000

080015fc <MX_USART3_UART_Init>:
{
 80015fc:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 80015fe:	4808      	ldr	r0, [pc, #32]	; (8001620 <MX_USART3_UART_Init+0x24>)
 8001600:	4b08      	ldr	r3, [pc, #32]	; (8001624 <MX_USART3_UART_Init+0x28>)
 8001602:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 9600;
 8001604:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001608:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800160a:	2300      	movs	r3, #0
 800160c:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800160e:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001610:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001612:	220c      	movs	r2, #12
 8001614:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001616:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001618:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800161a:	f7ff fe96 	bl	800134a <HAL_UART_Init>
}
 800161e:	bd08      	pop	{r3, pc}
 8001620:	2000003c 	.word	0x2000003c
 8001624:	40004800 	.word	0x40004800

08001628 <SystemClock_Config>:
{
 8001628:	b530      	push	{r4, r5, lr}
 800162a:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162c:	2400      	movs	r4, #0
 800162e:	9408      	str	r4, [sp, #32]
 8001630:	9409      	str	r4, [sp, #36]	; 0x24
 8001632:	940b      	str	r4, [sp, #44]	; 0x2c
 8001634:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001636:	9401      	str	r4, [sp, #4]
 8001638:	9402      	str	r4, [sp, #8]
 800163a:	9403      	str	r4, [sp, #12]
 800163c:	9404      	str	r4, [sp, #16]
 800163e:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001640:	2201      	movs	r2, #1
 8001642:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001648:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800164a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800164c:	2502      	movs	r5, #2
 800164e:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001650:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001652:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001656:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001658:	a806      	add	r0, sp, #24
 800165a:	f7fe ff8d 	bl	8000578 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800165e:	230f      	movs	r3, #15
 8001660:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001662:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001664:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800166a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800166c:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800166e:	4629      	mov	r1, r5
 8001670:	a801      	add	r0, sp, #4
 8001672:	f7ff f9a7 	bl	80009c4 <HAL_RCC_ClockConfig>
}
 8001676:	b011      	add	sp, #68	; 0x44
 8001678:	bd30      	pop	{r4, r5, pc}
	...

0800167c <main>:
{
 800167c:	b508      	push	{r3, lr}
  HAL_Init();
 800167e:	f7fe fd8b 	bl	8000198 <HAL_Init>
  SystemClock_Config();
 8001682:	f7ff ffd1 	bl	8001628 <SystemClock_Config>
  MX_GPIO_Init();
 8001686:	f7ff feff 	bl	8001488 <MX_GPIO_Init>
  MX_TIM3_Init();
 800168a:	f7ff ff6d 	bl	8001568 <MX_TIM3_Init>
  MX_SPI1_Init();
 800168e:	f7ff ff97 	bl	80015c0 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001692:	f7ff ffb3 	bl	80015fc <MX_USART3_UART_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 8001696:	4802      	ldr	r0, [pc, #8]	; (80016a0 <main+0x24>)
 8001698:	f7ff fb81 	bl	8000d9e <HAL_TIM_Base_Start_IT>
 800169c:	e7fe      	b.n	800169c <main+0x20>
 800169e:	bf00      	nop
 80016a0:	2000007c 	.word	0x2000007c

080016a4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016a4:	b508      	push	{r3, lr}
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

  HAL_GPIO_TogglePin(BOARD_LED_PORT, BOARD_LED_PIN);//Prendo y apago el pin cada 'x' segundos
 80016a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016aa:	4802      	ldr	r0, [pc, #8]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80016ac:	f7fe ff3c 	bl	8000528 <HAL_GPIO_TogglePin>

}
 80016b0:	bd08      	pop	{r3, pc}
 80016b2:	bf00      	nop
 80016b4:	40011000 	.word	0x40011000

080016b8 <HAL_GPIO_EXTI_Callback>:
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  //HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);//buscar valor en stm32f103xb.h
  g_prevTime = g_curTime;
 80016b8:	4b18      	ldr	r3, [pc, #96]	; (800171c <HAL_GPIO_EXTI_Callback+0x64>)
 80016ba:	881a      	ldrh	r2, [r3, #0]
 80016bc:	4b18      	ldr	r3, [pc, #96]	; (8001720 <HAL_GPIO_EXTI_Callback+0x68>)
 80016be:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == GPIO_PIN_9) // pin del sensor hall
 80016c0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80016c4:	d000      	beq.n	80016c8 <HAL_GPIO_EXTI_Callback+0x10>
 80016c6:	4770      	bx	lr
{
 80016c8:	b570      	push	{r4, r5, r6, lr}
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4); // prendo/apago el led
 80016ca:	2110      	movs	r1, #16
 80016cc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80016d0:	f500 3083 	add.w	r0, r0, #67072	; 0x10600
 80016d4:	f7fe ff28 	bl	8000528 <HAL_GPIO_TogglePin>
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);

	  g_curTime = HAL_GetTick(); //Provides a tick value in millisecond
 80016d8:	f7fe fd7c 	bl	80001d4 <HAL_GetTick>
 80016dc:	b280      	uxth	r0, r0
 80016de:	4b0f      	ldr	r3, [pc, #60]	; (800171c <HAL_GPIO_EXTI_Callback+0x64>)
 80016e0:	8018      	strh	r0, [r3, #0]
	  count ++;
 80016e2:	4a10      	ldr	r2, [pc, #64]	; (8001724 <HAL_GPIO_EXTI_Callback+0x6c>)
 80016e4:	6813      	ldr	r3, [r2, #0]
 80016e6:	3301      	adds	r3, #1
 80016e8:	6013      	str	r3, [r2, #0]
	  g_tDelay = (g_curTime - g_prevTime);
 80016ea:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <HAL_GPIO_EXTI_Callback+0x68>)
 80016ec:	881b      	ldrh	r3, [r3, #0]
 80016ee:	1ac0      	subs	r0, r0, r3
 80016f0:	b280      	uxth	r0, r0
 80016f2:	4e0d      	ldr	r6, [pc, #52]	; (8001728 <HAL_GPIO_EXTI_Callback+0x70>)
 80016f4:	8030      	strh	r0, [r6, #0]
	  uartByte = (uint8_t)(g_tDelay & 0x00ff); // i keep only the first byte
 80016f6:	4c0d      	ldr	r4, [pc, #52]	; (800172c <HAL_GPIO_EXTI_Callback+0x74>)
 80016f8:	7020      	strb	r0, [r4, #0]


	  //HAL_UART_Transmit_IT(&huart3,&uartByte , 1);
	  //HAL_UART_Transmit(&huart3, (uint8_t *)"Hello, world!\r\n", 15U, 100U);
	  //HAL_UART_Transmit(&huart3, (uint8_t *)"Hello, world!\n", 15U, 100U);
	  HAL_UART_Transmit(&huart3, &uartByte, 1, 100U);
 80016fa:	4d0d      	ldr	r5, [pc, #52]	; (8001730 <HAL_GPIO_EXTI_Callback+0x78>)
 80016fc:	2364      	movs	r3, #100	; 0x64
 80016fe:	2201      	movs	r2, #1
 8001700:	4621      	mov	r1, r4
 8001702:	4628      	mov	r0, r5
 8001704:	f7ff fe50 	bl	80013a8 <HAL_UART_Transmit>
	  uartByte =(uint8_t)((g_tDelay >>8) & 0x00ff); // i read the second byte
 8001708:	8833      	ldrh	r3, [r6, #0]
 800170a:	0a1b      	lsrs	r3, r3, #8
 800170c:	7023      	strb	r3, [r4, #0]
	  HAL_UART_Transmit(&huart3, &uartByte, 1, 100U);
 800170e:	2364      	movs	r3, #100	; 0x64
 8001710:	2201      	movs	r2, #1
 8001712:	4621      	mov	r1, r4
 8001714:	4628      	mov	r0, r5
 8001716:	f7ff fe47 	bl	80013a8 <HAL_UART_Transmit>
  }

  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
  //HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

}
 800171a:	bd70      	pop	{r4, r5, r6, pc}
 800171c:	2000002c 	.word	0x2000002c
 8001720:	2000002e 	.word	0x2000002e
 8001724:	20000028 	.word	0x20000028
 8001728:	20000030 	.word	0x20000030
 800172c:	20000038 	.word	0x20000038
 8001730:	2000003c 	.word	0x2000003c

08001734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001734:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001736:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <HAL_MspInit+0x3c>)
 8001738:	699a      	ldr	r2, [r3, #24]
 800173a:	f042 0201 	orr.w	r2, r2, #1
 800173e:	619a      	str	r2, [r3, #24]
 8001740:	699a      	ldr	r2, [r3, #24]
 8001742:	f002 0201 	and.w	r2, r2, #1
 8001746:	9200      	str	r2, [sp, #0]
 8001748:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800174a:	69da      	ldr	r2, [r3, #28]
 800174c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001750:	61da      	str	r2, [r3, #28]
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001758:	9301      	str	r3, [sp, #4]
 800175a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800175c:	4a05      	ldr	r2, [pc, #20]	; (8001774 <HAL_MspInit+0x40>)
 800175e:	6853      	ldr	r3, [r2, #4]
 8001760:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001764:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001768:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176a:	b002      	add	sp, #8
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000
 8001774:	40010000 	.word	0x40010000

08001778 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001778:	b500      	push	{lr}
 800177a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	2300      	movs	r3, #0
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	9303      	str	r3, [sp, #12]
 8001782:	9304      	str	r3, [sp, #16]
 8001784:	9305      	str	r3, [sp, #20]
  if(hspi->Instance==SPI1)
 8001786:	6802      	ldr	r2, [r0, #0]
 8001788:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <HAL_SPI_MspInit+0x6c>)
 800178a:	429a      	cmp	r2, r3
 800178c:	d002      	beq.n	8001794 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800178e:	b007      	add	sp, #28
 8001790:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001794:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001798:	699a      	ldr	r2, [r3, #24]
 800179a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800179e:	619a      	str	r2, [r3, #24]
 80017a0:	699a      	ldr	r2, [r3, #24]
 80017a2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80017a6:	9200      	str	r2, [sp, #0]
 80017a8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	699a      	ldr	r2, [r3, #24]
 80017ac:	f042 0204 	orr.w	r2, r2, #4
 80017b0:	619a      	str	r2, [r3, #24]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80017bc:	23a0      	movs	r3, #160	; 0xa0
 80017be:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c0:	2302      	movs	r3, #2
 80017c2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017c4:	2303      	movs	r3, #3
 80017c6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c8:	a902      	add	r1, sp, #8
 80017ca:	4807      	ldr	r0, [pc, #28]	; (80017e8 <HAL_SPI_MspInit+0x70>)
 80017cc:	f7fe fdbc 	bl	8000348 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80017d0:	2200      	movs	r2, #0
 80017d2:	4611      	mov	r1, r2
 80017d4:	2023      	movs	r0, #35	; 0x23
 80017d6:	f7fe fd15 	bl	8000204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80017da:	2023      	movs	r0, #35	; 0x23
 80017dc:	f7fe fd46 	bl	800026c <HAL_NVIC_EnableIRQ>
}
 80017e0:	e7d5      	b.n	800178e <HAL_SPI_MspInit+0x16>
 80017e2:	bf00      	nop
 80017e4:	40013000 	.word	0x40013000
 80017e8:	40010800 	.word	0x40010800

080017ec <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 80017ec:	6802      	ldr	r2, [r0, #0]
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <HAL_TIM_Base_MspInit+0x3c>)
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d000      	beq.n	80017f6 <HAL_TIM_Base_MspInit+0xa>
 80017f4:	4770      	bx	lr
{
 80017f6:	b500      	push	{lr}
 80017f8:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017fa:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 80017fe:	69da      	ldr	r2, [r3, #28]
 8001800:	f042 0202 	orr.w	r2, r2, #2
 8001804:	61da      	str	r2, [r3, #28]
 8001806:	69db      	ldr	r3, [r3, #28]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	9301      	str	r3, [sp, #4]
 800180e:	9b01      	ldr	r3, [sp, #4]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001810:	2200      	movs	r2, #0
 8001812:	4611      	mov	r1, r2
 8001814:	201d      	movs	r0, #29
 8001816:	f7fe fcf5 	bl	8000204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800181a:	201d      	movs	r0, #29
 800181c:	f7fe fd26 	bl	800026c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001820:	b003      	add	sp, #12
 8001822:	f85d fb04 	ldr.w	pc, [sp], #4
 8001826:	bf00      	nop
 8001828:	40000400 	.word	0x40000400

0800182c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800182c:	b510      	push	{r4, lr}
 800182e:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	2300      	movs	r3, #0
 8001832:	9302      	str	r3, [sp, #8]
 8001834:	9303      	str	r3, [sp, #12]
 8001836:	9304      	str	r3, [sp, #16]
 8001838:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART3)
 800183a:	6802      	ldr	r2, [r0, #0]
 800183c:	4b17      	ldr	r3, [pc, #92]	; (800189c <HAL_UART_MspInit+0x70>)
 800183e:	429a      	cmp	r2, r3
 8001840:	d001      	beq.n	8001846 <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001842:	b006      	add	sp, #24
 8001844:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 8001846:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 800184a:	69da      	ldr	r2, [r3, #28]
 800184c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001850:	61da      	str	r2, [r3, #28]
 8001852:	69da      	ldr	r2, [r3, #28]
 8001854:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001858:	9200      	str	r2, [sp, #0]
 800185a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800185c:	699a      	ldr	r2, [r3, #24]
 800185e:	f042 0208 	orr.w	r2, r2, #8
 8001862:	619a      	str	r2, [r3, #24]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800186e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001872:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001878:	2303      	movs	r3, #3
 800187a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187c:	4c08      	ldr	r4, [pc, #32]	; (80018a0 <HAL_UART_MspInit+0x74>)
 800187e:	a902      	add	r1, sp, #8
 8001880:	4620      	mov	r0, r4
 8001882:	f7fe fd61 	bl	8000348 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001886:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800188a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188c:	2300      	movs	r3, #0
 800188e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001892:	a902      	add	r1, sp, #8
 8001894:	4620      	mov	r0, r4
 8001896:	f7fe fd57 	bl	8000348 <HAL_GPIO_Init>
}
 800189a:	e7d2      	b.n	8001842 <HAL_UART_MspInit+0x16>
 800189c:	40004800 	.word	0x40004800
 80018a0:	40010c00 	.word	0x40010c00

080018a4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018a4:	4770      	bx	lr

080018a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a6:	e7fe      	b.n	80018a6 <HardFault_Handler>

080018a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a8:	e7fe      	b.n	80018a8 <MemManage_Handler>

080018aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018aa:	e7fe      	b.n	80018aa <BusFault_Handler>

080018ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ac:	e7fe      	b.n	80018ac <UsageFault_Handler>

080018ae <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ae:	4770      	bx	lr

080018b0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b0:	4770      	bx	lr

080018b2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b2:	4770      	bx	lr

080018b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b6:	f7fe fc81 	bl	80001bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ba:	bd08      	pop	{r3, pc}

080018bc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80018bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80018be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80018c2:	f7fe fe35 	bl	8000530 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80018c6:	bd08      	pop	{r3, pc}

080018c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018ca:	4802      	ldr	r0, [pc, #8]	; (80018d4 <TIM3_IRQHandler+0xc>)
 80018cc:	f7ff fafb 	bl	8000ec6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018d0:	bd08      	pop	{r3, pc}
 80018d2:	bf00      	nop
 80018d4:	2000007c 	.word	0x2000007c

080018d8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80018d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80018da:	4802      	ldr	r0, [pc, #8]	; (80018e4 <SPI1_IRQHandler+0xc>)
 80018dc:	f7ff f968 	bl	8000bb0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80018e0:	bd08      	pop	{r3, pc}
 80018e2:	bf00      	nop
 80018e4:	200000bc 	.word	0x200000bc

080018e8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80018e8:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <SystemInit+0x40>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	f042 0201 	orr.w	r2, r2, #1
 80018f0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80018f2:	6859      	ldr	r1, [r3, #4]
 80018f4:	4a0d      	ldr	r2, [pc, #52]	; (800192c <SystemInit+0x44>)
 80018f6:	400a      	ands	r2, r1
 80018f8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001900:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001904:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800190c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001914:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001916:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800191a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800191c:	4b04      	ldr	r3, [pc, #16]	; (8001930 <SystemInit+0x48>)
 800191e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001922:	609a      	str	r2, [r3, #8]
#endif 
}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000
 800192c:	f8ff0000 	.word	0xf8ff0000
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001934:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001936:	e003      	b.n	8001940 <LoopCopyDataInit>

08001938 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800193a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800193c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800193e:	3104      	adds	r1, #4

08001940 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001940:	480a      	ldr	r0, [pc, #40]	; (800196c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001942:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001944:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001946:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001948:	d3f6      	bcc.n	8001938 <CopyDataInit>
  ldr r2, =_sbss
 800194a:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800194c:	e002      	b.n	8001954 <LoopFillZerobss>

0800194e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001950:	f842 3b04 	str.w	r3, [r2], #4

08001954 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001956:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001958:	d3f9      	bcc.n	800194e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800195a:	f7ff ffc5 	bl	80018e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800195e:	f000 f80f 	bl	8001980 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001962:	f7ff fe8b 	bl	800167c <main>
  bx lr
 8001966:	4770      	bx	lr
  ldr r3, =_sidata
 8001968:	08001a14 	.word	0x08001a14
  ldr r0, =_sdata
 800196c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001970:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001974:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001978:	20000114 	.word	0x20000114

0800197c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800197c:	e7fe      	b.n	800197c <ADC1_2_IRQHandler>
	...

08001980 <__libc_init_array>:
 8001980:	b570      	push	{r4, r5, r6, lr}
 8001982:	2500      	movs	r5, #0
 8001984:	4e0c      	ldr	r6, [pc, #48]	; (80019b8 <__libc_init_array+0x38>)
 8001986:	4c0d      	ldr	r4, [pc, #52]	; (80019bc <__libc_init_array+0x3c>)
 8001988:	1ba4      	subs	r4, r4, r6
 800198a:	10a4      	asrs	r4, r4, #2
 800198c:	42a5      	cmp	r5, r4
 800198e:	d109      	bne.n	80019a4 <__libc_init_array+0x24>
 8001990:	f000 f81a 	bl	80019c8 <_init>
 8001994:	2500      	movs	r5, #0
 8001996:	4e0a      	ldr	r6, [pc, #40]	; (80019c0 <__libc_init_array+0x40>)
 8001998:	4c0a      	ldr	r4, [pc, #40]	; (80019c4 <__libc_init_array+0x44>)
 800199a:	1ba4      	subs	r4, r4, r6
 800199c:	10a4      	asrs	r4, r4, #2
 800199e:	42a5      	cmp	r5, r4
 80019a0:	d105      	bne.n	80019ae <__libc_init_array+0x2e>
 80019a2:	bd70      	pop	{r4, r5, r6, pc}
 80019a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019a8:	4798      	blx	r3
 80019aa:	3501      	adds	r5, #1
 80019ac:	e7ee      	b.n	800198c <__libc_init_array+0xc>
 80019ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019b2:	4798      	blx	r3
 80019b4:	3501      	adds	r5, #1
 80019b6:	e7f2      	b.n	800199e <__libc_init_array+0x1e>
 80019b8:	08001a0c 	.word	0x08001a0c
 80019bc:	08001a0c 	.word	0x08001a0c
 80019c0:	08001a0c 	.word	0x08001a0c
 80019c4:	08001a10 	.word	0x08001a10

080019c8 <_init>:
 80019c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ca:	bf00      	nop
 80019cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ce:	bc08      	pop	{r3}
 80019d0:	469e      	mov	lr, r3
 80019d2:	4770      	bx	lr

080019d4 <_fini>:
 80019d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019d6:	bf00      	nop
 80019d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019da:	bc08      	pop	{r3}
 80019dc:	469e      	mov	lr, r3
 80019de:	4770      	bx	lr
