
Mirage V1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c8c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001d98  08001d98  00011d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001dc4  08001dc4  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08001dc4  08001dc4  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001dc4  08001dc4  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001dc4  08001dc4  00011dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001dc8  08001dc8  00011dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08001dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000003c  08001e08  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08001e08  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a33  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024a4  00000000  00000000  00034a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00008fd3  00000000  00000000  00036f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000cc0  00000000  00000000  0003ff10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000c58  00000000  00000000  00040bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00015d25  00000000  00000000  00041828  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000a7aa  00000000  00000000  0005754d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00073755  00000000  00000000  00061cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000d544c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021b8  00000000  00000000  000d54c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001d80 	.word	0x08001d80

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	08001d80 	.word	0x08001d80

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b510      	push	{r4, lr}
 800014e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000150:	4b0e      	ldr	r3, [pc, #56]	; (800018c <HAL_InitTick+0x40>)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0c      	ldr	r2, [pc, #48]	; (8000190 <HAL_InitTick+0x44>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f8a2 	bl	80002ac <HAL_SYSTICK_Config>
 8000168:	b968      	cbnz	r0, 8000186 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016a:	2c0f      	cmp	r4, #15
 800016c:	d901      	bls.n	8000172 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800016e:	2001      	movs	r0, #1
 8000170:	e00a      	b.n	8000188 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000172:	2200      	movs	r2, #0
 8000174:	4621      	mov	r1, r4
 8000176:	f04f 30ff 	mov.w	r0, #4294967295
 800017a:	f000 f857 	bl	800022c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017e:	4b05      	ldr	r3, [pc, #20]	; (8000194 <HAL_InitTick+0x48>)
 8000180:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000182:	2000      	movs	r0, #0
 8000184:	e000      	b.n	8000188 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000186:	2001      	movs	r0, #1
}
 8000188:	bd10      	pop	{r4, pc}
 800018a:	bf00      	nop
 800018c:	20000000 	.word	0x20000000
 8000190:	20000038 	.word	0x20000038
 8000194:	20000004 	.word	0x20000004

08000198 <HAL_Init>:
{
 8000198:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019a:	4a07      	ldr	r2, [pc, #28]	; (80001b8 <HAL_Init+0x20>)
 800019c:	6813      	ldr	r3, [r2, #0]
 800019e:	f043 0310 	orr.w	r3, r3, #16
 80001a2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a4:	2003      	movs	r0, #3
 80001a6:	f000 f82f 	bl	8000208 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001aa:	2000      	movs	r0, #0
 80001ac:	f7ff ffce 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001b0:	f001 fc9c 	bl	8001aec <HAL_MspInit>
}
 80001b4:	2000      	movs	r0, #0
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	40022000 	.word	0x40022000

080001bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001bc:	4a03      	ldr	r2, [pc, #12]	; (80001cc <HAL_IncTick+0x10>)
 80001be:	6811      	ldr	r1, [r2, #0]
 80001c0:	4b03      	ldr	r3, [pc, #12]	; (80001d0 <HAL_IncTick+0x14>)
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	440b      	add	r3, r1
 80001c6:	6013      	str	r3, [r2, #0]
}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	2000006c 	.word	0x2000006c
 80001d0:	20000000 	.word	0x20000000

080001d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d4:	4b01      	ldr	r3, [pc, #4]	; (80001dc <HAL_GetTick+0x8>)
 80001d6:	6818      	ldr	r0, [r3, #0]
}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	2000006c 	.word	0x2000006c

080001e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001e0:	b538      	push	{r3, r4, r5, lr}
 80001e2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e4:	f7ff fff6 	bl	80001d4 <HAL_GetTick>
 80001e8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001ea:	f1b4 3fff 	cmp.w	r4, #4294967295
 80001ee:	d002      	beq.n	80001f6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <HAL_Delay+0x24>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f6:	f7ff ffed 	bl	80001d4 <HAL_GetTick>
 80001fa:	1b40      	subs	r0, r0, r5
 80001fc:	42a0      	cmp	r0, r4
 80001fe:	d3fa      	bcc.n	80001f6 <HAL_Delay+0x16>
  {
  }
}
 8000200:	bd38      	pop	{r3, r4, r5, pc}
 8000202:	bf00      	nop
 8000204:	20000000 	.word	0x20000000

08000208 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000208:	4a07      	ldr	r2, [pc, #28]	; (8000228 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800020a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000210:	041b      	lsls	r3, r3, #16
 8000212:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000214:	0200      	lsls	r0, r0, #8
 8000216:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800021a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 800021c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000220:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000224:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000226:	4770      	bx	lr
 8000228:	e000ed00 	.word	0xe000ed00

0800022c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800022c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800022e:	4b17      	ldr	r3, [pc, #92]	; (800028c <HAL_NVIC_SetPriority+0x60>)
 8000230:	68db      	ldr	r3, [r3, #12]
 8000232:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000236:	f1c3 0407 	rsb	r4, r3, #7
 800023a:	2c04      	cmp	r4, #4
 800023c:	bf28      	it	cs
 800023e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	1d1d      	adds	r5, r3, #4
 8000242:	2d06      	cmp	r5, #6
 8000244:	d918      	bls.n	8000278 <HAL_NVIC_SetPriority+0x4c>
 8000246:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000248:	f04f 35ff 	mov.w	r5, #4294967295
 800024c:	fa05 f404 	lsl.w	r4, r5, r4
 8000250:	ea21 0104 	bic.w	r1, r1, r4
 8000254:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000256:	fa05 f303 	lsl.w	r3, r5, r3
 800025a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000260:	2800      	cmp	r0, #0
 8000262:	db0b      	blt.n	800027c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000264:	0109      	lsls	r1, r1, #4
 8000266:	b2c9      	uxtb	r1, r1
 8000268:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800026c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000270:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000274:	bc30      	pop	{r4, r5}
 8000276:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000278:	2300      	movs	r3, #0
 800027a:	e7e5      	b.n	8000248 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	f000 000f 	and.w	r0, r0, #15
 8000280:	0109      	lsls	r1, r1, #4
 8000282:	b2c9      	uxtb	r1, r1
 8000284:	4b02      	ldr	r3, [pc, #8]	; (8000290 <HAL_NVIC_SetPriority+0x64>)
 8000286:	5419      	strb	r1, [r3, r0]
 8000288:	e7f4      	b.n	8000274 <HAL_NVIC_SetPriority+0x48>
 800028a:	bf00      	nop
 800028c:	e000ed00 	.word	0xe000ed00
 8000290:	e000ed14 	.word	0xe000ed14

08000294 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000294:	f000 021f 	and.w	r2, r0, #31
 8000298:	0940      	lsrs	r0, r0, #5
 800029a:	2301      	movs	r3, #1
 800029c:	4093      	lsls	r3, r2
 800029e:	4a02      	ldr	r2, [pc, #8]	; (80002a8 <HAL_NVIC_EnableIRQ+0x14>)
 80002a0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000e100 	.word	0xe000e100

080002ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002ac:	3801      	subs	r0, #1
 80002ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002b2:	d20a      	bcs.n	80002ca <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002b4:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <HAL_SYSTICK_Config+0x24>)
 80002b6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b8:	4a06      	ldr	r2, [pc, #24]	; (80002d4 <HAL_SYSTICK_Config+0x28>)
 80002ba:	21f0      	movs	r1, #240	; 0xf0
 80002bc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002c0:	2000      	movs	r0, #0
 80002c2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002c4:	2207      	movs	r2, #7
 80002c6:	601a      	str	r2, [r3, #0]
 80002c8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002ca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	e000e010 	.word	0xe000e010
 80002d4:	e000ed00 	.word	0xe000ed00

080002d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80002d8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80002da:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80002de:	2b02      	cmp	r3, #2
 80002e0:	d003      	beq.n	80002ea <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80002e2:	2304      	movs	r3, #4
 80002e4:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80002e6:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 80002e8:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80002ea:	6802      	ldr	r2, [r0, #0]
 80002ec:	6813      	ldr	r3, [r2, #0]
 80002ee:	f023 030e 	bic.w	r3, r3, #14
 80002f2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80002f4:	6802      	ldr	r2, [r0, #0]
 80002f6:	6813      	ldr	r3, [r2, #0]
 80002f8:	f023 0301 	bic.w	r3, r3, #1
 80002fc:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80002fe:	6803      	ldr	r3, [r0, #0]
 8000300:	4a19      	ldr	r2, [pc, #100]	; (8000368 <HAL_DMA_Abort_IT+0x90>)
 8000302:	4293      	cmp	r3, r2
 8000304:	d014      	beq.n	8000330 <HAL_DMA_Abort_IT+0x58>
 8000306:	3214      	adds	r2, #20
 8000308:	4293      	cmp	r3, r2
 800030a:	d01f      	beq.n	800034c <HAL_DMA_Abort_IT+0x74>
 800030c:	3214      	adds	r2, #20
 800030e:	4293      	cmp	r3, r2
 8000310:	d01e      	beq.n	8000350 <HAL_DMA_Abort_IT+0x78>
 8000312:	3214      	adds	r2, #20
 8000314:	4293      	cmp	r3, r2
 8000316:	d01e      	beq.n	8000356 <HAL_DMA_Abort_IT+0x7e>
 8000318:	3214      	adds	r2, #20
 800031a:	4293      	cmp	r3, r2
 800031c:	d01e      	beq.n	800035c <HAL_DMA_Abort_IT+0x84>
 800031e:	3214      	adds	r2, #20
 8000320:	4293      	cmp	r3, r2
 8000322:	d002      	beq.n	800032a <HAL_DMA_Abort_IT+0x52>
 8000324:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000328:	e003      	b.n	8000332 <HAL_DMA_Abort_IT+0x5a>
 800032a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800032e:	e000      	b.n	8000332 <HAL_DMA_Abort_IT+0x5a>
 8000330:	2201      	movs	r2, #1
 8000332:	4b0e      	ldr	r3, [pc, #56]	; (800036c <HAL_DMA_Abort_IT+0x94>)
 8000334:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000336:	2301      	movs	r3, #1
 8000338:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800033c:	2300      	movs	r3, #0
 800033e:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000342:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000344:	b16b      	cbz	r3, 8000362 <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 8000346:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000348:	2000      	movs	r0, #0
 800034a:	e7cd      	b.n	80002e8 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800034c:	2210      	movs	r2, #16
 800034e:	e7f0      	b.n	8000332 <HAL_DMA_Abort_IT+0x5a>
 8000350:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000354:	e7ed      	b.n	8000332 <HAL_DMA_Abort_IT+0x5a>
 8000356:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800035a:	e7ea      	b.n	8000332 <HAL_DMA_Abort_IT+0x5a>
 800035c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000360:	e7e7      	b.n	8000332 <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 8000362:	2000      	movs	r0, #0
 8000364:	e7c0      	b.n	80002e8 <HAL_DMA_Abort_IT+0x10>
 8000366:	bf00      	nop
 8000368:	40020008 	.word	0x40020008
 800036c:	40020000 	.word	0x40020000

08000370 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000370:	b4f0      	push	{r4, r5, r6, r7}
 8000372:	b082      	sub	sp, #8
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000374:	2600      	movs	r6, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000376:	4635      	mov	r5, r6
 8000378:	e0a1      	b.n	80004be <HAL_GPIO_Init+0x14e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800037a:	2c00      	cmp	r4, #0
 800037c:	d059      	beq.n	8000432 <HAL_GPIO_Init+0xc2>
 800037e:	2c01      	cmp	r4, #1
 8000380:	d100      	bne.n	8000384 <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000382:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000384:	2bff      	cmp	r3, #255	; 0xff
 8000386:	d868      	bhi.n	800045a <HAL_GPIO_Init+0xea>
 8000388:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800038a:	2bff      	cmp	r3, #255	; 0xff
 800038c:	d868      	bhi.n	8000460 <HAL_GPIO_Init+0xf0>
 800038e:	00ac      	lsls	r4, r5, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000390:	f8dc 2000 	ldr.w	r2, [ip]
 8000394:	270f      	movs	r7, #15
 8000396:	40a7      	lsls	r7, r4
 8000398:	ea22 0207 	bic.w	r2, r2, r7
 800039c:	fa06 f404 	lsl.w	r4, r6, r4
 80003a0:	4322      	orrs	r2, r4
 80003a2:	f8cc 2000 	str.w	r2, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003a6:	684a      	ldr	r2, [r1, #4]
 80003a8:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80003ac:	f000 8086 	beq.w	80004bc <HAL_GPIO_Init+0x14c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003b0:	4a5e      	ldr	r2, [pc, #376]	; (800052c <HAL_GPIO_Init+0x1bc>)
 80003b2:	6994      	ldr	r4, [r2, #24]
 80003b4:	f044 0401 	orr.w	r4, r4, #1
 80003b8:	6194      	str	r4, [r2, #24]
 80003ba:	6992      	ldr	r2, [r2, #24]
 80003bc:	f002 0201 	and.w	r2, r2, #1
 80003c0:	9201      	str	r2, [sp, #4]
 80003c2:	9a01      	ldr	r2, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
 80003c4:	08ac      	lsrs	r4, r5, #2
 80003c6:	1ca7      	adds	r7, r4, #2
 80003c8:	4a59      	ldr	r2, [pc, #356]	; (8000530 <HAL_GPIO_Init+0x1c0>)
 80003ca:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003ce:	f005 0703 	and.w	r7, r5, #3
 80003d2:	00bf      	lsls	r7, r7, #2
 80003d4:	f04f 0c0f 	mov.w	ip, #15
 80003d8:	fa0c fc07 	lsl.w	ip, ip, r7
 80003dc:	ea22 0c0c 	bic.w	ip, r2, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003e0:	4a54      	ldr	r2, [pc, #336]	; (8000534 <HAL_GPIO_Init+0x1c4>)
 80003e2:	4290      	cmp	r0, r2
 80003e4:	d042      	beq.n	800046c <HAL_GPIO_Init+0xfc>
 80003e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80003ea:	4290      	cmp	r0, r2
 80003ec:	d07f      	beq.n	80004ee <HAL_GPIO_Init+0x17e>
 80003ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80003f2:	4290      	cmp	r0, r2
 80003f4:	d07d      	beq.n	80004f2 <HAL_GPIO_Init+0x182>
 80003f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80003fa:	4290      	cmp	r0, r2
 80003fc:	d034      	beq.n	8000468 <HAL_GPIO_Init+0xf8>
 80003fe:	2204      	movs	r2, #4
 8000400:	e035      	b.n	800046e <HAL_GPIO_Init+0xfe>
      switch (GPIO_Init->Mode)
 8000402:	4f4d      	ldr	r7, [pc, #308]	; (8000538 <HAL_GPIO_Init+0x1c8>)
 8000404:	42bc      	cmp	r4, r7
 8000406:	d014      	beq.n	8000432 <HAL_GPIO_Init+0xc2>
 8000408:	d90b      	bls.n	8000422 <HAL_GPIO_Init+0xb2>
 800040a:	4f4c      	ldr	r7, [pc, #304]	; (800053c <HAL_GPIO_Init+0x1cc>)
 800040c:	42bc      	cmp	r4, r7
 800040e:	d010      	beq.n	8000432 <HAL_GPIO_Init+0xc2>
 8000410:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000414:	42bc      	cmp	r4, r7
 8000416:	d00c      	beq.n	8000432 <HAL_GPIO_Init+0xc2>
 8000418:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 800041c:	42bc      	cmp	r4, r7
 800041e:	d1b1      	bne.n	8000384 <HAL_GPIO_Init+0x14>
 8000420:	e007      	b.n	8000432 <HAL_GPIO_Init+0xc2>
 8000422:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000426:	42bc      	cmp	r4, r7
 8000428:	d003      	beq.n	8000432 <HAL_GPIO_Init+0xc2>
 800042a:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800042e:	42bc      	cmp	r4, r7
 8000430:	d1a8      	bne.n	8000384 <HAL_GPIO_Init+0x14>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000432:	688c      	ldr	r4, [r1, #8]
 8000434:	b17c      	cbz	r4, 8000456 <HAL_GPIO_Init+0xe6>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000436:	2c01      	cmp	r4, #1
 8000438:	d008      	beq.n	800044c <HAL_GPIO_Init+0xdc>
            GPIOx->BRR = ioposition;
 800043a:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800043c:	2608      	movs	r6, #8
 800043e:	e7a1      	b.n	8000384 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000440:	68ce      	ldr	r6, [r1, #12]
 8000442:	3608      	adds	r6, #8
          break;
 8000444:	e79e      	b.n	8000384 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000446:	68ce      	ldr	r6, [r1, #12]
 8000448:	360c      	adds	r6, #12
          break;
 800044a:	e79b      	b.n	8000384 <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 800044c:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800044e:	2608      	movs	r6, #8
 8000450:	e798      	b.n	8000384 <HAL_GPIO_Init+0x14>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000452:	2600      	movs	r6, #0
 8000454:	e796      	b.n	8000384 <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000456:	2604      	movs	r6, #4
 8000458:	e794      	b.n	8000384 <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800045a:	f100 0c04 	add.w	ip, r0, #4
 800045e:	e794      	b.n	800038a <HAL_GPIO_Init+0x1a>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000460:	f1a5 0408 	sub.w	r4, r5, #8
 8000464:	00a4      	lsls	r4, r4, #2
 8000466:	e793      	b.n	8000390 <HAL_GPIO_Init+0x20>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000468:	2203      	movs	r2, #3
 800046a:	e000      	b.n	800046e <HAL_GPIO_Init+0xfe>
 800046c:	2200      	movs	r2, #0
 800046e:	40ba      	lsls	r2, r7
 8000470:	ea42 020c 	orr.w	r2, r2, ip
        AFIO->EXTICR[position >> 2U] = temp;
 8000474:	3402      	adds	r4, #2
 8000476:	4f2e      	ldr	r7, [pc, #184]	; (8000530 <HAL_GPIO_Init+0x1c0>)
 8000478:	f847 2024 	str.w	r2, [r7, r4, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800047c:	684a      	ldr	r2, [r1, #4]
 800047e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8000482:	d038      	beq.n	80004f6 <HAL_GPIO_Init+0x186>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000484:	4c2e      	ldr	r4, [pc, #184]	; (8000540 <HAL_GPIO_Init+0x1d0>)
 8000486:	6822      	ldr	r2, [r4, #0]
 8000488:	431a      	orrs	r2, r3
 800048a:	6022      	str	r2, [r4, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800048c:	684a      	ldr	r2, [r1, #4]
 800048e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000492:	d036      	beq.n	8000502 <HAL_GPIO_Init+0x192>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000494:	4c2a      	ldr	r4, [pc, #168]	; (8000540 <HAL_GPIO_Init+0x1d0>)
 8000496:	6862      	ldr	r2, [r4, #4]
 8000498:	431a      	orrs	r2, r3
 800049a:	6062      	str	r2, [r4, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800049c:	684a      	ldr	r2, [r1, #4]
 800049e:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 80004a2:	d034      	beq.n	800050e <HAL_GPIO_Init+0x19e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80004a4:	4c26      	ldr	r4, [pc, #152]	; (8000540 <HAL_GPIO_Init+0x1d0>)
 80004a6:	68a2      	ldr	r2, [r4, #8]
 80004a8:	431a      	orrs	r2, r3
 80004aa:	60a2      	str	r2, [r4, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004ac:	684a      	ldr	r2, [r1, #4]
 80004ae:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 80004b2:	d032      	beq.n	800051a <HAL_GPIO_Init+0x1aa>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80004b4:	4c22      	ldr	r4, [pc, #136]	; (8000540 <HAL_GPIO_Init+0x1d0>)
 80004b6:	68e2      	ldr	r2, [r4, #12]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	60e3      	str	r3, [r4, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80004bc:	3501      	adds	r5, #1
 80004be:	2d0f      	cmp	r5, #15
 80004c0:	d831      	bhi.n	8000526 <HAL_GPIO_Init+0x1b6>
    ioposition = (0x01U << position);
 80004c2:	2201      	movs	r2, #1
 80004c4:	40aa      	lsls	r2, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80004c6:	680b      	ldr	r3, [r1, #0]
 80004c8:	4013      	ands	r3, r2
    if (iocurrent == ioposition)
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d1f6      	bne.n	80004bc <HAL_GPIO_Init+0x14c>
      switch (GPIO_Init->Mode)
 80004ce:	684c      	ldr	r4, [r1, #4]
 80004d0:	2c12      	cmp	r4, #18
 80004d2:	d0b8      	beq.n	8000446 <HAL_GPIO_Init+0xd6>
 80004d4:	d895      	bhi.n	8000402 <HAL_GPIO_Init+0x92>
 80004d6:	2c02      	cmp	r4, #2
 80004d8:	d0b2      	beq.n	8000440 <HAL_GPIO_Init+0xd0>
 80004da:	f67f af4e 	bls.w	800037a <HAL_GPIO_Init+0xa>
 80004de:	2c03      	cmp	r4, #3
 80004e0:	d0b7      	beq.n	8000452 <HAL_GPIO_Init+0xe2>
 80004e2:	2c11      	cmp	r4, #17
 80004e4:	f47f af4e 	bne.w	8000384 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004e8:	68ce      	ldr	r6, [r1, #12]
 80004ea:	3604      	adds	r6, #4
          break;
 80004ec:	e74a      	b.n	8000384 <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004ee:	2201      	movs	r2, #1
 80004f0:	e7bd      	b.n	800046e <HAL_GPIO_Init+0xfe>
 80004f2:	2202      	movs	r2, #2
 80004f4:	e7bb      	b.n	800046e <HAL_GPIO_Init+0xfe>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80004f6:	4c12      	ldr	r4, [pc, #72]	; (8000540 <HAL_GPIO_Init+0x1d0>)
 80004f8:	6822      	ldr	r2, [r4, #0]
 80004fa:	ea22 0203 	bic.w	r2, r2, r3
 80004fe:	6022      	str	r2, [r4, #0]
 8000500:	e7c4      	b.n	800048c <HAL_GPIO_Init+0x11c>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000502:	4c0f      	ldr	r4, [pc, #60]	; (8000540 <HAL_GPIO_Init+0x1d0>)
 8000504:	6862      	ldr	r2, [r4, #4]
 8000506:	ea22 0203 	bic.w	r2, r2, r3
 800050a:	6062      	str	r2, [r4, #4]
 800050c:	e7c6      	b.n	800049c <HAL_GPIO_Init+0x12c>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800050e:	4c0c      	ldr	r4, [pc, #48]	; (8000540 <HAL_GPIO_Init+0x1d0>)
 8000510:	68a2      	ldr	r2, [r4, #8]
 8000512:	ea22 0203 	bic.w	r2, r2, r3
 8000516:	60a2      	str	r2, [r4, #8]
 8000518:	e7c8      	b.n	80004ac <HAL_GPIO_Init+0x13c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800051a:	4c09      	ldr	r4, [pc, #36]	; (8000540 <HAL_GPIO_Init+0x1d0>)
 800051c:	68e2      	ldr	r2, [r4, #12]
 800051e:	ea22 0303 	bic.w	r3, r2, r3
 8000522:	60e3      	str	r3, [r4, #12]
 8000524:	e7ca      	b.n	80004bc <HAL_GPIO_Init+0x14c>
        }
      }
    }
  }
}
 8000526:	b002      	add	sp, #8
 8000528:	bcf0      	pop	{r4, r5, r6, r7}
 800052a:	4770      	bx	lr
 800052c:	40021000 	.word	0x40021000
 8000530:	40010000 	.word	0x40010000
 8000534:	40010800 	.word	0x40010800
 8000538:	10210000 	.word	0x10210000
 800053c:	10310000 	.word	0x10310000
 8000540:	40010400 	.word	0x40010400

08000544 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000544:	b912      	cbnz	r2, 800054c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000546:	0409      	lsls	r1, r1, #16
 8000548:	6101      	str	r1, [r0, #16]
  }
}
 800054a:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 800054c:	6101      	str	r1, [r0, #16]
 800054e:	4770      	bx	lr

08000550 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000550:	68c3      	ldr	r3, [r0, #12]
 8000552:	4059      	eors	r1, r3
 8000554:	60c1      	str	r1, [r0, #12]
}
 8000556:	4770      	bx	lr

08000558 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000558:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800055a:	4b05      	ldr	r3, [pc, #20]	; (8000570 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	4203      	tst	r3, r0
 8000560:	d100      	bne.n	8000564 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8000562:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000564:	4b02      	ldr	r3, [pc, #8]	; (8000570 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000566:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000568:	f001 f9dc 	bl	8001924 <HAL_GPIO_EXTI_Callback>
}
 800056c:	e7f9      	b.n	8000562 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800056e:	bf00      	nop
 8000570:	40010400 	.word	0x40010400

08000574 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000574:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000576:	4b08      	ldr	r3, [pc, #32]	; (8000598 <RCC_Delay+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a08      	ldr	r2, [pc, #32]	; (800059c <RCC_Delay+0x28>)
 800057c:	fba2 2303 	umull	r2, r3, r2, r3
 8000580:	0a5b      	lsrs	r3, r3, #9
 8000582:	fb00 f003 	mul.w	r0, r0, r3
 8000586:	9001      	str	r0, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000588:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800058a:	9b01      	ldr	r3, [sp, #4]
 800058c:	1e5a      	subs	r2, r3, #1
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d1f9      	bne.n	8000588 <RCC_Delay+0x14>
}
 8000594:	b002      	add	sp, #8
 8000596:	4770      	bx	lr
 8000598:	20000038 	.word	0x20000038
 800059c:	10624dd3 	.word	0x10624dd3

080005a0 <HAL_RCC_OscConfig>:
{
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005a6:	6803      	ldr	r3, [r0, #0]
 80005a8:	f013 0f01 	tst.w	r3, #1
 80005ac:	d02c      	beq.n	8000608 <HAL_RCC_OscConfig+0x68>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80005ae:	4bab      	ldr	r3, [pc, #684]	; (800085c <HAL_RCC_OscConfig+0x2bc>)
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	f003 030c 	and.w	r3, r3, #12
 80005b6:	2b04      	cmp	r3, #4
 80005b8:	d01d      	beq.n	80005f6 <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005ba:	4ba8      	ldr	r3, [pc, #672]	; (800085c <HAL_RCC_OscConfig+0x2bc>)
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	f003 030c 	and.w	r3, r3, #12
 80005c2:	2b08      	cmp	r3, #8
 80005c4:	d012      	beq.n	80005ec <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005c6:	6863      	ldr	r3, [r4, #4]
 80005c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005cc:	d041      	beq.n	8000652 <HAL_RCC_OscConfig+0xb2>
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d155      	bne.n	800067e <HAL_RCC_OscConfig+0xde>
 80005d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80005d6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	e037      	b.n	800065c <HAL_RCC_OscConfig+0xbc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005ec:	4b9b      	ldr	r3, [pc, #620]	; (800085c <HAL_RCC_OscConfig+0x2bc>)
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80005f4:	d0e7      	beq.n	80005c6 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005f6:	4b99      	ldr	r3, [pc, #612]	; (800085c <HAL_RCC_OscConfig+0x2bc>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80005fe:	d003      	beq.n	8000608 <HAL_RCC_OscConfig+0x68>
 8000600:	6863      	ldr	r3, [r4, #4]
 8000602:	2b00      	cmp	r3, #0
 8000604:	f000 81ae 	beq.w	8000964 <HAL_RCC_OscConfig+0x3c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000608:	6823      	ldr	r3, [r4, #0]
 800060a:	f013 0f02 	tst.w	r3, #2
 800060e:	d076      	beq.n	80006fe <HAL_RCC_OscConfig+0x15e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000610:	4b92      	ldr	r3, [pc, #584]	; (800085c <HAL_RCC_OscConfig+0x2bc>)
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	f013 0f0c 	tst.w	r3, #12
 8000618:	d05f      	beq.n	80006da <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800061a:	4b90      	ldr	r3, [pc, #576]	; (800085c <HAL_RCC_OscConfig+0x2bc>)
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	f003 030c 	and.w	r3, r3, #12
 8000622:	2b08      	cmp	r3, #8
 8000624:	d054      	beq.n	80006d0 <HAL_RCC_OscConfig+0x130>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000626:	6923      	ldr	r3, [r4, #16]
 8000628:	2b00      	cmp	r3, #0
 800062a:	f000 808a 	beq.w	8000742 <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_ENABLE();
 800062e:	4b8c      	ldr	r3, [pc, #560]	; (8000860 <HAL_RCC_OscConfig+0x2c0>)
 8000630:	2201      	movs	r2, #1
 8000632:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000634:	f7ff fdce 	bl	80001d4 <HAL_GetTick>
 8000638:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800063a:	4b88      	ldr	r3, [pc, #544]	; (800085c <HAL_RCC_OscConfig+0x2bc>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f013 0f02 	tst.w	r3, #2
 8000642:	d175      	bne.n	8000730 <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000644:	f7ff fdc6 	bl	80001d4 <HAL_GetTick>
 8000648:	1b40      	subs	r0, r0, r5
 800064a:	2802      	cmp	r0, #2
 800064c:	d9f5      	bls.n	800063a <HAL_RCC_OscConfig+0x9a>
            return HAL_TIMEOUT;
 800064e:	2003      	movs	r0, #3
 8000650:	e18b      	b.n	800096a <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000652:	4a82      	ldr	r2, [pc, #520]	; (800085c <HAL_RCC_OscConfig+0x2bc>)
 8000654:	6813      	ldr	r3, [r2, #0]
 8000656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800065a:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800065c:	6863      	ldr	r3, [r4, #4]
 800065e:	b343      	cbz	r3, 80006b2 <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 8000660:	f7ff fdb8 	bl	80001d4 <HAL_GetTick>
 8000664:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000666:	4b7d      	ldr	r3, [pc, #500]	; (800085c <HAL_RCC_OscConfig+0x2bc>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800066e:	d1cb      	bne.n	8000608 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000670:	f7ff fdb0 	bl	80001d4 <HAL_GetTick>
 8000674:	1b40      	subs	r0, r0, r5
 8000676:	2864      	cmp	r0, #100	; 0x64
 8000678:	d9f5      	bls.n	8000666 <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 800067a:	2003      	movs	r0, #3
 800067c:	e175      	b.n	800096a <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800067e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000682:	d009      	beq.n	8000698 <HAL_RCC_OscConfig+0xf8>
 8000684:	4b75      	ldr	r3, [pc, #468]	; (800085c <HAL_RCC_OscConfig+0x2bc>)
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	e7e1      	b.n	800065c <HAL_RCC_OscConfig+0xbc>
 8000698:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800069c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	e7d4      	b.n	800065c <HAL_RCC_OscConfig+0xbc>
        tickstart = HAL_GetTick();
 80006b2:	f7ff fd8f 	bl	80001d4 <HAL_GetTick>
 80006b6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006b8:	4b68      	ldr	r3, [pc, #416]	; (800085c <HAL_RCC_OscConfig+0x2bc>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80006c0:	d0a2      	beq.n	8000608 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006c2:	f7ff fd87 	bl	80001d4 <HAL_GetTick>
 80006c6:	1b40      	subs	r0, r0, r5
 80006c8:	2864      	cmp	r0, #100	; 0x64
 80006ca:	d9f5      	bls.n	80006b8 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 80006cc:	2003      	movs	r0, #3
 80006ce:	e14c      	b.n	800096a <HAL_RCC_OscConfig+0x3ca>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80006d0:	4b62      	ldr	r3, [pc, #392]	; (800085c <HAL_RCC_OscConfig+0x2bc>)
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80006d8:	d1a5      	bne.n	8000626 <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006da:	4b60      	ldr	r3, [pc, #384]	; (800085c <HAL_RCC_OscConfig+0x2bc>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f013 0f02 	tst.w	r3, #2
 80006e2:	d004      	beq.n	80006ee <HAL_RCC_OscConfig+0x14e>
 80006e4:	6923      	ldr	r3, [r4, #16]
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d001      	beq.n	80006ee <HAL_RCC_OscConfig+0x14e>
        return HAL_ERROR;
 80006ea:	2001      	movs	r0, #1
 80006ec:	e13d      	b.n	800096a <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006ee:	4a5b      	ldr	r2, [pc, #364]	; (800085c <HAL_RCC_OscConfig+0x2bc>)
 80006f0:	6813      	ldr	r3, [r2, #0]
 80006f2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80006f6:	6961      	ldr	r1, [r4, #20]
 80006f8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80006fc:	6013      	str	r3, [r2, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80006fe:	6823      	ldr	r3, [r4, #0]
 8000700:	f013 0f08 	tst.w	r3, #8
 8000704:	d032      	beq.n	800076c <HAL_RCC_OscConfig+0x1cc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000706:	69a3      	ldr	r3, [r4, #24]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d05b      	beq.n	80007c4 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_LSI_ENABLE();
 800070c:	4b55      	ldr	r3, [pc, #340]	; (8000864 <HAL_RCC_OscConfig+0x2c4>)
 800070e:	2201      	movs	r2, #1
 8000710:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000712:	f7ff fd5f 	bl	80001d4 <HAL_GetTick>
 8000716:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000718:	4b50      	ldr	r3, [pc, #320]	; (800085c <HAL_RCC_OscConfig+0x2bc>)
 800071a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800071c:	f013 0f02 	tst.w	r3, #2
 8000720:	d121      	bne.n	8000766 <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000722:	f7ff fd57 	bl	80001d4 <HAL_GetTick>
 8000726:	1b40      	subs	r0, r0, r5
 8000728:	2802      	cmp	r0, #2
 800072a:	d9f5      	bls.n	8000718 <HAL_RCC_OscConfig+0x178>
          return HAL_TIMEOUT;
 800072c:	2003      	movs	r0, #3
 800072e:	e11c      	b.n	800096a <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000730:	4a4a      	ldr	r2, [pc, #296]	; (800085c <HAL_RCC_OscConfig+0x2bc>)
 8000732:	6813      	ldr	r3, [r2, #0]
 8000734:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000738:	6961      	ldr	r1, [r4, #20]
 800073a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	e7dd      	b.n	80006fe <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 8000742:	4b47      	ldr	r3, [pc, #284]	; (8000860 <HAL_RCC_OscConfig+0x2c0>)
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000748:	f7ff fd44 	bl	80001d4 <HAL_GetTick>
 800074c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800074e:	4b43      	ldr	r3, [pc, #268]	; (800085c <HAL_RCC_OscConfig+0x2bc>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f013 0f02 	tst.w	r3, #2
 8000756:	d0d2      	beq.n	80006fe <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000758:	f7ff fd3c 	bl	80001d4 <HAL_GetTick>
 800075c:	1b40      	subs	r0, r0, r5
 800075e:	2802      	cmp	r0, #2
 8000760:	d9f5      	bls.n	800074e <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 8000762:	2003      	movs	r0, #3
 8000764:	e101      	b.n	800096a <HAL_RCC_OscConfig+0x3ca>
      RCC_Delay(1);
 8000766:	2001      	movs	r0, #1
 8000768:	f7ff ff04 	bl	8000574 <RCC_Delay>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800076c:	6823      	ldr	r3, [r4, #0]
 800076e:	f013 0f04 	tst.w	r3, #4
 8000772:	f000 8097 	beq.w	80008a4 <HAL_RCC_OscConfig+0x304>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000776:	4b39      	ldr	r3, [pc, #228]	; (800085c <HAL_RCC_OscConfig+0x2bc>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800077e:	d133      	bne.n	80007e8 <HAL_RCC_OscConfig+0x248>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000780:	4b36      	ldr	r3, [pc, #216]	; (800085c <HAL_RCC_OscConfig+0x2bc>)
 8000782:	69da      	ldr	r2, [r3, #28]
 8000784:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000788:	61da      	str	r2, [r3, #28]
 800078a:	69db      	ldr	r3, [r3, #28]
 800078c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000790:	9301      	str	r3, [sp, #4]
 8000792:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000794:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000796:	4b34      	ldr	r3, [pc, #208]	; (8000868 <HAL_RCC_OscConfig+0x2c8>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800079e:	d025      	beq.n	80007ec <HAL_RCC_OscConfig+0x24c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007a0:	68e3      	ldr	r3, [r4, #12]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d036      	beq.n	8000814 <HAL_RCC_OscConfig+0x274>
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d14c      	bne.n	8000844 <HAL_RCC_OscConfig+0x2a4>
 80007aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80007ae:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80007b2:	6a1a      	ldr	r2, [r3, #32]
 80007b4:	f022 0201 	bic.w	r2, r2, #1
 80007b8:	621a      	str	r2, [r3, #32]
 80007ba:	6a1a      	ldr	r2, [r3, #32]
 80007bc:	f022 0204 	bic.w	r2, r2, #4
 80007c0:	621a      	str	r2, [r3, #32]
 80007c2:	e02c      	b.n	800081e <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSI_DISABLE();
 80007c4:	4b27      	ldr	r3, [pc, #156]	; (8000864 <HAL_RCC_OscConfig+0x2c4>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80007ca:	f7ff fd03 	bl	80001d4 <HAL_GetTick>
 80007ce:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007d0:	4b22      	ldr	r3, [pc, #136]	; (800085c <HAL_RCC_OscConfig+0x2bc>)
 80007d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007d4:	f013 0f02 	tst.w	r3, #2
 80007d8:	d0c8      	beq.n	800076c <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007da:	f7ff fcfb 	bl	80001d4 <HAL_GetTick>
 80007de:	1b40      	subs	r0, r0, r5
 80007e0:	2802      	cmp	r0, #2
 80007e2:	d9f5      	bls.n	80007d0 <HAL_RCC_OscConfig+0x230>
          return HAL_TIMEOUT;
 80007e4:	2003      	movs	r0, #3
 80007e6:	e0c0      	b.n	800096a <HAL_RCC_OscConfig+0x3ca>
    FlagStatus       pwrclkchanged = RESET;
 80007e8:	2500      	movs	r5, #0
 80007ea:	e7d4      	b.n	8000796 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80007ec:	4a1e      	ldr	r2, [pc, #120]	; (8000868 <HAL_RCC_OscConfig+0x2c8>)
 80007ee:	6813      	ldr	r3, [r2, #0]
 80007f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007f4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80007f6:	f7ff fced 	bl	80001d4 <HAL_GetTick>
 80007fa:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <HAL_RCC_OscConfig+0x2c8>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000804:	d1cc      	bne.n	80007a0 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000806:	f7ff fce5 	bl	80001d4 <HAL_GetTick>
 800080a:	1b80      	subs	r0, r0, r6
 800080c:	2864      	cmp	r0, #100	; 0x64
 800080e:	d9f5      	bls.n	80007fc <HAL_RCC_OscConfig+0x25c>
          return HAL_TIMEOUT;
 8000810:	2003      	movs	r0, #3
 8000812:	e0aa      	b.n	800096a <HAL_RCC_OscConfig+0x3ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000814:	4a11      	ldr	r2, [pc, #68]	; (800085c <HAL_RCC_OscConfig+0x2bc>)
 8000816:	6a13      	ldr	r3, [r2, #32]
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800081e:	68e3      	ldr	r3, [r4, #12]
 8000820:	b373      	cbz	r3, 8000880 <HAL_RCC_OscConfig+0x2e0>
      tickstart = HAL_GetTick();
 8000822:	f7ff fcd7 	bl	80001d4 <HAL_GetTick>
 8000826:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <HAL_RCC_OscConfig+0x2bc>)
 800082a:	6a1b      	ldr	r3, [r3, #32]
 800082c:	f013 0f02 	tst.w	r3, #2
 8000830:	d137      	bne.n	80008a2 <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000832:	f7ff fccf 	bl	80001d4 <HAL_GetTick>
 8000836:	1b80      	subs	r0, r0, r6
 8000838:	f241 3388 	movw	r3, #5000	; 0x1388
 800083c:	4298      	cmp	r0, r3
 800083e:	d9f3      	bls.n	8000828 <HAL_RCC_OscConfig+0x288>
          return HAL_TIMEOUT;
 8000840:	2003      	movs	r0, #3
 8000842:	e092      	b.n	800096a <HAL_RCC_OscConfig+0x3ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000844:	2b05      	cmp	r3, #5
 8000846:	d011      	beq.n	800086c <HAL_RCC_OscConfig+0x2cc>
 8000848:	4b04      	ldr	r3, [pc, #16]	; (800085c <HAL_RCC_OscConfig+0x2bc>)
 800084a:	6a1a      	ldr	r2, [r3, #32]
 800084c:	f022 0201 	bic.w	r2, r2, #1
 8000850:	621a      	str	r2, [r3, #32]
 8000852:	6a1a      	ldr	r2, [r3, #32]
 8000854:	f022 0204 	bic.w	r2, r2, #4
 8000858:	621a      	str	r2, [r3, #32]
 800085a:	e7e0      	b.n	800081e <HAL_RCC_OscConfig+0x27e>
 800085c:	40021000 	.word	0x40021000
 8000860:	42420000 	.word	0x42420000
 8000864:	42420480 	.word	0x42420480
 8000868:	40007000 	.word	0x40007000
 800086c:	4b41      	ldr	r3, [pc, #260]	; (8000974 <HAL_RCC_OscConfig+0x3d4>)
 800086e:	6a1a      	ldr	r2, [r3, #32]
 8000870:	f042 0204 	orr.w	r2, r2, #4
 8000874:	621a      	str	r2, [r3, #32]
 8000876:	6a1a      	ldr	r2, [r3, #32]
 8000878:	f042 0201 	orr.w	r2, r2, #1
 800087c:	621a      	str	r2, [r3, #32]
 800087e:	e7ce      	b.n	800081e <HAL_RCC_OscConfig+0x27e>
      tickstart = HAL_GetTick();
 8000880:	f7ff fca8 	bl	80001d4 <HAL_GetTick>
 8000884:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000886:	4b3b      	ldr	r3, [pc, #236]	; (8000974 <HAL_RCC_OscConfig+0x3d4>)
 8000888:	6a1b      	ldr	r3, [r3, #32]
 800088a:	f013 0f02 	tst.w	r3, #2
 800088e:	d008      	beq.n	80008a2 <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000890:	f7ff fca0 	bl	80001d4 <HAL_GetTick>
 8000894:	1b80      	subs	r0, r0, r6
 8000896:	f241 3388 	movw	r3, #5000	; 0x1388
 800089a:	4298      	cmp	r0, r3
 800089c:	d9f3      	bls.n	8000886 <HAL_RCC_OscConfig+0x2e6>
          return HAL_TIMEOUT;
 800089e:	2003      	movs	r0, #3
 80008a0:	e063      	b.n	800096a <HAL_RCC_OscConfig+0x3ca>
    if(pwrclkchanged == SET)
 80008a2:	b9e5      	cbnz	r5, 80008de <HAL_RCC_OscConfig+0x33e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008a4:	69e3      	ldr	r3, [r4, #28]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d05e      	beq.n	8000968 <HAL_RCC_OscConfig+0x3c8>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008aa:	4a32      	ldr	r2, [pc, #200]	; (8000974 <HAL_RCC_OscConfig+0x3d4>)
 80008ac:	6852      	ldr	r2, [r2, #4]
 80008ae:	f002 020c 	and.w	r2, r2, #12
 80008b2:	2a08      	cmp	r2, #8
 80008b4:	d05b      	beq.n	800096e <HAL_RCC_OscConfig+0x3ce>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	d017      	beq.n	80008ea <HAL_RCC_OscConfig+0x34a>
        __HAL_RCC_PLL_DISABLE();
 80008ba:	4b2f      	ldr	r3, [pc, #188]	; (8000978 <HAL_RCC_OscConfig+0x3d8>)
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008c0:	f7ff fc88 	bl	80001d4 <HAL_GetTick>
 80008c4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008c6:	4b2b      	ldr	r3, [pc, #172]	; (8000974 <HAL_RCC_OscConfig+0x3d4>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80008ce:	d047      	beq.n	8000960 <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008d0:	f7ff fc80 	bl	80001d4 <HAL_GetTick>
 80008d4:	1b00      	subs	r0, r0, r4
 80008d6:	2802      	cmp	r0, #2
 80008d8:	d9f5      	bls.n	80008c6 <HAL_RCC_OscConfig+0x326>
            return HAL_TIMEOUT;
 80008da:	2003      	movs	r0, #3
 80008dc:	e045      	b.n	800096a <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 80008de:	4a25      	ldr	r2, [pc, #148]	; (8000974 <HAL_RCC_OscConfig+0x3d4>)
 80008e0:	69d3      	ldr	r3, [r2, #28]
 80008e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80008e6:	61d3      	str	r3, [r2, #28]
 80008e8:	e7dc      	b.n	80008a4 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_DISABLE();
 80008ea:	4b23      	ldr	r3, [pc, #140]	; (8000978 <HAL_RCC_OscConfig+0x3d8>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008f0:	f7ff fc70 	bl	80001d4 <HAL_GetTick>
 80008f4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008f6:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <HAL_RCC_OscConfig+0x3d4>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80008fe:	d006      	beq.n	800090e <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000900:	f7ff fc68 	bl	80001d4 <HAL_GetTick>
 8000904:	1b40      	subs	r0, r0, r5
 8000906:	2802      	cmp	r0, #2
 8000908:	d9f5      	bls.n	80008f6 <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 800090a:	2003      	movs	r0, #3
 800090c:	e02d      	b.n	800096a <HAL_RCC_OscConfig+0x3ca>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800090e:	6a23      	ldr	r3, [r4, #32]
 8000910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000914:	d01a      	beq.n	800094c <HAL_RCC_OscConfig+0x3ac>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000916:	4917      	ldr	r1, [pc, #92]	; (8000974 <HAL_RCC_OscConfig+0x3d4>)
 8000918:	684b      	ldr	r3, [r1, #4]
 800091a:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800091e:	6a22      	ldr	r2, [r4, #32]
 8000920:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000922:	4302      	orrs	r2, r0
 8000924:	4313      	orrs	r3, r2
 8000926:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <HAL_RCC_OscConfig+0x3d8>)
 800092a:	2201      	movs	r2, #1
 800092c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800092e:	f7ff fc51 	bl	80001d4 <HAL_GetTick>
 8000932:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <HAL_RCC_OscConfig+0x3d4>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800093c:	d10e      	bne.n	800095c <HAL_RCC_OscConfig+0x3bc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800093e:	f7ff fc49 	bl	80001d4 <HAL_GetTick>
 8000942:	1b00      	subs	r0, r0, r4
 8000944:	2802      	cmp	r0, #2
 8000946:	d9f5      	bls.n	8000934 <HAL_RCC_OscConfig+0x394>
            return HAL_TIMEOUT;
 8000948:	2003      	movs	r0, #3
 800094a:	e00e      	b.n	800096a <HAL_RCC_OscConfig+0x3ca>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800094c:	4a09      	ldr	r2, [pc, #36]	; (8000974 <HAL_RCC_OscConfig+0x3d4>)
 800094e:	6853      	ldr	r3, [r2, #4]
 8000950:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000954:	68a1      	ldr	r1, [r4, #8]
 8000956:	430b      	orrs	r3, r1
 8000958:	6053      	str	r3, [r2, #4]
 800095a:	e7dc      	b.n	8000916 <HAL_RCC_OscConfig+0x376>
  return HAL_OK;
 800095c:	2000      	movs	r0, #0
 800095e:	e004      	b.n	800096a <HAL_RCC_OscConfig+0x3ca>
 8000960:	2000      	movs	r0, #0
 8000962:	e002      	b.n	800096a <HAL_RCC_OscConfig+0x3ca>
        return HAL_ERROR;
 8000964:	2001      	movs	r0, #1
 8000966:	e000      	b.n	800096a <HAL_RCC_OscConfig+0x3ca>
  return HAL_OK;
 8000968:	2000      	movs	r0, #0
}
 800096a:	b002      	add	sp, #8
 800096c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800096e:	2001      	movs	r0, #1
 8000970:	e7fb      	b.n	800096a <HAL_RCC_OscConfig+0x3ca>
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000
 8000978:	42420060 	.word	0x42420060

0800097c <HAL_RCC_GetSysClockFreq>:
{
 800097c:	b410      	push	{r4}
 800097e:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000980:	4c16      	ldr	r4, [pc, #88]	; (80009dc <HAL_RCC_GetSysClockFreq+0x60>)
 8000982:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000986:	f10d 0c18 	add.w	ip, sp, #24
 800098a:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800098e:	8a23      	ldrh	r3, [r4, #16]
 8000990:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <HAL_RCC_GetSysClockFreq+0x64>)
 8000996:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000998:	f003 020c 	and.w	r2, r3, #12
 800099c:	2a08      	cmp	r2, #8
 800099e:	d11a      	bne.n	80009d6 <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80009a0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80009a4:	4462      	add	r2, ip
 80009a6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80009aa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80009ae:	d105      	bne.n	80009bc <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80009b0:	480c      	ldr	r0, [pc, #48]	; (80009e4 <HAL_RCC_GetSysClockFreq+0x68>)
 80009b2:	fb00 f002 	mul.w	r0, r0, r2
}
 80009b6:	b007      	add	sp, #28
 80009b8:	bc10      	pop	{r4}
 80009ba:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <HAL_RCC_GetSysClockFreq+0x64>)
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80009c4:	4463      	add	r3, ip
 80009c6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80009ca:	4807      	ldr	r0, [pc, #28]	; (80009e8 <HAL_RCC_GetSysClockFreq+0x6c>)
 80009cc:	fb00 f002 	mul.w	r0, r0, r2
 80009d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80009d4:	e7ef      	b.n	80009b6 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 80009d6:	4804      	ldr	r0, [pc, #16]	; (80009e8 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80009d8:	e7ed      	b.n	80009b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80009da:	bf00      	nop
 80009dc:	08001d98 	.word	0x08001d98
 80009e0:	40021000 	.word	0x40021000
 80009e4:	003d0900 	.word	0x003d0900
 80009e8:	007a1200 	.word	0x007a1200

080009ec <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009ec:	4b62      	ldr	r3, [pc, #392]	; (8000b78 <HAL_RCC_ClockConfig+0x18c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f003 0307 	and.w	r3, r3, #7
 80009f4:	428b      	cmp	r3, r1
 80009f6:	d20c      	bcs.n	8000a12 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009f8:	4a5f      	ldr	r2, [pc, #380]	; (8000b78 <HAL_RCC_ClockConfig+0x18c>)
 80009fa:	6813      	ldr	r3, [r2, #0]
 80009fc:	f023 0307 	bic.w	r3, r3, #7
 8000a00:	430b      	orrs	r3, r1
 8000a02:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a04:	6813      	ldr	r3, [r2, #0]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	428b      	cmp	r3, r1
 8000a0c:	d001      	beq.n	8000a12 <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8000a0e:	2001      	movs	r0, #1
}
 8000a10:	4770      	bx	lr
{
 8000a12:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a14:	6803      	ldr	r3, [r0, #0]
 8000a16:	f013 0f02 	tst.w	r3, #2
 8000a1a:	d017      	beq.n	8000a4c <HAL_RCC_ClockConfig+0x60>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a1c:	f013 0f04 	tst.w	r3, #4
 8000a20:	d004      	beq.n	8000a2c <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000a22:	4a56      	ldr	r2, [pc, #344]	; (8000b7c <HAL_RCC_ClockConfig+0x190>)
 8000a24:	6853      	ldr	r3, [r2, #4]
 8000a26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000a2a:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a2c:	6803      	ldr	r3, [r0, #0]
 8000a2e:	f013 0f08 	tst.w	r3, #8
 8000a32:	d004      	beq.n	8000a3e <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000a34:	4a51      	ldr	r2, [pc, #324]	; (8000b7c <HAL_RCC_ClockConfig+0x190>)
 8000a36:	6853      	ldr	r3, [r2, #4]
 8000a38:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000a3c:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a3e:	4a4f      	ldr	r2, [pc, #316]	; (8000b7c <HAL_RCC_ClockConfig+0x190>)
 8000a40:	6853      	ldr	r3, [r2, #4]
 8000a42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a46:	6884      	ldr	r4, [r0, #8]
 8000a48:	4323      	orrs	r3, r4
 8000a4a:	6053      	str	r3, [r2, #4]
 8000a4c:	460d      	mov	r5, r1
 8000a4e:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a50:	6803      	ldr	r3, [r0, #0]
 8000a52:	f013 0f01 	tst.w	r3, #1
 8000a56:	d052      	beq.n	8000afe <HAL_RCC_ClockConfig+0x112>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a58:	6843      	ldr	r3, [r0, #4]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d023      	beq.n	8000aa6 <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	d028      	beq.n	8000ab4 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a62:	4a46      	ldr	r2, [pc, #280]	; (8000b7c <HAL_RCC_ClockConfig+0x190>)
 8000a64:	6812      	ldr	r2, [r2, #0]
 8000a66:	f012 0f02 	tst.w	r2, #2
 8000a6a:	f000 8082 	beq.w	8000b72 <HAL_RCC_ClockConfig+0x186>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a6e:	4943      	ldr	r1, [pc, #268]	; (8000b7c <HAL_RCC_ClockConfig+0x190>)
 8000a70:	684a      	ldr	r2, [r1, #4]
 8000a72:	f022 0203 	bic.w	r2, r2, #3
 8000a76:	4313      	orrs	r3, r2
 8000a78:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8000a7a:	f7ff fbab 	bl	80001d4 <HAL_GetTick>
 8000a7e:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a80:	6863      	ldr	r3, [r4, #4]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d01d      	beq.n	8000ac2 <HAL_RCC_ClockConfig+0xd6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	d02a      	beq.n	8000ae0 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a8a:	4b3c      	ldr	r3, [pc, #240]	; (8000b7c <HAL_RCC_ClockConfig+0x190>)
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	f013 0f0c 	tst.w	r3, #12
 8000a92:	d034      	beq.n	8000afe <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a94:	f7ff fb9e 	bl	80001d4 <HAL_GetTick>
 8000a98:	1b80      	subs	r0, r0, r6
 8000a9a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a9e:	4298      	cmp	r0, r3
 8000aa0:	d9f3      	bls.n	8000a8a <HAL_RCC_ClockConfig+0x9e>
          return HAL_TIMEOUT;
 8000aa2:	2003      	movs	r0, #3
 8000aa4:	e064      	b.n	8000b70 <HAL_RCC_ClockConfig+0x184>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aa6:	4a35      	ldr	r2, [pc, #212]	; (8000b7c <HAL_RCC_ClockConfig+0x190>)
 8000aa8:	6812      	ldr	r2, [r2, #0]
 8000aaa:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000aae:	d1de      	bne.n	8000a6e <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	e05d      	b.n	8000b70 <HAL_RCC_ClockConfig+0x184>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ab4:	4a31      	ldr	r2, [pc, #196]	; (8000b7c <HAL_RCC_ClockConfig+0x190>)
 8000ab6:	6812      	ldr	r2, [r2, #0]
 8000ab8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000abc:	d1d7      	bne.n	8000a6e <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8000abe:	2001      	movs	r0, #1
 8000ac0:	e056      	b.n	8000b70 <HAL_RCC_ClockConfig+0x184>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ac2:	4b2e      	ldr	r3, [pc, #184]	; (8000b7c <HAL_RCC_ClockConfig+0x190>)
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f003 030c 	and.w	r3, r3, #12
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	d017      	beq.n	8000afe <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ace:	f7ff fb81 	bl	80001d4 <HAL_GetTick>
 8000ad2:	1b80      	subs	r0, r0, r6
 8000ad4:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ad8:	4298      	cmp	r0, r3
 8000ada:	d9f2      	bls.n	8000ac2 <HAL_RCC_ClockConfig+0xd6>
          return HAL_TIMEOUT;
 8000adc:	2003      	movs	r0, #3
 8000ade:	e047      	b.n	8000b70 <HAL_RCC_ClockConfig+0x184>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ae0:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <HAL_RCC_ClockConfig+0x190>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f003 030c 	and.w	r3, r3, #12
 8000ae8:	2b08      	cmp	r3, #8
 8000aea:	d008      	beq.n	8000afe <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000aec:	f7ff fb72 	bl	80001d4 <HAL_GetTick>
 8000af0:	1b80      	subs	r0, r0, r6
 8000af2:	f241 3388 	movw	r3, #5000	; 0x1388
 8000af6:	4298      	cmp	r0, r3
 8000af8:	d9f2      	bls.n	8000ae0 <HAL_RCC_ClockConfig+0xf4>
          return HAL_TIMEOUT;
 8000afa:	2003      	movs	r0, #3
 8000afc:	e038      	b.n	8000b70 <HAL_RCC_ClockConfig+0x184>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000afe:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_RCC_ClockConfig+0x18c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	42ab      	cmp	r3, r5
 8000b08:	d90c      	bls.n	8000b24 <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b0a:	4a1b      	ldr	r2, [pc, #108]	; (8000b78 <HAL_RCC_ClockConfig+0x18c>)
 8000b0c:	6813      	ldr	r3, [r2, #0]
 8000b0e:	f023 0307 	bic.w	r3, r3, #7
 8000b12:	432b      	orrs	r3, r5
 8000b14:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b16:	6813      	ldr	r3, [r2, #0]
 8000b18:	f003 0307 	and.w	r3, r3, #7
 8000b1c:	42ab      	cmp	r3, r5
 8000b1e:	d001      	beq.n	8000b24 <HAL_RCC_ClockConfig+0x138>
      return HAL_ERROR;
 8000b20:	2001      	movs	r0, #1
 8000b22:	e025      	b.n	8000b70 <HAL_RCC_ClockConfig+0x184>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b24:	6823      	ldr	r3, [r4, #0]
 8000b26:	f013 0f04 	tst.w	r3, #4
 8000b2a:	d006      	beq.n	8000b3a <HAL_RCC_ClockConfig+0x14e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b2c:	4a13      	ldr	r2, [pc, #76]	; (8000b7c <HAL_RCC_ClockConfig+0x190>)
 8000b2e:	6853      	ldr	r3, [r2, #4]
 8000b30:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b34:	68e1      	ldr	r1, [r4, #12]
 8000b36:	430b      	orrs	r3, r1
 8000b38:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b3a:	6823      	ldr	r3, [r4, #0]
 8000b3c:	f013 0f08 	tst.w	r3, #8
 8000b40:	d007      	beq.n	8000b52 <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000b42:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <HAL_RCC_ClockConfig+0x190>)
 8000b44:	6853      	ldr	r3, [r2, #4]
 8000b46:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000b4a:	6921      	ldr	r1, [r4, #16]
 8000b4c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000b50:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000b52:	f7ff ff13 	bl	800097c <HAL_RCC_GetSysClockFreq>
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <HAL_RCC_ClockConfig+0x190>)
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000b5e:	4a08      	ldr	r2, [pc, #32]	; (8000b80 <HAL_RCC_ClockConfig+0x194>)
 8000b60:	5cd3      	ldrb	r3, [r2, r3]
 8000b62:	40d8      	lsrs	r0, r3
 8000b64:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <HAL_RCC_ClockConfig+0x198>)
 8000b66:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f7ff faef 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000b6e:	2000      	movs	r0, #0
}
 8000b70:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000b72:	2001      	movs	r0, #1
 8000b74:	e7fc      	b.n	8000b70 <HAL_RCC_ClockConfig+0x184>
 8000b76:	bf00      	nop
 8000b78:	40022000 	.word	0x40022000
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	08001dac 	.word	0x08001dac
 8000b84:	20000038 	.word	0x20000038

08000b88 <HAL_RCC_GetHCLKFreq>:
}
 8000b88:	4b01      	ldr	r3, [pc, #4]	; (8000b90 <HAL_RCC_GetHCLKFreq+0x8>)
 8000b8a:	6818      	ldr	r0, [r3, #0]
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000038 	.word	0x20000038

08000b94 <HAL_RCC_GetPCLK1Freq>:
{
 8000b94:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000b96:	f7ff fff7 	bl	8000b88 <HAL_RCC_GetHCLKFreq>
 8000b9a:	4b04      	ldr	r3, [pc, #16]	; (8000bac <HAL_RCC_GetPCLK1Freq+0x18>)
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000ba2:	4a03      	ldr	r2, [pc, #12]	; (8000bb0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000ba4:	5cd3      	ldrb	r3, [r2, r3]
}    
 8000ba6:	40d8      	lsrs	r0, r3
 8000ba8:	bd08      	pop	{r3, pc}
 8000baa:	bf00      	nop
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	08001dbc 	.word	0x08001dbc

08000bb4 <HAL_RCC_GetPCLK2Freq>:
{
 8000bb4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000bb6:	f7ff ffe7 	bl	8000b88 <HAL_RCC_GetHCLKFreq>
 8000bba:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <HAL_RCC_GetPCLK2Freq+0x18>)
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000bc2:	4a03      	ldr	r2, [pc, #12]	; (8000bd0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000bc4:	5cd3      	ldrb	r3, [r2, r3]
} 
 8000bc6:	40d8      	lsrs	r0, r3
 8000bc8:	bd08      	pop	{r3, pc}
 8000bca:	bf00      	nop
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	08001dbc 	.word	0x08001dbc

08000bd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8000bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bd6:	4605      	mov	r5, r0
 8000bd8:	460f      	mov	r7, r1
 8000bda:	4616      	mov	r6, r2
 8000bdc:	461c      	mov	r4, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000bde:	e03b      	b.n	8000c58 <SPI_WaitFlagStateUntilTimeout+0x84>
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000be0:	b12c      	cbz	r4, 8000bee <SPI_WaitFlagStateUntilTimeout+0x1a>
 8000be2:	f7ff faf7 	bl	80001d4 <HAL_GetTick>
 8000be6:	9b06      	ldr	r3, [sp, #24]
 8000be8:	1ac0      	subs	r0, r0, r3
 8000bea:	42a0      	cmp	r0, r4
 8000bec:	d334      	bcc.n	8000c58 <SPI_WaitFlagStateUntilTimeout+0x84>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000bee:	682a      	ldr	r2, [r5, #0]
 8000bf0:	6853      	ldr	r3, [r2, #4]
 8000bf2:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8000bf6:	6053      	str	r3, [r2, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000bf8:	686b      	ldr	r3, [r5, #4]
 8000bfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000bfe:	d00b      	beq.n	8000c18 <SPI_WaitFlagStateUntilTimeout+0x44>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000c00:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c06:	d014      	beq.n	8000c32 <SPI_WaitFlagStateUntilTimeout+0x5e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State= HAL_SPI_STATE_READY;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8000c0e:	2300      	movs	r3, #0
 8000c10:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 8000c14:	2003      	movs	r0, #3
 8000c16:	e027      	b.n	8000c68 <SPI_WaitFlagStateUntilTimeout+0x94>
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000c18:	68ab      	ldr	r3, [r5, #8]
 8000c1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c1e:	d002      	beq.n	8000c26 <SPI_WaitFlagStateUntilTimeout+0x52>
 8000c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c24:	d1ec      	bne.n	8000c00 <SPI_WaitFlagStateUntilTimeout+0x2c>
          __HAL_SPI_DISABLE(hspi);
 8000c26:	682a      	ldr	r2, [r5, #0]
 8000c28:	6813      	ldr	r3, [r2, #0]
 8000c2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c2e:	6013      	str	r3, [r2, #0]
 8000c30:	e7e6      	b.n	8000c00 <SPI_WaitFlagStateUntilTimeout+0x2c>
          SPI_RESET_CRC(hspi);
 8000c32:	682a      	ldr	r2, [r5, #0]
 8000c34:	6813      	ldr	r3, [r2, #0]
 8000c36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c3a:	041b      	lsls	r3, r3, #16
 8000c3c:	0c1b      	lsrs	r3, r3, #16
 8000c3e:	6013      	str	r3, [r2, #0]
 8000c40:	682a      	ldr	r2, [r5, #0]
 8000c42:	6813      	ldr	r3, [r2, #0]
 8000c44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c48:	6013      	str	r3, [r2, #0]
 8000c4a:	e7dd      	b.n	8000c08 <SPI_WaitFlagStateUntilTimeout+0x34>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	42b3      	cmp	r3, r6
 8000c50:	d009      	beq.n	8000c66 <SPI_WaitFlagStateUntilTimeout+0x92>
    if(Timeout != HAL_MAX_DELAY)
 8000c52:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000c56:	d1c3      	bne.n	8000be0 <SPI_WaitFlagStateUntilTimeout+0xc>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000c58:	682b      	ldr	r3, [r5, #0]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	ea37 0303 	bics.w	r3, r7, r3
 8000c60:	d0f4      	beq.n	8000c4c <SPI_WaitFlagStateUntilTimeout+0x78>
 8000c62:	2300      	movs	r3, #0
 8000c64:	e7f3      	b.n	8000c4e <SPI_WaitFlagStateUntilTimeout+0x7a>
      }
    }
  }

  return HAL_OK;
 8000c66:	2000      	movs	r0, #0
}
 8000c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000c6a <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000c6a:	b510      	push	{r4, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	4604      	mov	r4, r0
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000c70:	9200      	str	r2, [sp, #0]
 8000c72:	460b      	mov	r3, r1
 8000c74:	2200      	movs	r2, #0
 8000c76:	2180      	movs	r1, #128	; 0x80
 8000c78:	f7ff ffac 	bl	8000bd4 <SPI_WaitFlagStateUntilTimeout>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	b910      	cbnz	r0, 8000c86 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	b002      	add	sp, #8
 8000c84:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000c86:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000c88:	f043 0320 	orr.w	r3, r3, #32
 8000c8c:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	e7f6      	b.n	8000c80 <SPI_CheckFlag_BSY+0x16>

08000c92 <HAL_SPI_Transmit>:
{
 8000c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000c9a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	f000 80c8 	beq.w	8000e34 <HAL_SPI_Transmit+0x1a2>
 8000ca4:	4604      	mov	r4, r0
 8000ca6:	460d      	mov	r5, r1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2301      	movs	r3, #1
 8000cac:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000cb0:	f7ff fa90 	bl	80001d4 <HAL_GetTick>
 8000cb4:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8000cb6:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d00a      	beq.n	8000cd6 <HAL_SPI_Transmit+0x44>
    errorcode = HAL_BUSY;
 8000cc0:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	b004      	add	sp, #16
 8000cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if((pData == NULL ) || (Size == 0U))
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80a4 	beq.w	8000e24 <HAL_SPI_Transmit+0x192>
 8000cdc:	f1b8 0f00 	cmp.w	r8, #0
 8000ce0:	f000 80a2 	beq.w	8000e28 <HAL_SPI_Transmit+0x196>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000cee:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8000cf0:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8000cf4:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000cf8:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8000cfa:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000cfc:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000cfe:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8000d00:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000d02:	68a3      	ldr	r3, [r4, #8]
 8000d04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d08:	d01b      	beq.n	8000d42 <HAL_SPI_Transmit+0xb0>
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000d0a:	6823      	ldr	r3, [r4, #0]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000d12:	d103      	bne.n	8000d1c <HAL_SPI_Transmit+0x8a>
    __HAL_SPI_ENABLE(hspi);
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d1a:	601a      	str	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000d1c:	68e3      	ldr	r3, [r4, #12]
 8000d1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d22:	d014      	beq.n	8000d4e <HAL_SPI_Transmit+0xbc>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8000d24:	6863      	ldr	r3, [r4, #4]
 8000d26:	b11b      	cbz	r3, 8000d30 <HAL_SPI_Transmit+0x9e>
 8000d28:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d13e      	bne.n	8000dae <HAL_SPI_Transmit+0x11c>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8000d30:	6823      	ldr	r3, [r4, #0]
 8000d32:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000d36:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8000d38:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	86e3      	strh	r3, [r4, #54]	; 0x36
 8000d40:	e035      	b.n	8000dae <HAL_SPI_Transmit+0x11c>
    SPI_1LINE_TX(hspi);
 8000d42:	6822      	ldr	r2, [r4, #0]
 8000d44:	6813      	ldr	r3, [r2, #0]
 8000d46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d4a:	6013      	str	r3, [r2, #0]
 8000d4c:	e7dd      	b.n	8000d0a <HAL_SPI_Transmit+0x78>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8000d4e:	6863      	ldr	r3, [r4, #4]
 8000d50:	b11b      	cbz	r3, 8000d5a <HAL_SPI_Transmit+0xc8>
 8000d52:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d10d      	bne.n	8000d76 <HAL_SPI_Transmit+0xe4>
      hspi->Instance->DR = *((uint16_t *)pData);
 8000d5a:	6823      	ldr	r3, [r4, #0]
 8000d5c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000d60:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000d62:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d64:	3b01      	subs	r3, #1
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	86e3      	strh	r3, [r4, #54]	; 0x36
 8000d6a:	e004      	b.n	8000d76 <HAL_SPI_Transmit+0xe4>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000d6c:	2e00      	cmp	r6, #0
 8000d6e:	d05d      	beq.n	8000e2c <HAL_SPI_Transmit+0x19a>
 8000d70:	f1b6 3fff 	cmp.w	r6, #4294967295
 8000d74:	d10f      	bne.n	8000d96 <HAL_SPI_Transmit+0x104>
    while (hspi->TxXferCount > 0U)
 8000d76:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	b37b      	cbz	r3, 8000ddc <HAL_SPI_Transmit+0x14a>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000d7c:	6823      	ldr	r3, [r4, #0]
 8000d7e:	689a      	ldr	r2, [r3, #8]
 8000d80:	f012 0f02 	tst.w	r2, #2
 8000d84:	d0f2      	beq.n	8000d6c <HAL_SPI_Transmit+0xda>
          hspi->Instance->DR = *((uint16_t *)pData);
 8000d86:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000d8a:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8000d8c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	86e3      	strh	r3, [r4, #54]	; 0x36
 8000d94:	e7ef      	b.n	8000d76 <HAL_SPI_Transmit+0xe4>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000d96:	f7ff fa1d 	bl	80001d4 <HAL_GetTick>
 8000d9a:	1bc0      	subs	r0, r0, r7
 8000d9c:	42b0      	cmp	r0, r6
 8000d9e:	d3ea      	bcc.n	8000d76 <HAL_SPI_Transmit+0xe4>
          errorcode = HAL_TIMEOUT;
 8000da0:	2303      	movs	r3, #3
 8000da2:	e78e      	b.n	8000cc2 <HAL_SPI_Transmit+0x30>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000da4:	2e00      	cmp	r6, #0
 8000da6:	d043      	beq.n	8000e30 <HAL_SPI_Transmit+0x19e>
 8000da8:	f1b6 3fff 	cmp.w	r6, #4294967295
 8000dac:	d10f      	bne.n	8000dce <HAL_SPI_Transmit+0x13c>
    while (hspi->TxXferCount > 0U)
 8000dae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	b19b      	cbz	r3, 8000ddc <HAL_SPI_Transmit+0x14a>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000db4:	6823      	ldr	r3, [r4, #0]
 8000db6:	689a      	ldr	r2, [r3, #8]
 8000db8:	f012 0f02 	tst.w	r2, #2
 8000dbc:	d0f2      	beq.n	8000da4 <HAL_SPI_Transmit+0x112>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8000dbe:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000dc2:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8000dc4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	86e3      	strh	r3, [r4, #54]	; 0x36
 8000dcc:	e7ef      	b.n	8000dae <HAL_SPI_Transmit+0x11c>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000dce:	f7ff fa01 	bl	80001d4 <HAL_GetTick>
 8000dd2:	1bc0      	subs	r0, r0, r7
 8000dd4:	42b0      	cmp	r0, r6
 8000dd6:	d3ea      	bcc.n	8000dae <HAL_SPI_Transmit+0x11c>
          errorcode = HAL_TIMEOUT;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	e772      	b.n	8000cc2 <HAL_SPI_Transmit+0x30>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000ddc:	9700      	str	r7, [sp, #0]
 8000dde:	4633      	mov	r3, r6
 8000de0:	2201      	movs	r2, #1
 8000de2:	2102      	movs	r1, #2
 8000de4:	4620      	mov	r0, r4
 8000de6:	f7ff fef5 	bl	8000bd4 <SPI_WaitFlagStateUntilTimeout>
 8000dea:	b108      	cbz	r0, 8000df0 <HAL_SPI_Transmit+0x15e>
    errorcode = HAL_TIMEOUT;
 8000dec:	2303      	movs	r3, #3
 8000dee:	e768      	b.n	8000cc2 <HAL_SPI_Transmit+0x30>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8000df0:	463a      	mov	r2, r7
 8000df2:	4631      	mov	r1, r6
 8000df4:	4620      	mov	r0, r4
 8000df6:	f7ff ff38 	bl	8000c6a <SPI_CheckFlag_BSY>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	b118      	cbz	r0, 8000e06 <HAL_SPI_Transmit+0x174>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000dfe:	2320      	movs	r3, #32
 8000e00:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
    goto error;
 8000e04:	e75d      	b.n	8000cc2 <HAL_SPI_Transmit+0x30>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000e06:	68a2      	ldr	r2, [r4, #8]
 8000e08:	b932      	cbnz	r2, 8000e18 <HAL_SPI_Transmit+0x186>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000e0a:	9203      	str	r2, [sp, #12]
 8000e0c:	6822      	ldr	r2, [r4, #0]
 8000e0e:	68d1      	ldr	r1, [r2, #12]
 8000e10:	9103      	str	r1, [sp, #12]
 8000e12:	6892      	ldr	r2, [r2, #8]
 8000e14:	9203      	str	r2, [sp, #12]
 8000e16:	9a03      	ldr	r2, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000e18:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000e1a:	2a00      	cmp	r2, #0
 8000e1c:	f43f af51 	beq.w	8000cc2 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	e74e      	b.n	8000cc2 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	e74c      	b.n	8000cc2 <HAL_SPI_Transmit+0x30>
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e74a      	b.n	8000cc2 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	e748      	b.n	8000cc2 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8000e30:	2303      	movs	r3, #3
 8000e32:	e746      	b.n	8000cc2 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8000e34:	2302      	movs	r3, #2
 8000e36:	e74a      	b.n	8000cce <HAL_SPI_Transmit+0x3c>

08000e38 <HAL_SPI_ErrorCallback>:
}
 8000e38:	4770      	bx	lr
	...

08000e3c <HAL_SPI_IRQHandler>:
{
 8000e3c:	b510      	push	{r4, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8000e42:	6802      	ldr	r2, [r0, #0]
 8000e44:	6850      	ldr	r0, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8000e46:	6893      	ldr	r3, [r2, #8]
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8000e48:	f003 0141 	and.w	r1, r3, #65	; 0x41
 8000e4c:	2901      	cmp	r1, #1
 8000e4e:	d00a      	beq.n	8000e66 <HAL_SPI_IRQHandler+0x2a>
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8000e50:	f013 0f02 	tst.w	r3, #2
 8000e54:	d00e      	beq.n	8000e74 <HAL_SPI_IRQHandler+0x38>
 8000e56:	f010 0f80 	tst.w	r0, #128	; 0x80
 8000e5a:	d00b      	beq.n	8000e74 <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 8000e5c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e5e:	4620      	mov	r0, r4
 8000e60:	4798      	blx	r3
}
 8000e62:	b004      	add	sp, #16
 8000e64:	bd10      	pop	{r4, pc}
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8000e66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000e6a:	d0f1      	beq.n	8000e50 <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 8000e6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e6e:	4620      	mov	r0, r4
 8000e70:	4798      	blx	r3
    return;
 8000e72:	e7f6      	b.n	8000e62 <HAL_SPI_IRQHandler+0x26>
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8000e74:	f013 0f60 	tst.w	r3, #96	; 0x60
 8000e78:	d0f3      	beq.n	8000e62 <HAL_SPI_IRQHandler+0x26>
 8000e7a:	f010 0f20 	tst.w	r0, #32
 8000e7e:	d0f0      	beq.n	8000e62 <HAL_SPI_IRQHandler+0x26>
    if((itflag & SPI_FLAG_OVR) != RESET)
 8000e80:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000e84:	d00f      	beq.n	8000ea6 <HAL_SPI_IRQHandler+0x6a>
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 8000e86:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 8000e8a:	b2c9      	uxtb	r1, r1
 8000e8c:	2903      	cmp	r1, #3
 8000e8e:	d03d      	beq.n	8000f0c <HAL_SPI_IRQHandler+0xd0>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8000e90:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8000e92:	f041 0104 	orr.w	r1, r1, #4
 8000e96:	6561      	str	r1, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000e98:	2100      	movs	r1, #0
 8000e9a:	9101      	str	r1, [sp, #4]
 8000e9c:	68d1      	ldr	r1, [r2, #12]
 8000e9e:	9101      	str	r1, [sp, #4]
 8000ea0:	6891      	ldr	r1, [r2, #8]
 8000ea2:	9101      	str	r1, [sp, #4]
 8000ea4:	9901      	ldr	r1, [sp, #4]
    if((itflag & SPI_FLAG_MODF) != RESET)
 8000ea6:	f013 0f20 	tst.w	r3, #32
 8000eaa:	d00c      	beq.n	8000ec6 <HAL_SPI_IRQHandler+0x8a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8000eac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	9303      	str	r3, [sp, #12]
 8000eb8:	6893      	ldr	r3, [r2, #8]
 8000eba:	9303      	str	r3, [sp, #12]
 8000ebc:	6813      	ldr	r3, [r2, #0]
 8000ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ec2:	6013      	str	r3, [r2, #0]
 8000ec4:	9b03      	ldr	r3, [sp, #12]
    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000ec6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d0ca      	beq.n	8000e62 <HAL_SPI_IRQHandler+0x26>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8000ecc:	6822      	ldr	r2, [r4, #0]
 8000ece:	6853      	ldr	r3, [r2, #4]
 8000ed0:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8000ed4:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8000edc:	f010 0f03 	tst.w	r0, #3
 8000ee0:	d01c      	beq.n	8000f1c <HAL_SPI_IRQHandler+0xe0>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8000ee2:	6822      	ldr	r2, [r4, #0]
 8000ee4:	6853      	ldr	r3, [r2, #4]
 8000ee6:	f023 0303 	bic.w	r3, r3, #3
 8000eea:	6053      	str	r3, [r2, #4]
        if(hspi->hdmarx != NULL)
 8000eec:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000eee:	b123      	cbz	r3, 8000efa <HAL_SPI_IRQHandler+0xbe>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8000ef0:	4a0c      	ldr	r2, [pc, #48]	; (8000f24 <HAL_SPI_IRQHandler+0xe8>)
 8000ef2:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8000ef4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000ef6:	f7ff f9ef 	bl	80002d8 <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 8000efa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d0b0      	beq.n	8000e62 <HAL_SPI_IRQHandler+0x26>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8000f00:	4a08      	ldr	r2, [pc, #32]	; (8000f24 <HAL_SPI_IRQHandler+0xe8>)
 8000f02:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8000f04:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8000f06:	f7ff f9e7 	bl	80002d8 <HAL_DMA_Abort_IT>
 8000f0a:	e7aa      	b.n	8000e62 <HAL_SPI_IRQHandler+0x26>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	9302      	str	r3, [sp, #8]
 8000f10:	68d3      	ldr	r3, [r2, #12]
 8000f12:	9302      	str	r3, [sp, #8]
 8000f14:	6893      	ldr	r3, [r2, #8]
 8000f16:	9302      	str	r3, [sp, #8]
 8000f18:	9b02      	ldr	r3, [sp, #8]
        return;
 8000f1a:	e7a2      	b.n	8000e62 <HAL_SPI_IRQHandler+0x26>
        HAL_SPI_ErrorCallback(hspi);
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	f7ff ff8b 	bl	8000e38 <HAL_SPI_ErrorCallback>
 8000f22:	e79e      	b.n	8000e62 <HAL_SPI_IRQHandler+0x26>
 8000f24:	08000f29 	.word	0x08000f29

08000f28 <SPI_DMAAbortOnError>:
{
 8000f28:	b508      	push	{r3, lr}
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f2a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8000f30:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 8000f32:	f7ff ff81 	bl	8000e38 <HAL_SPI_ErrorCallback>
}
 8000f36:	bd08      	pop	{r3, pc}

08000f38 <HAL_SPI_GetState>:
  return hspi->State;
 8000f38:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8000f3c:	4770      	bx	lr

08000f3e <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8000f3e:	2800      	cmp	r0, #0
 8000f40:	d03c      	beq.n	8000fbc <HAL_SPI_Init+0x7e>
{
 8000f42:	b510      	push	{r4, lr}
 8000f44:	4604      	mov	r4, r0
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8000f4a:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d031      	beq.n	8000fb6 <HAL_SPI_Init+0x78>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8000f52:	2302      	movs	r3, #2
 8000f54:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000f58:	6822      	ldr	r2, [r4, #0]
 8000f5a:	6813      	ldr	r3, [r2, #0]
 8000f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f60:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000f62:	6863      	ldr	r3, [r4, #4]
 8000f64:	68a2      	ldr	r2, [r4, #8]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	68e2      	ldr	r2, [r4, #12]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	6922      	ldr	r2, [r4, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	6962      	ldr	r2, [r4, #20]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	69a2      	ldr	r2, [r4, #24]
 8000f76:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	69e2      	ldr	r2, [r4, #28]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	6a22      	ldr	r2, [r4, #32]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000f86:	6822      	ldr	r2, [r4, #0]
 8000f88:	430b      	orrs	r3, r1
 8000f8a:	6013      	str	r3, [r2, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000f8c:	8b63      	ldrh	r3, [r4, #26]
 8000f8e:	f003 0304 	and.w	r3, r3, #4
 8000f92:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000f94:	6822      	ldr	r2, [r4, #0]
 8000f96:	430b      	orrs	r3, r1
 8000f98:	6053      	str	r3, [r2, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000f9a:	6823      	ldr	r3, [r4, #0]
 8000f9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000f9e:	611a      	str	r2, [r3, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000fa0:	6822      	ldr	r2, [r4, #0]
 8000fa2:	69d3      	ldr	r3, [r2, #28]
 8000fa4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000fa8:	61d3      	str	r3, [r2, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000faa:	2000      	movs	r0, #0
 8000fac:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
}
 8000fb4:	bd10      	pop	{r4, pc}
    HAL_SPI_MspInit(hspi);
 8000fb6:	f000 fdbb 	bl	8001b30 <HAL_SPI_MspInit>
 8000fba:	e7ca      	b.n	8000f52 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8000fbc:	2001      	movs	r0, #1
}
 8000fbe:	4770      	bx	lr

08000fc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8000fc0:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8000fc2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000fc4:	6a04      	ldr	r4, [r0, #32]
 8000fc6:	f024 0401 	bic.w	r4, r4, #1
 8000fca:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000fcc:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000fce:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000fd2:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000fd6:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8000fda:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000fdc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000fde:	6203      	str	r3, [r0, #32]
}
 8000fe0:	bc10      	pop	{r4}
 8000fe2:	4770      	bx	lr

08000fe4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8000fe4:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000fe6:	6a03      	ldr	r3, [r0, #32]
 8000fe8:	f023 0310 	bic.w	r3, r3, #16
 8000fec:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000fee:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8000ff0:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000ff2:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000ff6:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000ffa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000ffe:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001002:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001004:	6203      	str	r3, [r0, #32]
}
 8001006:	bc10      	pop	{r4}
 8001008:	4770      	bx	lr

0800100a <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800100a:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800100c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001010:	f041 0107 	orr.w	r1, r1, #7
 8001014:	4319      	orrs	r1, r3
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001016:	6081      	str	r1, [r0, #8]
}
 8001018:	4770      	bx	lr

0800101a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800101a:	b410      	push	{r4}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 800101c:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800101e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001022:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001026:	430b      	orrs	r3, r1
 8001028:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800102a:	6083      	str	r3, [r0, #8]
}
 800102c:	bc10      	pop	{r4}
 800102e:	4770      	bx	lr

08001030 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001030:	6802      	ldr	r2, [r0, #0]
 8001032:	68d3      	ldr	r3, [r2, #12]
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 800103a:	6802      	ldr	r2, [r0, #0]
 800103c:	6813      	ldr	r3, [r2, #0]
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	2000      	movs	r0, #0
 8001046:	4770      	bx	lr

08001048 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001048:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800104c:	2b01      	cmp	r3, #1
 800104e:	d07d      	beq.n	800114c <HAL_TIM_ConfigClockSource+0x104>
{
 8001050:	b510      	push	{r4, lr}
 8001052:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001054:	2301      	movs	r3, #1
 8001056:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800105a:	2302      	movs	r3, #2
 800105c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001060:	6802      	ldr	r2, [r0, #0]
 8001062:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001064:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001068:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800106c:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800106e:	680b      	ldr	r3, [r1, #0]
 8001070:	2b40      	cmp	r3, #64	; 0x40
 8001072:	d057      	beq.n	8001124 <HAL_TIM_ConfigClockSource+0xdc>
 8001074:	d910      	bls.n	8001098 <HAL_TIM_ConfigClockSource+0x50>
 8001076:	2b70      	cmp	r3, #112	; 0x70
 8001078:	d03e      	beq.n	80010f8 <HAL_TIM_ConfigClockSource+0xb0>
 800107a:	d81f      	bhi.n	80010bc <HAL_TIM_ConfigClockSource+0x74>
 800107c:	2b50      	cmp	r3, #80	; 0x50
 800107e:	d047      	beq.n	8001110 <HAL_TIM_ConfigClockSource+0xc8>
 8001080:	2b60      	cmp	r3, #96	; 0x60
 8001082:	d132      	bne.n	80010ea <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001084:	68ca      	ldr	r2, [r1, #12]
 8001086:	6849      	ldr	r1, [r1, #4]
 8001088:	6800      	ldr	r0, [r0, #0]
 800108a:	f7ff ffab 	bl	8000fe4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800108e:	2160      	movs	r1, #96	; 0x60
 8001090:	6820      	ldr	r0, [r4, #0]
 8001092:	f7ff ffba 	bl	800100a <TIM_ITRx_SetConfig>
    break;
 8001096:	e028      	b.n	80010ea <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8001098:	2b10      	cmp	r3, #16
 800109a:	d04d      	beq.n	8001138 <HAL_TIM_ConfigClockSource+0xf0>
 800109c:	d908      	bls.n	80010b0 <HAL_TIM_ConfigClockSource+0x68>
 800109e:	2b20      	cmp	r3, #32
 80010a0:	d04f      	beq.n	8001142 <HAL_TIM_ConfigClockSource+0xfa>
 80010a2:	2b30      	cmp	r3, #48	; 0x30
 80010a4:	d121      	bne.n	80010ea <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 80010a6:	2130      	movs	r1, #48	; 0x30
 80010a8:	6800      	ldr	r0, [r0, #0]
 80010aa:	f7ff ffae 	bl	800100a <TIM_ITRx_SetConfig>
    break;
 80010ae:	e01c      	b.n	80010ea <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 80010b0:	b9db      	cbnz	r3, 80010ea <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 80010b2:	2100      	movs	r1, #0
 80010b4:	6800      	ldr	r0, [r0, #0]
 80010b6:	f7ff ffa8 	bl	800100a <TIM_ITRx_SetConfig>
    break;
 80010ba:	e016      	b.n	80010ea <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 80010bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010c0:	d00e      	beq.n	80010e0 <HAL_TIM_ConfigClockSource+0x98>
 80010c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010c6:	d110      	bne.n	80010ea <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ETR_SetConfig(htim->Instance,
 80010c8:	68cb      	ldr	r3, [r1, #12]
 80010ca:	684a      	ldr	r2, [r1, #4]
 80010cc:	6889      	ldr	r1, [r1, #8]
 80010ce:	6800      	ldr	r0, [r0, #0]
 80010d0:	f7ff ffa3 	bl	800101a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80010d4:	6822      	ldr	r2, [r4, #0]
 80010d6:	6893      	ldr	r3, [r2, #8]
 80010d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010dc:	6093      	str	r3, [r2, #8]
    break;
 80010de:	e004      	b.n	80010ea <HAL_TIM_ConfigClockSource+0xa2>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80010e0:	6802      	ldr	r2, [r0, #0]
 80010e2:	6893      	ldr	r3, [r2, #8]
 80010e4:	f023 0307 	bic.w	r3, r3, #7
 80010e8:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80010ea:	2301      	movs	r3, #1
 80010ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80010f0:	2000      	movs	r0, #0
 80010f2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80010f6:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 80010f8:	68cb      	ldr	r3, [r1, #12]
 80010fa:	684a      	ldr	r2, [r1, #4]
 80010fc:	6889      	ldr	r1, [r1, #8]
 80010fe:	6800      	ldr	r0, [r0, #0]
 8001100:	f7ff ff8b 	bl	800101a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001104:	6822      	ldr	r2, [r4, #0]
 8001106:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001108:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800110c:	6093      	str	r3, [r2, #8]
    break;
 800110e:	e7ec      	b.n	80010ea <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001110:	68ca      	ldr	r2, [r1, #12]
 8001112:	6849      	ldr	r1, [r1, #4]
 8001114:	6800      	ldr	r0, [r0, #0]
 8001116:	f7ff ff53 	bl	8000fc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800111a:	2150      	movs	r1, #80	; 0x50
 800111c:	6820      	ldr	r0, [r4, #0]
 800111e:	f7ff ff74 	bl	800100a <TIM_ITRx_SetConfig>
    break;
 8001122:	e7e2      	b.n	80010ea <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001124:	68ca      	ldr	r2, [r1, #12]
 8001126:	6849      	ldr	r1, [r1, #4]
 8001128:	6800      	ldr	r0, [r0, #0]
 800112a:	f7ff ff49 	bl	8000fc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800112e:	2140      	movs	r1, #64	; 0x40
 8001130:	6820      	ldr	r0, [r4, #0]
 8001132:	f7ff ff6a 	bl	800100a <TIM_ITRx_SetConfig>
    break;
 8001136:	e7d8      	b.n	80010ea <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001138:	2110      	movs	r1, #16
 800113a:	6800      	ldr	r0, [r0, #0]
 800113c:	f7ff ff65 	bl	800100a <TIM_ITRx_SetConfig>
    break;
 8001140:	e7d3      	b.n	80010ea <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001142:	2120      	movs	r1, #32
 8001144:	6800      	ldr	r0, [r0, #0]
 8001146:	f7ff ff60 	bl	800100a <TIM_ITRx_SetConfig>
    break;
 800114a:	e7ce      	b.n	80010ea <HAL_TIM_ConfigClockSource+0xa2>
  __HAL_LOCK(htim);
 800114c:	2002      	movs	r0, #2
}
 800114e:	4770      	bx	lr

08001150 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8001150:	4770      	bx	lr

08001152 <HAL_TIM_IC_CaptureCallback>:
}
 8001152:	4770      	bx	lr

08001154 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8001154:	4770      	bx	lr

08001156 <HAL_TIM_TriggerCallback>:
}
 8001156:	4770      	bx	lr

08001158 <HAL_TIM_IRQHandler>:
{
 8001158:	b510      	push	{r4, lr}
 800115a:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800115c:	6803      	ldr	r3, [r0, #0]
 800115e:	691a      	ldr	r2, [r3, #16]
 8001160:	f012 0f02 	tst.w	r2, #2
 8001164:	d011      	beq.n	800118a <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	f012 0f02 	tst.w	r2, #2
 800116c:	d00d      	beq.n	800118a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800116e:	f06f 0202 	mvn.w	r2, #2
 8001172:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001174:	2301      	movs	r3, #1
 8001176:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001178:	6803      	ldr	r3, [r0, #0]
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f013 0f03 	tst.w	r3, #3
 8001180:	d070      	beq.n	8001264 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8001182:	f7ff ffe6 	bl	8001152 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001186:	2300      	movs	r3, #0
 8001188:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800118a:	6823      	ldr	r3, [r4, #0]
 800118c:	691a      	ldr	r2, [r3, #16]
 800118e:	f012 0f04 	tst.w	r2, #4
 8001192:	d012      	beq.n	80011ba <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001194:	68da      	ldr	r2, [r3, #12]
 8001196:	f012 0f04 	tst.w	r2, #4
 800119a:	d00e      	beq.n	80011ba <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800119c:	f06f 0204 	mvn.w	r2, #4
 80011a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80011a2:	2302      	movs	r3, #2
 80011a4:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80011a6:	6823      	ldr	r3, [r4, #0]
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	f413 7f40 	tst.w	r3, #768	; 0x300
 80011ae:	d05f      	beq.n	8001270 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80011b0:	4620      	mov	r0, r4
 80011b2:	f7ff ffce 	bl	8001152 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011b6:	2300      	movs	r3, #0
 80011b8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80011ba:	6823      	ldr	r3, [r4, #0]
 80011bc:	691a      	ldr	r2, [r3, #16]
 80011be:	f012 0f08 	tst.w	r2, #8
 80011c2:	d012      	beq.n	80011ea <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80011c4:	68da      	ldr	r2, [r3, #12]
 80011c6:	f012 0f08 	tst.w	r2, #8
 80011ca:	d00e      	beq.n	80011ea <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80011cc:	f06f 0208 	mvn.w	r2, #8
 80011d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80011d2:	2304      	movs	r3, #4
 80011d4:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80011d6:	6823      	ldr	r3, [r4, #0]
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	f013 0f03 	tst.w	r3, #3
 80011de:	d04e      	beq.n	800127e <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80011e0:	4620      	mov	r0, r4
 80011e2:	f7ff ffb6 	bl	8001152 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011e6:	2300      	movs	r3, #0
 80011e8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80011ea:	6823      	ldr	r3, [r4, #0]
 80011ec:	691a      	ldr	r2, [r3, #16]
 80011ee:	f012 0f10 	tst.w	r2, #16
 80011f2:	d012      	beq.n	800121a <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80011f4:	68da      	ldr	r2, [r3, #12]
 80011f6:	f012 0f10 	tst.w	r2, #16
 80011fa:	d00e      	beq.n	800121a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80011fc:	f06f 0210 	mvn.w	r2, #16
 8001200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001202:	2308      	movs	r3, #8
 8001204:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001206:	6823      	ldr	r3, [r4, #0]
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800120e:	d03d      	beq.n	800128c <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8001210:	4620      	mov	r0, r4
 8001212:	f7ff ff9e 	bl	8001152 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001216:	2300      	movs	r3, #0
 8001218:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800121a:	6823      	ldr	r3, [r4, #0]
 800121c:	691a      	ldr	r2, [r3, #16]
 800121e:	f012 0f01 	tst.w	r2, #1
 8001222:	d003      	beq.n	800122c <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001224:	68da      	ldr	r2, [r3, #12]
 8001226:	f012 0f01 	tst.w	r2, #1
 800122a:	d136      	bne.n	800129a <HAL_TIM_IRQHandler+0x142>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800122c:	6823      	ldr	r3, [r4, #0]
 800122e:	691a      	ldr	r2, [r3, #16]
 8001230:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001234:	d003      	beq.n	800123e <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001236:	68da      	ldr	r2, [r3, #12]
 8001238:	f012 0f80 	tst.w	r2, #128	; 0x80
 800123c:	d134      	bne.n	80012a8 <HAL_TIM_IRQHandler+0x150>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800123e:	6823      	ldr	r3, [r4, #0]
 8001240:	691a      	ldr	r2, [r3, #16]
 8001242:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001246:	d003      	beq.n	8001250 <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001248:	68da      	ldr	r2, [r3, #12]
 800124a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800124e:	d132      	bne.n	80012b6 <HAL_TIM_IRQHandler+0x15e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001250:	6823      	ldr	r3, [r4, #0]
 8001252:	691a      	ldr	r2, [r3, #16]
 8001254:	f012 0f20 	tst.w	r2, #32
 8001258:	d003      	beq.n	8001262 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800125a:	68da      	ldr	r2, [r3, #12]
 800125c:	f012 0f20 	tst.w	r2, #32
 8001260:	d130      	bne.n	80012c4 <HAL_TIM_IRQHandler+0x16c>
}
 8001262:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001264:	f7ff ff74 	bl	8001150 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001268:	4620      	mov	r0, r4
 800126a:	f7ff ff73 	bl	8001154 <HAL_TIM_PWM_PulseFinishedCallback>
 800126e:	e78a      	b.n	8001186 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001270:	4620      	mov	r0, r4
 8001272:	f7ff ff6d 	bl	8001150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001276:	4620      	mov	r0, r4
 8001278:	f7ff ff6c 	bl	8001154 <HAL_TIM_PWM_PulseFinishedCallback>
 800127c:	e79b      	b.n	80011b6 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800127e:	4620      	mov	r0, r4
 8001280:	f7ff ff66 	bl	8001150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001284:	4620      	mov	r0, r4
 8001286:	f7ff ff65 	bl	8001154 <HAL_TIM_PWM_PulseFinishedCallback>
 800128a:	e7ac      	b.n	80011e6 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800128c:	4620      	mov	r0, r4
 800128e:	f7ff ff5f 	bl	8001150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001292:	4620      	mov	r0, r4
 8001294:	f7ff ff5e 	bl	8001154 <HAL_TIM_PWM_PulseFinishedCallback>
 8001298:	e7bd      	b.n	8001216 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800129a:	f06f 0201 	mvn.w	r2, #1
 800129e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80012a0:	4620      	mov	r0, r4
 80012a2:	f000 fb35 	bl	8001910 <HAL_TIM_PeriodElapsedCallback>
 80012a6:	e7c1      	b.n	800122c <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80012a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80012ac:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80012ae:	4620      	mov	r0, r4
 80012b0:	f000 f88d 	bl	80013ce <HAL_TIMEx_BreakCallback>
 80012b4:	e7c3      	b.n	800123e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80012b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80012ba:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80012bc:	4620      	mov	r0, r4
 80012be:	f7ff ff4a 	bl	8001156 <HAL_TIM_TriggerCallback>
 80012c2:	e7c5      	b.n	8001250 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80012c4:	f06f 0220 	mvn.w	r2, #32
 80012c8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80012ca:	4620      	mov	r0, r4
 80012cc:	f000 f87e 	bl	80013cc <HAL_TIMEx_CommutationCallback>
}
 80012d0:	e7c7      	b.n	8001262 <HAL_TIM_IRQHandler+0x10a>
	...

080012d4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80012d4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012d6:	4a1b      	ldr	r2, [pc, #108]	; (8001344 <TIM_Base_SetConfig+0x70>)
 80012d8:	4290      	cmp	r0, r2
 80012da:	d00a      	beq.n	80012f2 <TIM_Base_SetConfig+0x1e>
 80012dc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80012e0:	d007      	beq.n	80012f2 <TIM_Base_SetConfig+0x1e>
 80012e2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80012e6:	4290      	cmp	r0, r2
 80012e8:	d003      	beq.n	80012f2 <TIM_Base_SetConfig+0x1e>
 80012ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012ee:	4290      	cmp	r0, r2
 80012f0:	d103      	bne.n	80012fa <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80012f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80012f6:	684a      	ldr	r2, [r1, #4]
 80012f8:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80012fa:	4a12      	ldr	r2, [pc, #72]	; (8001344 <TIM_Base_SetConfig+0x70>)
 80012fc:	4290      	cmp	r0, r2
 80012fe:	d00a      	beq.n	8001316 <TIM_Base_SetConfig+0x42>
 8001300:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001304:	d007      	beq.n	8001316 <TIM_Base_SetConfig+0x42>
 8001306:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800130a:	4290      	cmp	r0, r2
 800130c:	d003      	beq.n	8001316 <TIM_Base_SetConfig+0x42>
 800130e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001312:	4290      	cmp	r0, r2
 8001314:	d103      	bne.n	800131e <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800131a:	68ca      	ldr	r2, [r1, #12]
 800131c:	4313      	orrs	r3, r2
  tmpcr1 &= ~TIM_CR1_ARPE;
 800131e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001322:	694a      	ldr	r2, [r1, #20]
 8001324:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001326:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001328:	688b      	ldr	r3, [r1, #8]
 800132a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800132c:	680b      	ldr	r3, [r1, #0]
 800132e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001330:	4b04      	ldr	r3, [pc, #16]	; (8001344 <TIM_Base_SetConfig+0x70>)
 8001332:	4298      	cmp	r0, r3
 8001334:	d002      	beq.n	800133c <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 8001336:	2301      	movs	r3, #1
 8001338:	6143      	str	r3, [r0, #20]
}
 800133a:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800133c:	690b      	ldr	r3, [r1, #16]
 800133e:	6303      	str	r3, [r0, #48]	; 0x30
 8001340:	e7f9      	b.n	8001336 <TIM_Base_SetConfig+0x62>
 8001342:	bf00      	nop
 8001344:	40012c00 	.word	0x40012c00

08001348 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8001348:	b1a8      	cbz	r0, 8001376 <HAL_TIM_Base_Init+0x2e>
{
 800134a:	b510      	push	{r4, lr}
 800134c:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 800134e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001352:	b15b      	cbz	r3, 800136c <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8001354:	2302      	movs	r3, #2
 8001356:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800135a:	1d21      	adds	r1, r4, #4
 800135c:	6820      	ldr	r0, [r4, #0]
 800135e:	f7ff ffb9 	bl	80012d4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001362:	2301      	movs	r3, #1
 8001364:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001368:	2000      	movs	r0, #0
}
 800136a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800136c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001370:	f000 fc18 	bl	8001ba4 <HAL_TIM_Base_MspInit>
 8001374:	e7ee      	b.n	8001354 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001376:	2001      	movs	r0, #1
}
 8001378:	4770      	bx	lr

0800137a <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800137a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800137e:	2b01      	cmp	r3, #1
 8001380:	d022      	beq.n	80013c8 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
{
 8001382:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8001384:	2201      	movs	r2, #1
 8001386:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800138a:	2302      	movs	r3, #2
 800138c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001390:	6804      	ldr	r4, [r0, #0]
 8001392:	6863      	ldr	r3, [r4, #4]
 8001394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001398:	6063      	str	r3, [r4, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800139a:	6804      	ldr	r4, [r0, #0]
 800139c:	6863      	ldr	r3, [r4, #4]
 800139e:	680d      	ldr	r5, [r1, #0]
 80013a0:	432b      	orrs	r3, r5
 80013a2:	6063      	str	r3, [r4, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80013a4:	6804      	ldr	r4, [r0, #0]
 80013a6:	68a3      	ldr	r3, [r4, #8]
 80013a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013ac:	60a3      	str	r3, [r4, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80013ae:	6804      	ldr	r4, [r0, #0]
 80013b0:	68a3      	ldr	r3, [r4, #8]
 80013b2:	6849      	ldr	r1, [r1, #4]
 80013b4:	430b      	orrs	r3, r1
 80013b6:	60a3      	str	r3, [r4, #8]

  htim->State = HAL_TIM_STATE_READY;
 80013b8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80013bc:	2300      	movs	r3, #0
 80013be:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80013c2:	4618      	mov	r0, r3
}
 80013c4:	bc30      	pop	{r4, r5}
 80013c6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80013c8:	2002      	movs	r0, #2
}
 80013ca:	4770      	bx	lr

080013cc <HAL_TIMEx_CommutationCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80013cc:	4770      	bx	lr

080013ce <HAL_TIMEx_BreakCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80013ce:	4770      	bx	lr

080013d0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80013d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013d4:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013d6:	6802      	ldr	r2, [r0, #0]
 80013d8:	6913      	ldr	r3, [r2, #16]
 80013da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013de:	68c1      	ldr	r1, [r0, #12]
 80013e0:	430b      	orrs	r3, r1
 80013e2:	6113      	str	r3, [r2, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80013e4:	6883      	ldr	r3, [r0, #8]
 80013e6:	6902      	ldr	r2, [r0, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	6942      	ldr	r2, [r0, #20]
 80013ec:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, 
 80013ee:	6801      	ldr	r1, [r0, #0]
 80013f0:	68ca      	ldr	r2, [r1, #12]
 80013f2:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80013f6:	f022 020c 	bic.w	r2, r2, #12
 80013fa:	4313      	orrs	r3, r2
 80013fc:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80013fe:	6802      	ldr	r2, [r0, #0]
 8001400:	6953      	ldr	r3, [r2, #20]
 8001402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001406:	6981      	ldr	r1, [r0, #24]
 8001408:	430b      	orrs	r3, r1
 800140a:	6153      	str	r3, [r2, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800140c:	6802      	ldr	r2, [r0, #0]
 800140e:	4b59      	ldr	r3, [pc, #356]	; (8001574 <UART_SetConfig+0x1a4>)
 8001410:	429a      	cmp	r2, r3
 8001412:	d057      	beq.n	80014c4 <UART_SetConfig+0xf4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001414:	f7ff fbbe 	bl	8000b94 <HAL_RCC_GetPCLK1Freq>
 8001418:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800141c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001420:	686c      	ldr	r4, [r5, #4]
 8001422:	00a4      	lsls	r4, r4, #2
 8001424:	fbb0 f4f4 	udiv	r4, r0, r4
 8001428:	4f53      	ldr	r7, [pc, #332]	; (8001578 <UART_SetConfig+0x1a8>)
 800142a:	fba7 3404 	umull	r3, r4, r7, r4
 800142e:	0964      	lsrs	r4, r4, #5
 8001430:	0126      	lsls	r6, r4, #4
 8001432:	f7ff fbaf 	bl	8000b94 <HAL_RCC_GetPCLK1Freq>
 8001436:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800143a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800143e:	686c      	ldr	r4, [r5, #4]
 8001440:	00a4      	lsls	r4, r4, #2
 8001442:	fbb0 f9f4 	udiv	r9, r0, r4
 8001446:	f7ff fba5 	bl	8000b94 <HAL_RCC_GetPCLK1Freq>
 800144a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800144e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001452:	686c      	ldr	r4, [r5, #4]
 8001454:	00a4      	lsls	r4, r4, #2
 8001456:	fbb0 f4f4 	udiv	r4, r0, r4
 800145a:	fba7 3404 	umull	r3, r4, r7, r4
 800145e:	0964      	lsrs	r4, r4, #5
 8001460:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001464:	fb08 9414 	mls	r4, r8, r4, r9
 8001468:	0124      	lsls	r4, r4, #4
 800146a:	3432      	adds	r4, #50	; 0x32
 800146c:	fba7 3404 	umull	r3, r4, r7, r4
 8001470:	0964      	lsrs	r4, r4, #5
 8001472:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 8001476:	4434      	add	r4, r6
 8001478:	f7ff fb8c 	bl	8000b94 <HAL_RCC_GetPCLK1Freq>
 800147c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001480:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001484:	686e      	ldr	r6, [r5, #4]
 8001486:	00b6      	lsls	r6, r6, #2
 8001488:	fbb0 f6f6 	udiv	r6, r0, r6
 800148c:	f7ff fb82 	bl	8000b94 <HAL_RCC_GetPCLK1Freq>
 8001490:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001494:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001498:	686b      	ldr	r3, [r5, #4]
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	fbb0 f0f3 	udiv	r0, r0, r3
 80014a0:	fba7 3000 	umull	r3, r0, r7, r0
 80014a4:	0940      	lsrs	r0, r0, #5
 80014a6:	fb08 6810 	mls	r8, r8, r0, r6
 80014aa:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80014ae:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80014b2:	fba7 3708 	umull	r3, r7, r7, r8
 80014b6:	f3c7 1743 	ubfx	r7, r7, #5, #4
 80014ba:	682b      	ldr	r3, [r5, #0]
 80014bc:	4427      	add	r7, r4
 80014be:	609f      	str	r7, [r3, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 80014c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80014c4:	f7ff fb76 	bl	8000bb4 <HAL_RCC_GetPCLK2Freq>
 80014c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80014cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80014d0:	686c      	ldr	r4, [r5, #4]
 80014d2:	00a4      	lsls	r4, r4, #2
 80014d4:	fbb0 f4f4 	udiv	r4, r0, r4
 80014d8:	4f27      	ldr	r7, [pc, #156]	; (8001578 <UART_SetConfig+0x1a8>)
 80014da:	fba7 3404 	umull	r3, r4, r7, r4
 80014de:	0964      	lsrs	r4, r4, #5
 80014e0:	0126      	lsls	r6, r4, #4
 80014e2:	f7ff fb67 	bl	8000bb4 <HAL_RCC_GetPCLK2Freq>
 80014e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80014ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80014ee:	686c      	ldr	r4, [r5, #4]
 80014f0:	00a4      	lsls	r4, r4, #2
 80014f2:	fbb0 f9f4 	udiv	r9, r0, r4
 80014f6:	f7ff fb5d 	bl	8000bb4 <HAL_RCC_GetPCLK2Freq>
 80014fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80014fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001502:	686c      	ldr	r4, [r5, #4]
 8001504:	00a4      	lsls	r4, r4, #2
 8001506:	fbb0 f4f4 	udiv	r4, r0, r4
 800150a:	fba7 3404 	umull	r3, r4, r7, r4
 800150e:	0964      	lsrs	r4, r4, #5
 8001510:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001514:	fb08 9414 	mls	r4, r8, r4, r9
 8001518:	0124      	lsls	r4, r4, #4
 800151a:	3432      	adds	r4, #50	; 0x32
 800151c:	fba7 3404 	umull	r3, r4, r7, r4
 8001520:	0964      	lsrs	r4, r4, #5
 8001522:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 8001526:	4434      	add	r4, r6
 8001528:	f7ff fb44 	bl	8000bb4 <HAL_RCC_GetPCLK2Freq>
 800152c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001530:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001534:	686e      	ldr	r6, [r5, #4]
 8001536:	00b6      	lsls	r6, r6, #2
 8001538:	fbb0 f6f6 	udiv	r6, r0, r6
 800153c:	f7ff fb3a 	bl	8000bb4 <HAL_RCC_GetPCLK2Freq>
 8001540:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001544:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001548:	686b      	ldr	r3, [r5, #4]
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001550:	fba7 3000 	umull	r3, r0, r7, r0
 8001554:	0940      	lsrs	r0, r0, #5
 8001556:	fb08 6810 	mls	r8, r8, r0, r6
 800155a:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800155e:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8001562:	fba7 3708 	umull	r3, r7, r7, r8
 8001566:	f3c7 1743 	ubfx	r7, r7, #5, #4
 800156a:	682b      	ldr	r3, [r5, #0]
 800156c:	4427      	add	r7, r4
 800156e:	609f      	str	r7, [r3, #8]
 8001570:	e7a6      	b.n	80014c0 <UART_SetConfig+0xf0>
 8001572:	bf00      	nop
 8001574:	40013800 	.word	0x40013800
 8001578:	51eb851f 	.word	0x51eb851f

0800157c <UART_WaitOnFlagUntilTimeout>:
{
 800157c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001580:	4605      	mov	r5, r0
 8001582:	460f      	mov	r7, r1
 8001584:	4616      	mov	r6, r2
 8001586:	4698      	mov	r8, r3
 8001588:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800158a:	682b      	ldr	r3, [r5, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	ea37 0303 	bics.w	r3, r7, r3
 8001592:	bf0c      	ite	eq
 8001594:	2301      	moveq	r3, #1
 8001596:	2300      	movne	r3, #0
 8001598:	42b3      	cmp	r3, r6
 800159a:	d11d      	bne.n	80015d8 <UART_WaitOnFlagUntilTimeout+0x5c>
    if(Timeout != HAL_MAX_DELAY)
 800159c:	f1b4 3fff 	cmp.w	r4, #4294967295
 80015a0:	d0f3      	beq.n	800158a <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80015a2:	b12c      	cbz	r4, 80015b0 <UART_WaitOnFlagUntilTimeout+0x34>
 80015a4:	f7fe fe16 	bl	80001d4 <HAL_GetTick>
 80015a8:	eba0 0008 	sub.w	r0, r0, r8
 80015ac:	42a0      	cmp	r0, r4
 80015ae:	d9ec      	bls.n	800158a <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80015b0:	682a      	ldr	r2, [r5, #0]
 80015b2:	68d3      	ldr	r3, [r2, #12]
 80015b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80015b8:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015ba:	682a      	ldr	r2, [r5, #0]
 80015bc:	6953      	ldr	r3, [r2, #20]
 80015be:	f023 0301 	bic.w	r3, r3, #1
 80015c2:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80015c4:	2320      	movs	r3, #32
 80015c6:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80015ca:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80015ce:	2300      	movs	r3, #0
 80015d0:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 80015d4:	2003      	movs	r0, #3
 80015d6:	e000      	b.n	80015da <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 80015d8:	2000      	movs	r0, #0
}
 80015da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080015de <HAL_UART_Init>:
  if(huart == NULL)
 80015de:	b358      	cbz	r0, 8001638 <HAL_UART_Init+0x5a>
{
 80015e0:	b510      	push	{r4, lr}
 80015e2:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 80015e4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80015e8:	b30b      	cbz	r3, 800162e <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80015ea:	2324      	movs	r3, #36	; 0x24
 80015ec:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80015f0:	6822      	ldr	r2, [r4, #0]
 80015f2:	68d3      	ldr	r3, [r2, #12]
 80015f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80015f8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80015fa:	4620      	mov	r0, r4
 80015fc:	f7ff fee8 	bl	80013d0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001600:	6822      	ldr	r2, [r4, #0]
 8001602:	6913      	ldr	r3, [r2, #16]
 8001604:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001608:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800160a:	6822      	ldr	r2, [r4, #0]
 800160c:	6953      	ldr	r3, [r2, #20]
 800160e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001612:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001614:	6822      	ldr	r2, [r4, #0]
 8001616:	68d3      	ldr	r3, [r2, #12]
 8001618:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800161c:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800161e:	2000      	movs	r0, #0
 8001620:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001622:	2320      	movs	r3, #32
 8001624:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001628:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 800162c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800162e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001632:	f000 fad7 	bl	8001be4 <HAL_UART_MspInit>
 8001636:	e7d8      	b.n	80015ea <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001638:	2001      	movs	r0, #1
}
 800163a:	4770      	bx	lr

0800163c <HAL_UART_Transmit>:
{
 800163c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001644:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b20      	cmp	r3, #32
 800164c:	d155      	bne.n	80016fa <HAL_UART_Transmit+0xbe>
 800164e:	4604      	mov	r4, r0
 8001650:	460d      	mov	r5, r1
 8001652:	4690      	mov	r8, r2
    if((pData == NULL) || (Size == 0U))
 8001654:	2900      	cmp	r1, #0
 8001656:	d055      	beq.n	8001704 <HAL_UART_Transmit+0xc8>
 8001658:	2a00      	cmp	r2, #0
 800165a:	d055      	beq.n	8001708 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 800165c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001660:	2b01      	cmp	r3, #1
 8001662:	d053      	beq.n	800170c <HAL_UART_Transmit+0xd0>
 8001664:	2301      	movs	r3, #1
 8001666:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800166a:	2300      	movs	r3, #0
 800166c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800166e:	2321      	movs	r3, #33	; 0x21
 8001670:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001674:	f7fe fdae 	bl	80001d4 <HAL_GetTick>
 8001678:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800167a:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800167e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001682:	e010      	b.n	80016a6 <HAL_UART_Transmit+0x6a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001684:	9600      	str	r6, [sp, #0]
 8001686:	463b      	mov	r3, r7
 8001688:	2200      	movs	r2, #0
 800168a:	2180      	movs	r1, #128	; 0x80
 800168c:	4620      	mov	r0, r4
 800168e:	f7ff ff75 	bl	800157c <UART_WaitOnFlagUntilTimeout>
 8001692:	2800      	cmp	r0, #0
 8001694:	d13c      	bne.n	8001710 <HAL_UART_Transmit+0xd4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001696:	882b      	ldrh	r3, [r5, #0]
 8001698:	6822      	ldr	r2, [r4, #0]
 800169a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800169e:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80016a0:	6923      	ldr	r3, [r4, #16]
 80016a2:	b9c3      	cbnz	r3, 80016d6 <HAL_UART_Transmit+0x9a>
          pData +=2U;
 80016a4:	3502      	adds	r5, #2
    while(huart->TxXferCount > 0U)
 80016a6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	b1b3      	cbz	r3, 80016da <HAL_UART_Transmit+0x9e>
      huart->TxXferCount--;
 80016ac:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80016ae:	3b01      	subs	r3, #1
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80016b4:	68a3      	ldr	r3, [r4, #8]
 80016b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016ba:	d0e3      	beq.n	8001684 <HAL_UART_Transmit+0x48>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016bc:	9600      	str	r6, [sp, #0]
 80016be:	463b      	mov	r3, r7
 80016c0:	2200      	movs	r2, #0
 80016c2:	2180      	movs	r1, #128	; 0x80
 80016c4:	4620      	mov	r0, r4
 80016c6:	f7ff ff59 	bl	800157c <UART_WaitOnFlagUntilTimeout>
 80016ca:	bb18      	cbnz	r0, 8001714 <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80016cc:	782a      	ldrb	r2, [r5, #0]
 80016ce:	6823      	ldr	r3, [r4, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	3501      	adds	r5, #1
 80016d4:	e7e7      	b.n	80016a6 <HAL_UART_Transmit+0x6a>
          pData +=1U;
 80016d6:	3501      	adds	r5, #1
 80016d8:	e7e5      	b.n	80016a6 <HAL_UART_Transmit+0x6a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80016da:	9600      	str	r6, [sp, #0]
 80016dc:	463b      	mov	r3, r7
 80016de:	2200      	movs	r2, #0
 80016e0:	2140      	movs	r1, #64	; 0x40
 80016e2:	4620      	mov	r0, r4
 80016e4:	f7ff ff4a 	bl	800157c <UART_WaitOnFlagUntilTimeout>
 80016e8:	4603      	mov	r3, r0
 80016ea:	b9a8      	cbnz	r0, 8001718 <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 80016ec:	2220      	movs	r2, #32
 80016ee:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80016f2:	2200      	movs	r2, #0
 80016f4:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 80016f8:	e000      	b.n	80016fc <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 80016fa:	2302      	movs	r3, #2
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	b002      	add	sp, #8
 8001700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e7f9      	b.n	80016fc <HAL_UART_Transmit+0xc0>
 8001708:	2301      	movs	r3, #1
 800170a:	e7f7      	b.n	80016fc <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 800170c:	2302      	movs	r3, #2
 800170e:	e7f5      	b.n	80016fc <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e7f3      	b.n	80016fc <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e7f1      	b.n	80016fc <HAL_UART_Transmit+0xc0>
      return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e7ef      	b.n	80016fc <HAL_UART_Transmit+0xc0>

0800171c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800171c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001720:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001722:	2400      	movs	r4, #0
 8001724:	9404      	str	r4, [sp, #16]
 8001726:	9405      	str	r4, [sp, #20]
 8001728:	9406      	str	r4, [sp, #24]
 800172a:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800172c:	4b2e      	ldr	r3, [pc, #184]	; (80017e8 <MX_GPIO_Init+0xcc>)
 800172e:	699a      	ldr	r2, [r3, #24]
 8001730:	f042 0210 	orr.w	r2, r2, #16
 8001734:	619a      	str	r2, [r3, #24]
 8001736:	699a      	ldr	r2, [r3, #24]
 8001738:	f002 0210 	and.w	r2, r2, #16
 800173c:	9200      	str	r2, [sp, #0]
 800173e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001740:	699a      	ldr	r2, [r3, #24]
 8001742:	f042 0220 	orr.w	r2, r2, #32
 8001746:	619a      	str	r2, [r3, #24]
 8001748:	699a      	ldr	r2, [r3, #24]
 800174a:	f002 0220 	and.w	r2, r2, #32
 800174e:	9201      	str	r2, [sp, #4]
 8001750:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	699a      	ldr	r2, [r3, #24]
 8001754:	f042 0204 	orr.w	r2, r2, #4
 8001758:	619a      	str	r2, [r3, #24]
 800175a:	699a      	ldr	r2, [r3, #24]
 800175c:	f002 0204 	and.w	r2, r2, #4
 8001760:	9202      	str	r2, [sp, #8]
 8001762:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001764:	699a      	ldr	r2, [r3, #24]
 8001766:	f042 0208 	orr.w	r2, r2, #8
 800176a:	619a      	str	r2, [r3, #24]
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	9303      	str	r3, [sp, #12]
 8001774:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001776:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80017f8 <MX_GPIO_Init+0xdc>
 800177a:	4622      	mov	r2, r4
 800177c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001780:	4640      	mov	r0, r8
 8001782:	f7fe fedf 	bl	8000544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TLC5947_BLANK_Pin|TLC5947_XLAT_Pin|LED_TEST_Pin, GPIO_PIN_RESET);
 8001786:	4d19      	ldr	r5, [pc, #100]	; (80017ec <MX_GPIO_Init+0xd0>)
 8001788:	4622      	mov	r2, r4
 800178a:	211a      	movs	r1, #26
 800178c:	4628      	mov	r0, r5
 800178e:	f7fe fed9 	bl	8000544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001792:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001796:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001798:	2701      	movs	r7, #1
 800179a:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2602      	movs	r6, #2
 80017a0:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a2:	a904      	add	r1, sp, #16
 80017a4:	4640      	mov	r0, r8
 80017a6:	f7fe fde3 	bl	8000370 <HAL_GPIO_Init>

  /*Configure GPIO pins : TLC5947_BLANK_Pin TLC5947_XLAT_Pin LED_TEST_Pin */
  GPIO_InitStruct.Pin = TLC5947_BLANK_Pin|TLC5947_XLAT_Pin|LED_TEST_Pin;
 80017aa:	231a      	movs	r3, #26
 80017ac:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ae:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b2:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b4:	a904      	add	r1, sp, #16
 80017b6:	4628      	mov	r0, r5
 80017b8:	f7fe fdda 	bl	8000370 <HAL_GPIO_Init>

  /*Configure GPIO pin : HALL_Pin */
  GPIO_InitStruct.Pin = HALL_Pin;
 80017bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017c0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <MX_GPIO_Init+0xd4>)
 80017c4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(HALL_GPIO_Port, &GPIO_InitStruct);
 80017c8:	a904      	add	r1, sp, #16
 80017ca:	480a      	ldr	r0, [pc, #40]	; (80017f4 <MX_GPIO_Init+0xd8>)
 80017cc:	f7fe fdd0 	bl	8000370 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80017d0:	4622      	mov	r2, r4
 80017d2:	4621      	mov	r1, r4
 80017d4:	2017      	movs	r0, #23
 80017d6:	f7fe fd29 	bl	800022c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017da:	2017      	movs	r0, #23
 80017dc:	f7fe fd5a 	bl	8000294 <HAL_NVIC_EnableIRQ>

}
 80017e0:	b008      	add	sp, #32
 80017e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017e6:	bf00      	nop
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40010800 	.word	0x40010800
 80017f0:	10110000 	.word	0x10110000
 80017f4:	40010c00 	.word	0x40010c00
 80017f8:	40011000 	.word	0x40011000

080017fc <MX_TIM3_Init>:
{
 80017fc:	b530      	push	{r4, r5, lr}
 80017fe:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001800:	2400      	movs	r4, #0
 8001802:	9402      	str	r4, [sp, #8]
 8001804:	9403      	str	r4, [sp, #12]
 8001806:	9404      	str	r4, [sp, #16]
 8001808:	9405      	str	r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800180a:	9400      	str	r4, [sp, #0]
 800180c:	9401      	str	r4, [sp, #4]
  htim3.Instance = TIM3;
 800180e:	4d0f      	ldr	r5, [pc, #60]	; (800184c <MX_TIM3_Init+0x50>)
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <MX_TIM3_Init+0x54>)
 8001812:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 35999;
 8001814:	f648 439f 	movw	r3, #35999	; 0x8c9f
 8001818:	606b      	str	r3, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181a:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 2000;
 800181c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001820:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001822:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001828:	4628      	mov	r0, r5
 800182a:	f7ff fd8d 	bl	8001348 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800182e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001832:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001834:	a902      	add	r1, sp, #8
 8001836:	4628      	mov	r0, r5
 8001838:	f7ff fc06 	bl	8001048 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183c:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183e:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001840:	4669      	mov	r1, sp
 8001842:	4628      	mov	r0, r5
 8001844:	f7ff fd99 	bl	800137a <HAL_TIMEx_MasterConfigSynchronization>
}
 8001848:	b007      	add	sp, #28
 800184a:	bd30      	pop	{r4, r5, pc}
 800184c:	200000b4 	.word	0x200000b4
 8001850:	40000400 	.word	0x40000400

08001854 <MX_SPI1_Init>:
{
 8001854:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8001856:	480c      	ldr	r0, [pc, #48]	; (8001888 <MX_SPI1_Init+0x34>)
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <MX_SPI1_Init+0x38>)
 800185a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800185c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001860:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001862:	2300      	movs	r3, #0
 8001864:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001866:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001868:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800186a:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800186c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001870:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001872:	2208      	movs	r2, #8
 8001874:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001876:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001878:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800187a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800187c:	230a      	movs	r3, #10
 800187e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001880:	f7ff fb5d 	bl	8000f3e <HAL_SPI_Init>
}
 8001884:	bd08      	pop	{r3, pc}
 8001886:	bf00      	nop
 8001888:	200000f4 	.word	0x200000f4
 800188c:	40013000 	.word	0x40013000

08001890 <MX_USART3_UART_Init>:
{
 8001890:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 8001892:	4808      	ldr	r0, [pc, #32]	; (80018b4 <MX_USART3_UART_Init+0x24>)
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <MX_USART3_UART_Init+0x28>)
 8001896:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 9600;
 8001898:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800189c:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800189e:	2300      	movs	r3, #0
 80018a0:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018a2:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018a4:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018a6:	220c      	movs	r2, #12
 80018a8:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018aa:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018ac:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018ae:	f7ff fe96 	bl	80015de <HAL_UART_Init>
}
 80018b2:	bd08      	pop	{r3, pc}
 80018b4:	20000074 	.word	0x20000074
 80018b8:	40004800 	.word	0x40004800

080018bc <SystemClock_Config>:
{
 80018bc:	b530      	push	{r4, r5, lr}
 80018be:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018c0:	2400      	movs	r4, #0
 80018c2:	9408      	str	r4, [sp, #32]
 80018c4:	9409      	str	r4, [sp, #36]	; 0x24
 80018c6:	940b      	str	r4, [sp, #44]	; 0x2c
 80018c8:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018ca:	9401      	str	r4, [sp, #4]
 80018cc:	9402      	str	r4, [sp, #8]
 80018ce:	9403      	str	r4, [sp, #12]
 80018d0:	9404      	str	r4, [sp, #16]
 80018d2:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018d4:	2201      	movs	r2, #1
 80018d6:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018dc:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018de:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e0:	2502      	movs	r5, #2
 80018e2:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018e4:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80018ea:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ec:	a806      	add	r0, sp, #24
 80018ee:	f7fe fe57 	bl	80005a0 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018f2:	230f      	movs	r3, #15
 80018f4:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018f6:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018f8:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018fe:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001900:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001902:	4629      	mov	r1, r5
 8001904:	a801      	add	r0, sp, #4
 8001906:	f7ff f871 	bl	80009ec <HAL_RCC_ClockConfig>
}
 800190a:	b011      	add	sp, #68	; 0x44
 800190c:	bd30      	pop	{r4, r5, pc}
	...

08001910 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001910:	b508      	push	{r3, lr}
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

  HAL_GPIO_TogglePin(BOARD_LED_PORT, BOARD_LED_PIN);//Prendo y apago el pin cada 'x' segundos
 8001912:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001916:	4802      	ldr	r0, [pc, #8]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001918:	f7fe fe1a 	bl	8000550 <HAL_GPIO_TogglePin>


}
 800191c:	bd08      	pop	{r3, pc}
 800191e:	bf00      	nop
 8001920:	40011000 	.word	0x40011000

08001924 <HAL_GPIO_EXTI_Callback>:
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  //HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);//buscar valor en stm32f103xb.h
  g_prevTime = g_curTime;
 8001924:	4b18      	ldr	r3, [pc, #96]	; (8001988 <HAL_GPIO_EXTI_Callback+0x64>)
 8001926:	881a      	ldrh	r2, [r3, #0]
 8001928:	4b18      	ldr	r3, [pc, #96]	; (800198c <HAL_GPIO_EXTI_Callback+0x68>)
 800192a:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == GPIO_PIN_9) // pin del sensor hall
 800192c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001930:	d000      	beq.n	8001934 <HAL_GPIO_EXTI_Callback+0x10>
 8001932:	4770      	bx	lr
{
 8001934:	b570      	push	{r4, r5, r6, lr}
  {
	  HAL_GPIO_TogglePin(GPIOA, LED_TEST_Pin); // prendo/apago el led
 8001936:	2110      	movs	r1, #16
 8001938:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800193c:	f500 3083 	add.w	r0, r0, #67072	; 0x10600
 8001940:	f7fe fe06 	bl	8000550 <HAL_GPIO_TogglePin>
	  //HAL_GPIO_WritePin(GPIOA, LED_TEST_Pin, GPIO_PIN_SET);

	  g_curTime = HAL_GetTick(); //Provides a tick value in millisecond
 8001944:	f7fe fc46 	bl	80001d4 <HAL_GetTick>
 8001948:	b280      	uxth	r0, r0
 800194a:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <HAL_GPIO_EXTI_Callback+0x64>)
 800194c:	8018      	strh	r0, [r3, #0]
	  count ++;
 800194e:	4a10      	ldr	r2, [pc, #64]	; (8001990 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001950:	6813      	ldr	r3, [r2, #0]
 8001952:	3301      	adds	r3, #1
 8001954:	6013      	str	r3, [r2, #0]
	  g_tDelay = (g_curTime - g_prevTime);
 8001956:	4b0d      	ldr	r3, [pc, #52]	; (800198c <HAL_GPIO_EXTI_Callback+0x68>)
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	1ac0      	subs	r0, r0, r3
 800195c:	b280      	uxth	r0, r0
 800195e:	4e0d      	ldr	r6, [pc, #52]	; (8001994 <HAL_GPIO_EXTI_Callback+0x70>)
 8001960:	8030      	strh	r0, [r6, #0]
	  uartByte = (uint8_t)(g_tDelay & 0x00ff); // i keep only the first byte LSB
 8001962:	4c0d      	ldr	r4, [pc, #52]	; (8001998 <HAL_GPIO_EXTI_Callback+0x74>)
 8001964:	7020      	strb	r0, [r4, #0]

	  HAL_UART_Transmit(&huart3, &uartByte, 1, 100U);
 8001966:	4d0d      	ldr	r5, [pc, #52]	; (800199c <HAL_GPIO_EXTI_Callback+0x78>)
 8001968:	2364      	movs	r3, #100	; 0x64
 800196a:	2201      	movs	r2, #1
 800196c:	4621      	mov	r1, r4
 800196e:	4628      	mov	r0, r5
 8001970:	f7ff fe64 	bl	800163c <HAL_UART_Transmit>
	  uartByte =(uint8_t)((g_tDelay >>8) & 0x00ff); // i read the second byte MSB
 8001974:	8833      	ldrh	r3, [r6, #0]
 8001976:	0a1b      	lsrs	r3, r3, #8
 8001978:	7023      	strb	r3, [r4, #0]
	  HAL_UART_Transmit(&huart3, &uartByte, 1, 100U);
 800197a:	2364      	movs	r3, #100	; 0x64
 800197c:	2201      	movs	r2, #1
 800197e:	4621      	mov	r1, r4
 8001980:	4628      	mov	r0, r5
 8001982:	f7ff fe5b 	bl	800163c <HAL_UART_Transmit>
  }

  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
  //HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

}
 8001986:	bd70      	pop	{r4, r5, r6, pc}
 8001988:	20000060 	.word	0x20000060
 800198c:	20000062 	.word	0x20000062
 8001990:	20000058 	.word	0x20000058
 8001994:	20000064 	.word	0x20000064
 8001998:	20000070 	.word	0x20000070
 800199c:	20000074 	.word	0x20000074

080019a0 <TLC_Write>:
    return ;
}


void TLC_Write(uint8_t data)
{
 80019a0:	b500      	push	{lr}
 80019a2:	b083      	sub	sp, #12
 80019a4:	a902      	add	r1, sp, #8
 80019a6:	f801 0d01 	strb.w	r0, [r1, #-1]!
    HAL_SPI_Transmit(&hspi1, &data, sizeof(data), 0);
 80019aa:	2300      	movs	r3, #0
 80019ac:	2201      	movs	r2, #1
 80019ae:	4805      	ldr	r0, [pc, #20]	; (80019c4 <TLC_Write+0x24>)
 80019b0:	f7ff f96f 	bl	8000c92 <HAL_SPI_Transmit>
    while(HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET);
 80019b4:	4803      	ldr	r0, [pc, #12]	; (80019c4 <TLC_Write+0x24>)
 80019b6:	f7ff fabf 	bl	8000f38 <HAL_SPI_GetState>
 80019ba:	2800      	cmp	r0, #0
 80019bc:	d0fa      	beq.n	80019b4 <TLC_Write+0x14>

    return ;
}
 80019be:	b003      	add	sp, #12
 80019c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80019c4:	200000f4 	.word	0x200000f4

080019c8 <TLC_Update>:
{
 80019c8:	b570      	push	{r4, r5, r6, lr}
    HAL_GPIO_WritePin(TLC5947_BLANK_PORT, TLC5947_BLANK_Pin, GPIO_PIN_SET);
 80019ca:	2201      	movs	r2, #1
 80019cc:	2102      	movs	r1, #2
 80019ce:	4608      	mov	r0, r1
 80019d0:	f7fe fdb8 	bl	8000544 <HAL_GPIO_WritePin>
    for (int8_t i = 23; i >= 0; i -= 2)
 80019d4:	2417      	movs	r4, #23
 80019d6:	e017      	b.n	8001a08 <TLC_Update+0x40>
        uint8_t send = leds[i] >> 4;
 80019d8:	4d18      	ldr	r5, [pc, #96]	; (8001a3c <TLC_Update+0x74>)
 80019da:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
        TLC_Write(send);
 80019de:	f3c0 1007 	ubfx	r0, r0, #4, #8
 80019e2:	f7ff ffdd 	bl	80019a0 <TLC_Write>
        send = (leds[i] & 0x000F);
 80019e6:	f815 0014 	ldrb.w	r0, [r5, r4, lsl #1]
        send1 = (leds[i-1]) >> 8;
 80019ea:	1e66      	subs	r6, r4, #1
 80019ec:	f835 3016 	ldrh.w	r3, [r5, r6, lsl #1]
        send |= send1;
 80019f0:	0100      	lsls	r0, r0, #4
 80019f2:	ea40 2013 	orr.w	r0, r0, r3, lsr #8
        TLC_Write(send);
 80019f6:	b2c0      	uxtb	r0, r0
 80019f8:	f7ff ffd2 	bl	80019a0 <TLC_Write>
        TLC_Write(send);
 80019fc:	f815 0016 	ldrb.w	r0, [r5, r6, lsl #1]
 8001a00:	f7ff ffce 	bl	80019a0 <TLC_Write>
    for (int8_t i = 23; i >= 0; i -= 2)
 8001a04:	3c02      	subs	r4, #2
 8001a06:	b264      	sxtb	r4, r4
 8001a08:	2c00      	cmp	r4, #0
 8001a0a:	dae5      	bge.n	80019d8 <TLC_Update+0x10>
    HAL_GPIO_WritePin(TLC5947_XLAT_PORT, TLC5947_XLAT_Pin, GPIO_PIN_SET);
 8001a0c:	4c0c      	ldr	r4, [pc, #48]	; (8001a40 <TLC_Update+0x78>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	2108      	movs	r1, #8
 8001a12:	4620      	mov	r0, r4
 8001a14:	f7fe fd96 	bl	8000544 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001a18:	2001      	movs	r0, #1
 8001a1a:	f7fe fbe1 	bl	80001e0 <HAL_Delay>
    HAL_GPIO_WritePin(TLC5947_XLAT_PORT, TLC5947_XLAT_Pin, GPIO_PIN_RESET);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2108      	movs	r1, #8
 8001a22:	4620      	mov	r0, r4
 8001a24:	f7fe fd8e 	bl	8000544 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001a28:	2001      	movs	r0, #1
 8001a2a:	f7fe fbd9 	bl	80001e0 <HAL_Delay>
    HAL_GPIO_WritePin(TLC5947_BLANK_PORT, TLC5947_BLANK_Pin, GPIO_PIN_RESET);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2102      	movs	r1, #2
 8001a32:	4608      	mov	r0, r1
 8001a34:	f7fe fd86 	bl	8000544 <HAL_GPIO_WritePin>
}
 8001a38:	bd70      	pop	{r4, r5, r6, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000008 	.word	0x20000008
 8001a40:	40010800 	.word	0x40010800

08001a44 <main>:
{
 8001a44:	b508      	push	{r3, lr}
  HAL_Init();
 8001a46:	f7fe fba7 	bl	8000198 <HAL_Init>
  SystemClock_Config();
 8001a4a:	f7ff ff37 	bl	80018bc <SystemClock_Config>
  MX_GPIO_Init();
 8001a4e:	f7ff fe65 	bl	800171c <MX_GPIO_Init>
  MX_TIM3_Init();
 8001a52:	f7ff fed3 	bl	80017fc <MX_TIM3_Init>
  MX_SPI1_Init();
 8001a56:	f7ff fefd 	bl	8001854 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001a5a:	f7ff ff19 	bl	8001890 <MX_USART3_UART_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 8001a5e:	481e      	ldr	r0, [pc, #120]	; (8001ad8 <main+0x94>)
 8001a60:	f7ff fae6 	bl	8001030 <HAL_TIM_Base_Start_IT>
 8001a64:	e011      	b.n	8001a8a <main+0x46>
	  				i-=5;
 8001a66:	491d      	ldr	r1, [pc, #116]	; (8001adc <main+0x98>)
 8001a68:	680a      	ldr	r2, [r1, #0]
 8001a6a:	3a05      	subs	r2, #5
 8001a6c:	600a      	str	r2, [r1, #0]
 8001a6e:	e014      	b.n	8001a9a <main+0x56>
	  		if(flag==1&&i==0)//Dimmest light
 8001a70:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <main+0x9c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d021      	beq.n	8001abc <main+0x78>
	  		leds[0]=i;//update channel 0 PWM
 8001a78:	4b18      	ldr	r3, [pc, #96]	; (8001adc <main+0x98>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <main+0xa0>)
 8001a7e:	801a      	strh	r2, [r3, #0]
	  		TLC_Update();//renew PWM
 8001a80:	f7ff ffa2 	bl	80019c8 <TLC_Update>
	  		HAL_Delay(1);
 8001a84:	2001      	movs	r0, #1
 8001a86:	f7fe fbab 	bl	80001e0 <HAL_Delay>
	  if(flag==0)//light fades
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <main+0x9c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1e9      	bne.n	8001a66 <main+0x22>
	  				i+=5;
 8001a92:	4912      	ldr	r1, [pc, #72]	; (8001adc <main+0x98>)
 8001a94:	680a      	ldr	r2, [r1, #0]
 8001a96:	3205      	adds	r2, #5
 8001a98:	600a      	str	r2, [r1, #0]
	  		if(flag==0&&i==4095)//the brightest light
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1e8      	bne.n	8001a70 <main+0x2c>
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <main+0x98>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d1e2      	bne.n	8001a70 <main+0x2c>
	  			HAL_GPIO_WritePin(GPIOA, LED_TEST_Pin, GPIO_PIN_SET);
 8001aaa:	2201      	movs	r2, #1
 8001aac:	2110      	movs	r1, #16
 8001aae:	480e      	ldr	r0, [pc, #56]	; (8001ae8 <main+0xa4>)
 8001ab0:	f7fe fd48 	bl	8000544 <HAL_GPIO_WritePin>
	  			flag=1;
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <main+0x9c>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	e7d9      	b.n	8001a70 <main+0x2c>
	  		if(flag==1&&i==0)//Dimmest light
 8001abc:	4b07      	ldr	r3, [pc, #28]	; (8001adc <main+0x98>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1d9      	bne.n	8001a78 <main+0x34>
	  			HAL_GPIO_WritePin(GPIOA, LED_TEST_Pin, GPIO_PIN_RESET);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2110      	movs	r1, #16
 8001ac8:	4807      	ldr	r0, [pc, #28]	; (8001ae8 <main+0xa4>)
 8001aca:	f7fe fd3b 	bl	8000544 <HAL_GPIO_WritePin>
	  			flag=0;
 8001ace:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <main+0x9c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	e7d0      	b.n	8001a78 <main+0x34>
 8001ad6:	bf00      	nop
 8001ad8:	200000b4 	.word	0x200000b4
 8001adc:	20000068 	.word	0x20000068
 8001ae0:	2000005c 	.word	0x2000005c
 8001ae4:	20000008 	.word	0x20000008
 8001ae8:	40010800 	.word	0x40010800

08001aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aec:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001aee:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <HAL_MspInit+0x3c>)
 8001af0:	699a      	ldr	r2, [r3, #24]
 8001af2:	f042 0201 	orr.w	r2, r2, #1
 8001af6:	619a      	str	r2, [r3, #24]
 8001af8:	699a      	ldr	r2, [r3, #24]
 8001afa:	f002 0201 	and.w	r2, r2, #1
 8001afe:	9200      	str	r2, [sp, #0]
 8001b00:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b02:	69da      	ldr	r2, [r3, #28]
 8001b04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b08:	61da      	str	r2, [r3, #28]
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b10:	9301      	str	r3, [sp, #4]
 8001b12:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b14:	4a05      	ldr	r2, [pc, #20]	; (8001b2c <HAL_MspInit+0x40>)
 8001b16:	6853      	ldr	r3, [r2, #4]
 8001b18:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b22:	b002      	add	sp, #8
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40010000 	.word	0x40010000

08001b30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b30:	b500      	push	{lr}
 8001b32:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	2300      	movs	r3, #0
 8001b36:	9302      	str	r3, [sp, #8]
 8001b38:	9303      	str	r3, [sp, #12]
 8001b3a:	9304      	str	r3, [sp, #16]
 8001b3c:	9305      	str	r3, [sp, #20]
  if(hspi->Instance==SPI1)
 8001b3e:	6802      	ldr	r2, [r0, #0]
 8001b40:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <HAL_SPI_MspInit+0x6c>)
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d002      	beq.n	8001b4c <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b46:	b007      	add	sp, #28
 8001b48:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b4c:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001b50:	699a      	ldr	r2, [r3, #24]
 8001b52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001b56:	619a      	str	r2, [r3, #24]
 8001b58:	699a      	ldr	r2, [r3, #24]
 8001b5a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001b5e:	9200      	str	r2, [sp, #0]
 8001b60:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b62:	699a      	ldr	r2, [r3, #24]
 8001b64:	f042 0204 	orr.w	r2, r2, #4
 8001b68:	619a      	str	r2, [r3, #24]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001b74:	23a0      	movs	r3, #160	; 0xa0
 8001b76:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b80:	a902      	add	r1, sp, #8
 8001b82:	4807      	ldr	r0, [pc, #28]	; (8001ba0 <HAL_SPI_MspInit+0x70>)
 8001b84:	f7fe fbf4 	bl	8000370 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	4611      	mov	r1, r2
 8001b8c:	2023      	movs	r0, #35	; 0x23
 8001b8e:	f7fe fb4d 	bl	800022c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001b92:	2023      	movs	r0, #35	; 0x23
 8001b94:	f7fe fb7e 	bl	8000294 <HAL_NVIC_EnableIRQ>
}
 8001b98:	e7d5      	b.n	8001b46 <HAL_SPI_MspInit+0x16>
 8001b9a:	bf00      	nop
 8001b9c:	40013000 	.word	0x40013000
 8001ba0:	40010800 	.word	0x40010800

08001ba4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 8001ba4:	6802      	ldr	r2, [r0, #0]
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <HAL_TIM_Base_MspInit+0x3c>)
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d000      	beq.n	8001bae <HAL_TIM_Base_MspInit+0xa>
 8001bac:	4770      	bx	lr
{
 8001bae:	b500      	push	{lr}
 8001bb0:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bb2:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8001bb6:	69da      	ldr	r2, [r3, #28]
 8001bb8:	f042 0202 	orr.w	r2, r2, #2
 8001bbc:	61da      	str	r2, [r3, #28]
 8001bbe:	69db      	ldr	r3, [r3, #28]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	9301      	str	r3, [sp, #4]
 8001bc6:	9b01      	ldr	r3, [sp, #4]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	4611      	mov	r1, r2
 8001bcc:	201d      	movs	r0, #29
 8001bce:	f7fe fb2d 	bl	800022c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001bd2:	201d      	movs	r0, #29
 8001bd4:	f7fe fb5e 	bl	8000294 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001bd8:	b003      	add	sp, #12
 8001bda:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bde:	bf00      	nop
 8001be0:	40000400 	.word	0x40000400

08001be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001be4:	b510      	push	{r4, lr}
 8001be6:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	2300      	movs	r3, #0
 8001bea:	9302      	str	r3, [sp, #8]
 8001bec:	9303      	str	r3, [sp, #12]
 8001bee:	9304      	str	r3, [sp, #16]
 8001bf0:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART3)
 8001bf2:	6802      	ldr	r2, [r0, #0]
 8001bf4:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <HAL_UART_MspInit+0x70>)
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d001      	beq.n	8001bfe <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001bfa:	b006      	add	sp, #24
 8001bfc:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bfe:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8001c02:	69da      	ldr	r2, [r3, #28]
 8001c04:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001c08:	61da      	str	r2, [r3, #28]
 8001c0a:	69da      	ldr	r2, [r3, #28]
 8001c0c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001c10:	9200      	str	r2, [sp, #0]
 8001c12:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c14:	699a      	ldr	r2, [r3, #24]
 8001c16:	f042 0208 	orr.w	r2, r2, #8
 8001c1a:	619a      	str	r2, [r3, #24]
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	9301      	str	r3, [sp, #4]
 8001c24:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = SERIAL_OUT_Pin;
 8001c26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c2a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c30:	2303      	movs	r3, #3
 8001c32:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(SERIAL_OUT_GPIO_Port, &GPIO_InitStruct);
 8001c34:	4c08      	ldr	r4, [pc, #32]	; (8001c58 <HAL_UART_MspInit+0x74>)
 8001c36:	a902      	add	r1, sp, #8
 8001c38:	4620      	mov	r0, r4
 8001c3a:	f7fe fb99 	bl	8000370 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c42:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c44:	2300      	movs	r3, #0
 8001c46:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4a:	a902      	add	r1, sp, #8
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	f7fe fb8f 	bl	8000370 <HAL_GPIO_Init>
}
 8001c52:	e7d2      	b.n	8001bfa <HAL_UART_MspInit+0x16>
 8001c54:	40004800 	.word	0x40004800
 8001c58:	40010c00 	.word	0x40010c00

08001c5c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c5c:	4770      	bx	lr

08001c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c5e:	e7fe      	b.n	8001c5e <HardFault_Handler>

08001c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c60:	e7fe      	b.n	8001c60 <MemManage_Handler>

08001c62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c62:	e7fe      	b.n	8001c62 <BusFault_Handler>

08001c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c64:	e7fe      	b.n	8001c64 <UsageFault_Handler>

08001c66 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c66:	4770      	bx	lr

08001c68 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c68:	4770      	bx	lr

08001c6a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c6a:	4770      	bx	lr

08001c6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c6e:	f7fe faa5 	bl	80001bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c72:	bd08      	pop	{r3, pc}

08001c74 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001c76:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c7a:	f7fe fc6d 	bl	8000558 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c7e:	bd08      	pop	{r3, pc}

08001c80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c82:	4802      	ldr	r0, [pc, #8]	; (8001c8c <TIM3_IRQHandler+0xc>)
 8001c84:	f7ff fa68 	bl	8001158 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c88:	bd08      	pop	{r3, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200000b4 	.word	0x200000b4

08001c90 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001c90:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001c92:	4802      	ldr	r0, [pc, #8]	; (8001c9c <SPI1_IRQHandler+0xc>)
 8001c94:	f7ff f8d2 	bl	8000e3c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001c98:	bd08      	pop	{r3, pc}
 8001c9a:	bf00      	nop
 8001c9c:	200000f4 	.word	0x200000f4

08001ca0 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <SystemInit+0x40>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	f042 0201 	orr.w	r2, r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001caa:	6859      	ldr	r1, [r3, #4]
 8001cac:	4a0d      	ldr	r2, [pc, #52]	; (8001ce4 <SystemInit+0x44>)
 8001cae:	400a      	ands	r2, r1
 8001cb0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001cb8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001cbc:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cc4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001ccc:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001cce:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001cd2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001cd4:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <SystemInit+0x48>)
 8001cd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cda:	609a      	str	r2, [r3, #8]
#endif 
}
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	f8ff0000 	.word	0xf8ff0000
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001cec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001cee:	e003      	b.n	8001cf8 <LoopCopyDataInit>

08001cf0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001cf2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001cf4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001cf6:	3104      	adds	r1, #4

08001cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001cf8:	480a      	ldr	r0, [pc, #40]	; (8001d24 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001cfc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001cfe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001d00:	d3f6      	bcc.n	8001cf0 <CopyDataInit>
  ldr r2, =_sbss
 8001d02:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001d04:	e002      	b.n	8001d0c <LoopFillZerobss>

08001d06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001d06:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001d08:	f842 3b04 	str.w	r3, [r2], #4

08001d0c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001d0c:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001d0e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001d10:	d3f9      	bcc.n	8001d06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d12:	f7ff ffc5 	bl	8001ca0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d16:	f000 f80f 	bl	8001d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d1a:	f7ff fe93 	bl	8001a44 <main>
  bx lr
 8001d1e:	4770      	bx	lr
  ldr r3, =_sidata
 8001d20:	08001dcc 	.word	0x08001dcc
  ldr r0, =_sdata
 8001d24:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001d28:	2000003c 	.word	0x2000003c
  ldr r2, =_sbss
 8001d2c:	2000003c 	.word	0x2000003c
  ldr r3, = _ebss
 8001d30:	2000014c 	.word	0x2000014c

08001d34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d34:	e7fe      	b.n	8001d34 <ADC1_2_IRQHandler>
	...

08001d38 <__libc_init_array>:
 8001d38:	b570      	push	{r4, r5, r6, lr}
 8001d3a:	2500      	movs	r5, #0
 8001d3c:	4e0c      	ldr	r6, [pc, #48]	; (8001d70 <__libc_init_array+0x38>)
 8001d3e:	4c0d      	ldr	r4, [pc, #52]	; (8001d74 <__libc_init_array+0x3c>)
 8001d40:	1ba4      	subs	r4, r4, r6
 8001d42:	10a4      	asrs	r4, r4, #2
 8001d44:	42a5      	cmp	r5, r4
 8001d46:	d109      	bne.n	8001d5c <__libc_init_array+0x24>
 8001d48:	f000 f81a 	bl	8001d80 <_init>
 8001d4c:	2500      	movs	r5, #0
 8001d4e:	4e0a      	ldr	r6, [pc, #40]	; (8001d78 <__libc_init_array+0x40>)
 8001d50:	4c0a      	ldr	r4, [pc, #40]	; (8001d7c <__libc_init_array+0x44>)
 8001d52:	1ba4      	subs	r4, r4, r6
 8001d54:	10a4      	asrs	r4, r4, #2
 8001d56:	42a5      	cmp	r5, r4
 8001d58:	d105      	bne.n	8001d66 <__libc_init_array+0x2e>
 8001d5a:	bd70      	pop	{r4, r5, r6, pc}
 8001d5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d60:	4798      	blx	r3
 8001d62:	3501      	adds	r5, #1
 8001d64:	e7ee      	b.n	8001d44 <__libc_init_array+0xc>
 8001d66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d6a:	4798      	blx	r3
 8001d6c:	3501      	adds	r5, #1
 8001d6e:	e7f2      	b.n	8001d56 <__libc_init_array+0x1e>
 8001d70:	08001dc4 	.word	0x08001dc4
 8001d74:	08001dc4 	.word	0x08001dc4
 8001d78:	08001dc4 	.word	0x08001dc4
 8001d7c:	08001dc8 	.word	0x08001dc8

08001d80 <_init>:
 8001d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d82:	bf00      	nop
 8001d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d86:	bc08      	pop	{r3}
 8001d88:	469e      	mov	lr, r3
 8001d8a:	4770      	bx	lr

08001d8c <_fini>:
 8001d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d8e:	bf00      	nop
 8001d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d92:	bc08      	pop	{r3}
 8001d94:	469e      	mov	lr, r3
 8001d96:	4770      	bx	lr
